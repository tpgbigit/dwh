/****** Object:  View [DWH].[VW_MRP_CUSTOMER_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_CUSTOMER_D] AS SELECT 
	[ROW_WID] [Customer Key],
	[CUSTOMER_CODE] [Customer Code],
	[CUSTOMER_NAME] [Customer Name],
	[GROUP] [Customer Group],
	[COUNTRY] [Country]
	
  FROM [DWH].[W_MRP_MD_CUSTOMER_D]
  where [W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_FACTORY_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_FACTORY_D] AS SELECT 
	[ROW_WID] [Factory Key],
	 [FACTORY_CODE]  as [Factory Code],
	[FACTORY_SHORT_NAME] [Factory Short Name],
	[FACTORY_NAME] [Factory Name],
	case when isnull(b.[Customer Code],'0') = '0' then 0
		else 1 end as [Noi Bo Flag]
	
  FROM [DWH].[W_MRP_MD_FACTORY_D] a
  left join [DWH].[VW_MRP_CUSTOMER_D] b 
	on a.[FACTORY_CODE] = b.[Customer Code] and b.[Customer Group] = 'NOIBO'
  where [W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_PRODUCTION_LINE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PRODUCTION_LINE_D] AS SELECT 
	a.[ROW_WID] [Production Line Key],
	a.[FACTORY_WID] [Factory Key],
	a.[DEPARTMENT_CODE] [Production Line Code],
	b.[Factory Code] + ' - ' + a.[DEPARTMENT_CODE] [Factory - Line Code],
	a.[DEPARTMENT_NAME] [Production Line Name],
	a.[IS_LINE] [Is Line]
	,case when a.[DEPARTMENT_CODE] = 'PKT' then 'False'
	else a.[IS_PLAN] end as [Is Plan]
	,a.[SOURCE] [Source]

  FROM [DWH].[W_MRP_MD_DEPARTMENT_D] a
  left join [DWH].[VW_MRP_FACTORY_D] b
  on a.[FACTORY_WID] = b.[Factory Key]
  where [W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_CONTRACT_TYPE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_CONTRACT_TYPE_D] AS SELECT ROW_NUMBER() OVER (ORDER BY [CONTRACT_TYPE_CODE]) ContractTypeKey
,[CONTRACT_TYPE_CODE] [Contract Type Code]
,[CONTRACT_TYPE_NAME] [Contract Type Name]
,[CONTRACT_TYPE_GROUP][Contract Type Group]
,[CONTRACT_PARENT_TYPE_GROUP] [Contract Parent Type Group]
,[PRODUCTION_TYPE] [Production Type]
	 
FROM
	(SELECT DISTINCT [CONTRACT_TYPE_CODE] 
	,[CONTRACT_TYPE_NAME] 
	,[CONTRACT_TYPE_GROUP]
	,[CONTRACT_PARENT_TYPE_GROUP]
	,[PRODUCTION_TYPE]
	FROM [DWH].[W_MRP_MD_CONTRACT_F]) A;
GO
/****** Object:  View [DWH].[VW_MRP_PRODUCTION_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PRODUCTION_F] AS WITH CTE 
AS
(SELECT
		A.[DATE_WID] [Date Key],
	   A.[PRODUCTION_DATE_WID] [Production Date Key]
      ,A.[ITEM_WID] [Item Key]
      ,A.[DEPARTMENT_WID] [Production Line Key]
	  ,ISNULL(M.[CUSTOMER_WID],0) [Customer Key]
	 
      ,C.[ContractTypeKey] [Contract Type Key]
      ,A.[PRODUCTION_DATE] [Production Date]
      ,A.[BATCH_NO] [Batch No]
      ,A.[PO_ID] [PO Id]
      ,A.[PRODUCTION_STAGE_CODE] [Production Stage Code]
      ,F.[ROW_WID] [Factory Key]
      ,A.[QUANTITY] [Production Quantity]
	  ,A.[FACTORY_CODE] [Factory Code]
      ,A.[TABLE_NO] [Table No]
      ,A.[LOT_NO] [Lot No]
      ,A.[LAYERS_QUANTITY] [Layers Quantity]
      ,A.[ITEM_NO] [Item No]
      ,A.[CARTON_QUANTITY] [Carton Quantity]



	  ,m.[PRICE_FOB] [Price FOB]

	  , m.[PRICE_FOB] * A.[QUANTITY]  AS [FOB Production Amount]
	,CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_CM_2] ELSE [PRICE_CM_3] END [Price CM],
	CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_P_2] ELSE [PRICE_P_3] END [Price P],
	CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_T_2] ELSE [PRICE_T_3] END [Price T],
	CASE WHEN [PRICE_W3] =0 THEN [PRICE_W_2] ELSE [PRICE_W3] END [Price W],
	CASE WHEN [PRICE_E_3] =0 THEN [PRICE_E_2] ELSE [PRICE_E_3] END [Price E],
	CASE WHEN [PRICE_IN_3] =0 THEN [PRICE_IN_2] ELSE [PRICE_IN_3] END [Price In],
	CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_OTHER_2] ELSE [PRICE_OTHER_3] END [Price Other]

	,a.[PO_SOURCE] [PO Source]
      
  FROM [DWH].[W_MRP_TRX_PRODUCTION_ACTUAL_F] A
  LEFT JOIN 
  ([DWH].[W_MRP_MD_CONTRACT_F] B
  LEFT JOIN [DWH].[VW_MRP_CONTRACT_TYPE_D] C
  ON B.[CONTRACT_TYPE_CODE] = C.[Contract Type Code])
  ON A.[CONTRACT_WID] = B.[ROW_WID]

  LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] F
  ON A.[FACTORY_CODE] = F.[FACTORY_CODE]

  LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] M
  ON A.ITEM_WID = M.ROW_WID
  
  LEFT JOIN [DWH].[W_MRP_MD_PROCESSING_PRICE_D] P
  ON A.[PROCESSING_PRICE_WID] = P.[ROW_WID]

  where A.[W_DELETE_FLG] = '0'



)
,

CTE2 AS

(SELECT *
	, case when cte.[PO Source] = 'BU' then 0
	else [Price CM] * [Production Quantity] end AS [CM Production Amount]
	, case when cte.[PO Source] = 'BU' then 0
	else [Price P] * [Production Quantity] end AS [P Production Amount]
	, case when cte.[PO Source] = 'BU' then 0
	else [Price T] * [Production Quantity] end AS [T Production Amount]
	, case when cte.[PO Source] = 'BU' then 0
	else [Price Other] * [Production Quantity] end AS [Other Production Amount]
	, [Price CM] + [Price P] + [Price T] + [Price E] + [Price W] + [Price In] + [Price Other] AS [Price Total]
	, CASE WHEN [Price W] = 0 THEN 0 
			WHEN [Price W] IS NULL THEN NULL
			ELSE [Production Quantity]  END AS [W Quantity]
	, CASE WHEN [Price E] = 0 THEN 0 
			WHEN [Price E] IS NULL THEN NULL
			ELSE [Production Quantity]  END AS [E Quantity]
	, CASE WHEN [Price IN] = 0 THEN 0 
			WHEN [Price IN] IS NULL THEN NULL
			ELSE [Production Quantity]  END AS [IN Quantity]
	
		
FROM CTE)



SELECT *
	, case when a.[PO Source] = 'BU' then 0
	else [Price W] * [W Quantity] end AS [W Production Amount]
	,  case when a.[PO Source] = 'BU' then 0
	else [Price E] * [E Quantity] end  AS [E Production Amount]
	,  case when a.[PO Source] = 'BU' then 0
	else [Price IN] * [IN Quantity] end AS [IN Production Amount]
	, case when a.[PO Source] = 'BU' then 0
	else [Price Total] * [Production Quantity] end AS [Total Production Amount]

	

FROM CTE2 a;
GO
/****** Object:  View [DWH].[VW_MRP_SALES_INVOICE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_SALES_INVOICE_F] AS SELECT

      A.[DATE_WID] [Date Key]
      ,A.[ITEM_WID] [Item Key]
      ,A.[CUSTOMER_WID] [Customer Key]
      ,A.[FACTORY_WID] [Factory Key]
	  ,C.[ContractTypeKey] [Contract Type Key]
	  ,A.[PO_ID] [PO Id]
      ,A.[INVOICE_NUMBER] [Invoice Number]
      ,A.[INVOICE_LINE] [Invoice Line]
      ,A.[INVOICE_DATE] [Invoice Date]
      ,A.[INVOICE_STATUS] [Invoice Status]
	  ,A.[PAYMENT_TERM] [Payment Term]
      ,A.[PAYMENT_METHOD] [Payment Method]
      ,A.[FACTORY_CODE] [Factory Code]
	  ,A.[COUNTRY_DESTINATION] [Country Destination]
      ,A.[UOM] [UOM]
      ,A.[CURRENCY] [Currency]
	  ,A.[PRICE_CONTRACT] [Price Contract]
      ,A.[DISCOUNT_PERCENT] [Discount Percent]
	  
      ,A.[PRICE_FOB] [FOB Invoice Price]
	  ,A.[ETD] [ETD]
      ,A.[PRICE_PROCESSING] [Price GC]
      ,A.[PRICE_CM] [Price CM]
      ,A.[PRICE_P] [Price P]
      ,A.[PRICE_T] [Price T]
      ,A.[PRICE_W] [Price W]
      ,A.[PRICE_E] [Price E]
      ,A.[PRICE_PRINT] [Price Print]
      ,A.[PRICE_OTHER] [Price Other]
	  , case when a.[Price_Type] = 'FOB' then A.[PRICE_FOB]
	  else A.[PRICE_PROCESSING] 
	  end as [FOB/CM Invoice Price]
      ,A.[QUANTITY] [Invoice Quantity]
      ,A.[EXCHANGE_RATE] [Exchange Rate]
	  ,A.[DOCUMENT_AMOUNT] [FOB/CM Invoice Amount]
	  ,A.[QUANTITY] * A.[PRICE_FOB] as [FOB Invoice Amount]
	  ,A.[QUANTITY] * A.[PRICE_PROCESSING] as [CM Invoice Amount]
	  ,a.[Price_Type] [Price Type]


  FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] A
  LEFT JOIN 
  ([DWH].[W_MRP_MD_CONTRACT_F] B
  LEFT JOIN [DWH].[VW_MRP_CONTRACT_TYPE_D] C
  ON B.[CONTRACT_TYPE_CODE] = C.[Contract Type Code])
  ON A.[PO_ID] = B.[PO_ID]

  where A.[DATE_WID] <> 19000101
  and a.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_TRX_TPG_REPORT_YEAR_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_TRX_TPG_REPORT_YEAR_F] AS SELECT 
		a.[TYPE] AS [Type]
		,a.[VALUE] AS [Value]
		,a.[FACTORY_CODE] as [Factory Code]
		,a.[DATE] AS [Date]
		,YEAR(a.[DATE]) AS [Year]
		,a.[TOTAL] AS [Total]
		,a.[TYPE_CONTRACT] AS [Contract Type]
		,case when a.[FACTORY_CODE] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END as [Factory Type]
	FROM [DWH].W_MRP_TRX_TPG_REPORT_YEAR_F AS a LEFT JOIN [DWH].W_MRP_MD_FACTORY_D AS b ON a.[FACTORY_CODE]=B.[FACTORY_CODE]
	WHERE a.[W_DELETE_FLG] = '0' AND YEAR(a.[DATE])<2021

UNION ALL

--GET TRANSACTION FOR QTY SALES INVOICE  
SELECT 
		N'Xuất hàng' AS [Type]
		,CASE	WHEN C.[Contract Type Code] ='HDFOB' THEN 'QTY FOB'
				WHEN C.[Contract Type Code]  IN('HDGCXK','HDGCKHAC','HDDVGC') THEN 'QTY CMPTWEP'
				WHEN C.[Contract Type Code]  IN('HDGCTN','HDGCTNFOB') THEN 'QTY CMPT'
				ELSE 'QTY' END AS [Value] 
		,CASE WHEN case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END='GC' THEN 'GC' ELSE  [Factory Code] END [Factory Code]
		,CAST('01/JAN/'+ STR(YEAR([Invoice Date])) AS DATE)[Date]
		,YEAR([Invoice Date]) AS [Year]
		,sum([Invoice Quantity]) as [Total]
		,case	when C.[Contract Type Code] IN  ('HDGCXK','HDGCKHAC','HDDVGC')  THEN 'HDGCXK'
				when C.[Contract Type Code] IN  ('HDGCTN','HDGCTNFOB')  THEN 'HDGCTN' 
				ELSE [Contract Type Code] END AS 
				 [Contract Type]
		,case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END as [Factory Type]
    
	FROM [DWH].[VW_MRP_SALES_INVOICE_F] as a	LEFT JOIN [DWH].W_MRP_MD_FACTORY_D AS b ON a.[Factory Code]=B.[FACTORY_CODE]
											INNER JOIN [DWH].[VW_MRP_CONTRACT_TYPE_D] AS c ON A.[Contract Type Key]=C.[ContractTypeKey]
	WHERE YEAR([Invoice Date])>=2021
	GROUP BY
		CASE WHEN case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END='GC' THEN 'GC' ELSE  [Factory Code] END
		,YEAR([Invoice Date])
		,[Contract Type Code]
		,case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END

UNION ALL

--GET TRANSACTION FOR AMT SALES INVOICE  
SELECT 
		N'Xuất hàng' AS [Type]
		,CASE	WHEN C.[Contract Type Code] ='HDFOB' THEN 'Amt FOB'
				WHEN C.[Contract Type Code]  IN('HDGCXK','HDGCKHAC','HDDVGC') THEN 'Amt CMPTWEP'
				WHEN C.[Contract Type Code]  IN('HDGCTN','HDGCTNFOB') THEN 'Amt CMPT'
				ELSE 'QTY' END AS [Value] 
		,CASE WHEN case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END='GC' THEN 'GC' ELSE  [Factory Code] END [Factory Code]
		,CAST('01/JAN/'+ STR(YEAR([Invoice Date])) AS DATE)[Date]
		,YEAR([Invoice Date]) AS [Year]
		,sum([FOB/CM Invoice Amount]) as [Total]
		,case	when C.[Contract Type Code] IN  ('HDGCXK','HDGCKHAC','HDDVGC')  THEN 'HDGCXK'
				when C.[Contract Type Code] IN  ('HDGCTN','HDGCTNFOB')  THEN 'HDGCTN' 
				ELSE [Contract Type Code] END AS [Contract Type]
		,case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END as [Factory Type]
    
	FROM [DWH].[VW_MRP_SALES_INVOICE_F] as a LEFT JOIN [DWH].W_MRP_MD_FACTORY_D AS b ON a.[Factory Code]=B.[FACTORY_CODE]
											INNER JOIN [DWH].[VW_MRP_CONTRACT_TYPE_D] AS c ON A.[Contract Type Key]=C.[ContractTypeKey]
	WHERE YEAR([Invoice Date])>=2021 
	GROUP BY
		CASE WHEN case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END='GC' THEN 'GC' ELSE  [Factory Code] END
		,YEAR([Invoice Date]),C.[Contract Type Code]
		,case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END

UNION ALL

--GET TRANSACTION FOR  QTY PRODUCT

SELECT 
		N'Sản xuất' AS [Type]
		,'Qty CM' AS [Value] 
		,CASE WHEN case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END='GC' THEN 'GC' ELSE  A.[Factory Code] END [Factory Code]
		,CAST('01/JAN/'+ STR(YEAR(A.[Production Date])) AS DATE)[Date]
		,YEAR(A.[Production Date]) AS [Year]
		,sum(A.[Production Quantity]) as [Total]
		,'' AS [Contract Type]
		,case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END as [Factory Type]

	FROM [DWH].[VW_MRP_PRODUCTION_F] as a LEFT JOIN [DWH].W_MRP_MD_FACTORY_D AS b ON a.[Factory Code]=B.[FACTORY_CODE]
						
	WHERE YEAR(A.[Production Date])>=2021 and A.[Production Stage Code]='MAY'

	GROUP BY	
		CASE WHEN case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END='GC' THEN 'GC' ELSE  A.[Factory Code] END 
		,YEAR(A.[Production Date]) 
		,case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END 
    
UNION ALL

--GET TRANSACTION FOR  CM AMT PRODUCT

SELECT 
		N'Sản xuất' AS [Type]
		,'Amt CM' AS [Value] 
		,CASE WHEN case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END='GC' THEN 'GC' ELSE  A.[Factory Code] END [Factory Code]
		,CAST('01/JAN/'+ STR(YEAR(A.[Production Date])) AS DATE)[Date]
		,YEAR(A.[Production Date]) AS [Year]
		,sum(A.[CM Production Amount]) as [Total]
		,'' AS [Contract Type]
		,case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END as [Factory Type]

	FROM [DWH].[VW_MRP_PRODUCTION_F] as a LEFT JOIN [DWH].W_MRP_MD_FACTORY_D AS b ON a.[Factory Code]=B.[FACTORY_CODE]
  
	WHERE YEAR(A.[Production Date])>=2021 and A.[Production Stage Code]='MAY'

	GROUP BY	
		CASE WHEN case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END='GC' THEN 'GC' ELSE  A.[Factory Code] END 
		,YEAR(A.[Production Date]) 
		,case when a.[Factory Code] IN('','GC') THEN 'GC' ELSE  b.[FACTORY_TYPE] END;
GO
/****** Object:  View [DWH].[VW_MRP_CONTRACT_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_CONTRACT_F] AS SELECT

	   A.[ROW_WID] [Contract Key]
      ,A.[DATE_WID] [Date Key]
      ,A.[CUSTOMER_WID] [Customer Key]
	  ,T.[ContractTypeKey] [Contract Type Key]
	  ,A.[PO_ID] [PO Id]
      ,A.[CONTRACT_ID] [Contract Id]
      ,A.[CONTRACT_NUMBER] [Contract Number]
      ,A.[START_CONTRACT_DATE] [Start Contract Date]
      ,A.[COMPLETE_CONTRACT_DATE] [Complete Contract Date]
	  ,a.[PRODUCTION_TYPE] [Production Type]
	  ,A.[SOURCE] [Source]
	  ,a.[CONTRACT_TYPE_CODE] [Contract Type Code]
     
FROM [DWH].[W_MRP_MD_CONTRACT_F] A
  LEFT JOIN [DWH].[VW_MRP_CONTRACT_TYPE_D] T
  ON A.[CONTRACT_TYPE_CODE] = T.[Contract Type Code]
  where A.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_MD_PROCESSING_PRICE_D1]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_MD_PROCESSING_PRICE_D1] AS select A.[ITEM_ID],
case when SUM(a.[QUANTITY_PCS]) = 0 then 0 else SUM(a.[QUANTITY_PCS]*B.[PRICE_CM_3_NEW])/SUM(a.[QUANTITY_PCS]) end as [PRICE_CM_3_AVG],
case when SUM(a.[QUANTITY_PCS]) = 0 then 0 else SUM(a.[QUANTITY_PCS]*B.[PRICE_P_3_NEW])/SUM(a.[QUANTITY_PCS])end as [PRICE_P_3_AVG],
case when SUM(a.[QUANTITY_PCS]) = 0 then 0 else SUM(a.[QUANTITY_PCS]*B.[PRICE_T_3_NEW])/SUM(a.[QUANTITY_PCS]) end as[PRICE_T_3_AVG],
case when SUM(a.[QUANTITY_PCS]) = 0 then 0 else SUM(a.[QUANTITY_PCS]*B.[PRICE_W3_NEW])/SUM(a.[QUANTITY_PCS])end as [PRICE_W3_AVG],
case when SUM(a.[QUANTITY_PCS]) = 0 then 0 else SUM(a.[QUANTITY_PCS]*B.[PRICE_E_3_NEW])/SUM(a.[QUANTITY_PCS]) end as[PRICE_E_3_AVG],
case when SUM(a.[QUANTITY_PCS]) = 0 then 0 else SUM(a.[QUANTITY_PCS]*B.[PRICE_IN_3_NEW])/SUM(a.[QUANTITY_PCS]) end as[PRICE_IN_3_AVG],
case when SUM(a.[QUANTITY_PCS]) = 0 then 0 else SUM(a.[QUANTITY_PCS]*B.[PRICE_OTHER_3_NEW])/SUM(a.[QUANTITY_PCS]) end as[PRICE_OTHER_3_AVG],
case when SUM(a.[QUANTITY_PCS]) = 0 then 0 else SUM(a.[QUANTITY_PCS]*(B.[PRICE_CM_3_NEW]+B.[PRICE_P_3_NEW]+B.[PRICE_T_3_NEW]+B.[PRICE_W3_NEW]+B.[PRICE_E_3_NEW]+B.[PRICE_IN_3_NEW]+B.[PRICE_OTHER_3_NEW]))/SUM(a.[QUANTITY_PCS])end as [PRICE_TOTAL_3_AVG]


from [DWH].[W_MRP_TRX_SALES_ORDER_F] a join 

(
SELECT [ROW_WID]
      ,[ITEM_WID]
      ,[ITEM_ID]
      ,[COLOR]
      ,[SIZE]
      ,[PRICE_CM_2]
      ,[PRICE_P_2]
      ,[PRICE_T_2]
      ,[PRICE_W_2]
      ,[PRICE_E_2]
      ,[PRICE_IN_2]
      ,[PRICE_OTHER_2]
      ,[PRICE_TOTAL_2]
      ,CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_CM_2] ELSE [PRICE_CM_3] END [PRICE_CM_3_NEW]
	  ,CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_P_2] ELSE [PRICE_P_3] END [PRICE_P_3_NEW]
	  ,CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_T_2] ELSE [PRICE_T_3] END [PRICE_T_3_NEW]
	  ,CASE WHEN [PRICE_W3] =0 THEN [PRICE_W_2] ELSE [PRICE_W3] END [PRICE_W3_NEW]
	  ,CASE WHEN [PRICE_E_3] =0 THEN [PRICE_E_2] ELSE [PRICE_E_3] END [PRICE_E_3_NEW]
	  ,CASE WHEN [PRICE_IN_3] =0 THEN [PRICE_IN_2] ELSE [PRICE_IN_3] END [PRICE_IN_3_NEW]
	  ,CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_OTHER_2] ELSE [PRICE_OTHER_3] END [PRICE_OTHER_3_NEW]
      ,[CREATED_DATE]
      ,[SOURCE]

  FROM [DWH].[W_MRP_MD_PROCESSING_PRICE_D]
) b on a.[ITEM_ID] = b.[ITEM_ID] AND A.[COLOR_CODE]=B.[COLOR] AND A.[SIZE] = B.[SIZE] where isnull(a.vendor_code,'')='' and a.[PO_SOURCE] ='SX' group by A.[ITEM_ID];
GO
/****** Object:  View [DWH].[VW_MRP_PRODUCTION_PLAN_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PRODUCTION_PLAN_F] AS SELECT 
	C.[DATE_WID] [Date Key]
	,C.[ITEM_WID] [Item Key]
	  -- ,C.[PRODUCTION_DATE_WID] [Production Date Key]
      ,C.[ITEM_ID] [Item ID]
      ,C.[DEPARTMENT_WID] [Production Line Key]
	  ,ISNULL(OD.customer_wid,0) [Customer Key]
	  
      ,F.[ROW_WID] [Factory Key]

	  ,cu.[CUSTOMER_CODE] [Customer Code]
	  ,c.[FACTORY_CODE] [Factory Code]
	  ,c.[LINE] [Department Code]

      ,SUM(C.[PLAN_QUANTITY]) [Plan Quantity]
	  ,SUM(C.[PLAN_QUANTITY] * D.[PRICE_CM_3_AVG]) [Plan Amt (CM)]
	  ,D.[PRICE_CM_3_AVG] [Price CM Plan]
	  ,SUM(C.[PLAN_QUANTITY] * D.[PRICE_P_3_AVG]) [Plan Amt (P)]
	  ,D.[PRICE_P_3_AVG] [Price P Plan]
	  ,SUM(C.[PLAN_QUANTITY] * D.[PRICE_T_3_AVG]) [Plan Amt (T)]
      ,[PRICE_T_3_AVG] [Price T Plan]
	  
	  ,CASE WHEN D.[PRICE_W3_AVG] = 0 THEN 0
	  ELSE SUM(C.[PLAN_QUANTITY])
	  END AS [Plan Qty (W)]
	  ,CASE WHEN D.[PRICE_W3_AVG] = 0 THEN 0
	  ELSE SUM(C.[PLAN_QUANTITY] * D.[PRICE_W3_AVG]) 
	  END AS [Plan Amt (W)]
      ,[PRICE_W3_AVG] [Price W Plan]

	  ,CASE WHEN D.[PRICE_E_3_AVG] = 0 THEN 0
	   ELSE SUM(C.[PLAN_QUANTITY])
	  END AS [Plan Qty (E)]
	  ,CASE WHEN D.[PRICE_E_3_AVG] = 0 THEN 0
	  ELSE SUM(C.[PLAN_QUANTITY] * D.[PRICE_E_3_AVG]) 
	  END AS [Plan Amt (E)]
      ,[PRICE_E_3_AVG] [Price E Plan]


	  ,CASE WHEN D.[PRICE_IN_3_AVG] = 0 THEN 0
	  ELSE SUM(C.[PLAN_QUANTITY])  
	  END AS [Plan Qty (In)]
	  ,CASE WHEN D.[PRICE_IN_3_AVG] = 0 THEN 0
	  ELSE SUM(C.[PLAN_QUANTITY] * D.[PRICE_IN_3_AVG]) 
	  END AS [Plan Amt (In)]
      ,[PRICE_IN_3_AVG] [Price In Plan]


	  ,SUM(C.[PLAN_QUANTITY] * D.[PRICE_OTHER_3_AVG]) [Plan Amt (Other)]
      ,[PRICE_OTHER_3_AVG] [Price Other Plan]
	  ,SUM(C.[PLAN_QUANTITY] * D.[PRICE_Total_3_AVG]) [Plan Amt (Total)]
      ,[PRICE_TOTAL_3_AVG] [Price Total Plan] 
	  ,SUM(C.[PLAN_QUANTITY] * m.[PRICE_FOB] ) [Plan Amt (FOB)]
      ,m.[PRICE_FOB] [FOB Price Plan]

     
  FROM [DWH].[W_MRP_TRX_PRODUCTION_PLAN_F] C
  LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] F
  ON C.[FACTORY_CODE] = F.[FACTORY_CODE]

  left join [DWH].[VW_MRP_MD_PROCESSING_PRICE_D1] D
  on C.[ITEM_ID] = D.[ITEM_ID]
   
  left join (select customer_wid,item_id from [DWH].[W_MRP_TRX_SALES_ORDER_F] group by customer_wid,item_id) OD on C.[ITEM_ID] = OD.[ITEM_ID]
  left join [DWH].[W_MRP_MD_CUSTOMER_D] cu on od.customer_wid = cu.row_wid
  
  LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] M
  ON c.ITEM_WID = M.ROW_WID

  where c.[W_DELETE_FLG] = 0
  GROUP BY C.[DEPARTMENT_WID],C.[DATE_WID],F.[ROW_WID], C.[ITEM_ID], D.[PRICE_CM_3_AVG],D.[PRICE_P_3_AVG]
      ,D.[PRICE_T_3_AVG]
      ,D.[PRICE_W3_AVG]
      ,D.[PRICE_E_3_AVG]
      ,D.[PRICE_IN_3_AVG]
      ,D.[PRICE_OTHER_3_AVG]
      ,D.[PRICE_TOTAL_3_AVG]
      ,m.[PRICE_FOB] ,ISNULL(OD.customer_wid,0),C.[ITEM_WID],cu.[CUSTOMER_CODE],c.[FACTORY_CODE],c.[LINE];
GO
/****** Object:  View [DWH].[VW_HAR_STORE_Dim]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_STORE_Dim] AS with cte as
(
SELECT 
C.[ROW_WID] [Store Key] --Channel Key--
,C.[LOCATION_ID] [Store Code]
,ISNULL(S.[STORENAME],[HARAVAN_STORENAME]) [Store Name]
,S.[SUBCHANNEL] [SubChannel]
,S.[CHANNEL] [Channel]

,G.[GFA_M2] [GFA]
,G.[NUM_OF_STAFF] [Staff Count]

,CASE WHEN L.[WARD] = 'None' THEN REPLACE(L.[WARD], 'None', null)
	ELSE L.[WARD] 
	END AS [Ward]

,CASE WHEN L.[DISTRICT] = 'None' THEN REPLACE(L.[DISTRICT], 'None', null)
	ELSE L.[DISTRICT] 
	END AS [District]

,CASE WHEN L.[CITY] = 'None' THEN REPLACE(L.[CITY], 'None', null)
	ELSE L.[CITY] 
	END AS [City]	

,CASE WHEN L.[PROVINCE] = 'None' THEN REPLACE(L.[PROVINCE], 'None', null)
	ELSE L.[PROVINCE] 
	END AS [Province]

,CASE WHEN L.[COUNTRY_NAME] = 'None' THEN REPLACE(L.[COUNTRY_NAME], 'None', null)
	ELSE L.[COUNTRY_NAME] 
	END AS [Country]
,NULL [Opening Date]
,NULL [Status]


FROM [DWH].[W_HAR_CHANNEL_D] C
LEFT JOIN [DWH].[W_HAR_LOCATIONS_D] L
ON L.[ID] = C.[LOCATION_ID]
LEFT JOIN [DWH].[W_MDK_SUBCHANNEL_MAPPING_D] S
ON TRIM(C.[CHANNEL_NAME]) = TRIM(S.[HARAVAN_STORENAME])
LEFT JOIN [DWH].[W_MDK_STORE_GFA_STAFF_D] G     
ON C.[ROW_WID] = G.[CHANNEL_WID]
)

select 
 [Store Key] 
,[Store Code]
,case when [Store Name] = 'Haravan_Draft_Order' then 'Haravan Draft Order' else [Store Name] end as [Store Name]
,[SubChannel]
,[Channel]
,[GFA]
,[Staff Count]
,[Ward]
,[District]
,[City]	
,[Province]
,[Country]
,[Opening Date]
,[Status]

from cte;
GO
/****** Object:  View [DWH].[VW_HAR_CUSTOMER_Dim]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_CUSTOMER_Dim] AS with cte as

(SELECT
c.[ROW_WID] [Customer Key],
c.[ID] [Customer Code],
c.[LAST_NAME] [Last Name],
c.[FIRST_NAME] [First Name],
Trim(Concat(c.[LAST_NAME],' ',c.[FIRST_NAME])) AS [Customer Full Name],
c.[PHONE] [Phone],
CASE WHEN c.[PHONE] = 'None' THEN 0 ELSE 1 END AS [Phone Flag],
c.[EMAIL] [Email],

CASE WHEN c.[EMAIL] = 'None' THEN 0 
	 when c.[EMAIL] = 'guest@haravan.com' then 2 
ELSE 1 END AS [Email Flag],

CASE WHEN c.[GENDER] = 0 THEN N'Nữ'
	WHEN c.[GENDER] = 1 THEN N'Nam'
	ELSE 'Unisex'
	END AS [Gender],
c.[BIRTHDAY] [Birthday],
NULL [Registered Member Date],
NULL [Scheme],
NULL [Scheme Upgraded Date],
TRIM(a.[Address1]) AS [Address 1],
TRIM(a.[Address2]) AS [Address 2],
CONVERT (CHAR(8),c.[CREATED_AT],112) [Created Date],
c.[STATE] [Marketing Status],
c.[TOTAL_SPENT] [Total Spent],
c.[ORDERS_COUNT] [Total Orders],
c.[LAST_ORDER_DATE] [Last Order Date]

		
FROM [DWH].[W_HAR_CUSTOMERS_D] c
left join [DWH].[W_HAR_ADDRESSES_D] a
on c.[DEFAULT_ADDRESS_ID] = a.[ID]
) 
,  cte2 as
(
select *,

	case when [EMAIL] = 'guest@haravan.com' then 'Guest'
		when [Customer Full Name] like '%KVL%' OR [Customer Full Name] like '%KHVL%' then 'KHVL'
		when [Customer Full Name] like '%KNN%' then 'KNN'
		else 'Unique' 
		end AS [Customer Type]
		
	from cte
	)

	select *,	case when [Customer Type] = 'Unique' then 1 else 0 end as [Unique Flag] 
	, 0 [Customer Key Flag]
	from cte2

UNION


SELECT 
0 [Customer Key],
NULL [Customer Code],
NULL [Last Name],
NULL [First Name],
NULL AS [Customer Full Name],
'None' [Phone],
0 [Phone Flag],
'None' [Email],
0 [Email Flag],

NULL [Gender],
NULL[Birthday],
NULL [Registered Member Date],
NULL [Scheme],
NULL [Scheme Upgraded Date],
NULL AS [Address 1],
NULL AS [Address 2],
NULL [Created Date],
NULL [Marketing Status],
NULL [Total Spent],
NULL [Total Orders],
NULL [Last Order Date],
N'KHVL' AS [Customer Type],
0 [Unique Flag],
1 [Customer Key Flag];
GO
/****** Object:  View [DWH].[VW_HAR_ORDERS_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_ORDERS_F] AS SELECT 
		A.[ROW_WID]
		,[id] [Order id]
      ,[DATE_WID]
	  ,[TIME_WID]
      ,[CUSTOMER_WID]
      ,[CHANNEL_WID] [Store Key]
	  ,[UTM_SOURCE] 
	  ,[UTM_MEDIUM]
	  ,[UTM_CAMPAIGN]
	  ,[UTM_TERM]
	  ,[UTM_CONTENT]
      ,[USER_WID]
      ,[CHANNEL_WID]
	  ,[CANCEL_REASON]
      ,[CANCELLED_AT]
      ,[CANCELLED_STATUS]
	  ,[CREATED_AT]
      ,[CURRENCY]
	  ,[FINANCIAL_STATUS]
      ,[FULFILLMENT_STATUS]
	  ,[CONFIRMED_STATUS] 
	   ,A.[ORDER_NUMBER]
	   ,A.[REF_ORDER_ID]
      ,A.[REF_ORDER_NUMBER]
	  ,[SOURCE_NAME]
	  ,[SUBTOTAL_PRICE]
	  ,[TOTAL_DISCOUNTS]
      ,[TOTAL_LINE_ITEMS_PRICE]
      ,[TOTAL_PRICE]
	  ,B.[PAYMENT_GROUP]
      ,B.[PAYMENT_METHOD]
	  ,A.[SHIPPING_PRICE]
      ,A.[SHIPPING_CODE]
      ,A.[REDEEM_AMOUNT]
      ,A.[REDEEM_DISCOUNT_TYPE]
      ,A.[REDEEM_NAME]
      ,A.[REDEEM_USED_AMOUNT]
	  ,c.[Store Name]
	  ,d.[Customer Type]

FROM [DWH].[W_HAR_ORDERS_F] A
LEFT JOIN [DWH].[W_MDK_PAYMENT_METHOD_MAPPING_D] B
ON TRIM(A.[GATEWAY]) = TRIM(B.[PAYMENT_NAME])
left join [DWH].[VW_HAR_STORE_Dim] C
on a.[CHANNEL_WID] = c.[Store Key]
left join [DWH].[VW_HAR_CUSTOMER_Dim] d on a.[CUSTOMER_WID]   = d.[Customer Key];
GO
/****** Object:  View [DWH].[VW_MPR_MD_EXCHANGE_RATE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MPR_MD_EXCHANGE_RATE_D] AS with cte as (
SELECT [ROW_WID]
      ,[FROMDATE]
      ,[CURRENCY]
      ,[EXCHANGE_RATE]
      ,[CREATED_DATE]
      ,[SOURCE]
	  ,row_number() over(order by [FROMDATE]) rn
  FROM [DWH].[W_MRP_MD_EXCHANGE_RATE_D] where [W_DELETE_FLG] = '0')
  select 
   A.[ROW_WID] 				[Exchange Rate Key] 
  ,A.[FROMDATE]				[From Date]
  ,B.[FROMDATE] 			[To Date]
  ,A.[CURRENCY]				[Currency]
  ,A.[EXCHANGE_RATE]		[Exchange Rate]
  from cte a left join cte b on a.rn = (b.rn - 1);
GO
/****** Object:  View [DWH].[VW_MRP_TGT_SALES_YEAR_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_TGT_SALES_YEAR_F] AS SELECT DISTINCT
		 A.[DATE_WID][Date Key]
      , A.[CUSTOMER_WID] [Customer Key]
      , A.[DEPARTMENT_WID] [Production Line Key]
      , A.[FACTORY_CODE] [Factory Key]
	  ,C.[ContractTypeKey] [ContractTypeKey] 
      , A.[YEAR] [Year]
      , A.[MONTH] [Month]
      , A.[QUANTITY] [Target Quantity]
      , A.[AMOUNT] [Target Amount]
      , A.[SUM_OF_QUANTITY] [FY Target Quantity]
      , A.[SUM_OF_AMOUNT] [FY Target Amount]
	  ,R.[Exchange Rate] [Exchange Rate]
     
   
  FROM [DWH].[W_MRP_TGT_SALES_YEAR_F] A

  LEFT JOIN 
  ([DWH].[W_MRP_MD_CONTRACT_F] B
  LEFT JOIN [DWH].[VW_MRP_CONTRACT_TYPE_D] C
  ON B.[CONTRACT_TYPE_CODE] = C.[Contract Type Code])
  ON A.[CONTRACT_TYPE] = B.[CONTRACT_TYPE_CODE]

  LEFT JOIN [DWH].[VW_MPR_MD_EXCHANGE_RATE_D] R ON
A.[DATE_WID] >= FORMAT(R.[FROM DATE],'yyyyMMdd')
AND (R.[TO DATE] IS NULL OR A.[DATE_WID] < FORMAT(R.[TO DATE],'yyyyMMdd'))
where a.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_HAR_ORDERS_LINE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_ORDERS_LINE_F] AS with cte as
(SELECT 
		 a.[ORDER_WID]
		
      ,a.[VARIANT_WID]
      ,a.[PROMOTION_WID]
	  ,a.[ID] [Line ID]
      ,a.[APPLIED_DISCOUNTS]
      ,a.[BARCODE]
      ,a.[FULFILLABLE_QUANTITY]
      ,a.[FULFILLMENT_SERVICE]
      ,a.[FULFILLMENT_STATUS]
      ,a.[GIFT_CARD]
      ,a.[GRAMS]
      ,a.[MA_COST_AMOUNT]
      ,a.[NAME]
      ,a.[NOT_ALLOW_PROMOTION]
      ,a.[ORDER_ID]
      ,a.[PRICE]
      ,a.[PRICE_ORIGINAL]
      ,a.[PRICE_PROMOTION]
      ,a.[PRODUCT_EXISTS]
      ,a.[PRODUCT_ID]
      ,a.[PROMOTION_ID]
      ,a.[QUANTITY]
      ,a.[RETURN_QUANTITY] 
      ,a.[REQUIRES_SHIPPING]
      ,a.[SKU]
      ,a.[TAXABLE]
      ,a.[TITLE]
      ,a.[TOTAL_DISCOUNT]
      ,a.[TYPE]
      ,a.[VARIANT_ID]
      ,a.[VARIANT_TITLE]
      ,a.[VENDOR]
	  ,case when a.[ORDER_ID] = 1167607955 then 0 else a.[DISCOUNT_FLAG] end as [DISCOUNT_FLAG]
	  ,a.DISCOUNT_WID
	  ,case when a.[ORDER_ID] = 1167607955 THEN ((A.[PRICE] * A.[QUANTITY])/ B.[SUBTOTAL_PRICE]) * b.[Total_discounts] 
	   WHEN B.[SUBTOTAL_PRICE] = 0 then 0
	  when c.[Order Discount Flag] = 0 then ((A.[PRICE] * A.[QUANTITY])/ B.[SUBTOTAL_PRICE]) * b.[Total_discounts] 
	  when  (sum(A.[PRICE] * A.[QUANTITY]*A.DISCOUNT_FLAG) over (partition by A.[ORDER_ID])) = 0 THEN 0
		ELSE 
		(A.[PRICE] * A.[QUANTITY]*A.DISCOUNT_FLAG) * (B.[TOTAL_DISCOUNTS]* A.DISCOUNT_FLAG / (sum(A.[PRICE] * A.[QUANTITY]*A.DISCOUNT_FLAG) over (partition by A.[ORDER_ID])))
		END AS [Discount Amount]


		,(A.[PRICE_ORIGINAL] - A.[PRICE]) * A.[QUANTITY] AS [Promotion Amount]
		,A.[PRICE] * A.[QUANTITY] AS [Line Amount]
		,CASE WHEN B.[SUBTOTAL_PRICE] = 0 THEN 0
		ELSE 
		(A.[PRICE] * A.[QUANTITY]) * (B.[REDEEM_USED_AMOUNT] / B.[SUBTOTAL_PRICE]) 
		END AS [Redeem Used Amount]
		/*
		,CASE WHEN B.[SUBTOTAL_PRICE] = 0 THEN 0
		ELSE 
		(A.[PRICE] * A.[QUANTITY]) * (B.[SHIPPING_PRICE] / B.[SUBTOTAL_PRICE]) 
		END AS  [Shipping Price]
		
		--,b.[date key]
		*/
FROM [DWH].[W_HAR_ORDERS_LINE_F] a
LEFT JOIN [DWH].[VW_HAR_ORDERS_F] B 
		ON A.[ORDER_WID] = B.[ROW_WID]
LEft join 
		(select [order_wid],
		SUM(cast ([DISCOUNT_FLAG] as integer) ) [Order Discount Flag]
		from [DWH].[W_HAR_ORDERS_LINE_F]
		group by [order_wid]) c
		on a.[order_wid] = c.[order_wid]



	)

select *, 
	[Line Amount] - [Discount Amount] - [Redeem Used Amount] as [Net Line Amount]

	
	from cte;
GO
/****** Object:  View [DWH].[VW_HAR_PAYMENT_Dim]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_PAYMENT_Dim] AS SELECT 
	ROW_NUMBER() OVER (ORDER BY A.[PAYMENT_METHOD]) [Payment Key]
	,A.[PAYMENT_METHOD] AS [Payment Method] 
	,A.[PAYMENT_GROUP] [Payment Group]

FROM
(SELECT DISTINCT ISNULL(trim([PAYMENT_METHOD]), 'Other') [PAYMENT_METHOD] ,
		
		isnull(TRIM([PAYMENT_GROUP]), 'Other')  [PAYMENT_GROUP] 
		FROM [DWH].[VW_HAR_ORDERS_F]) A;
GO
/****** Object:  View [DWH].[VW_MDK_AMAZON_US_SALE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MDK_AMAZON_US_SALE_F]
AS SELECT 
	ROW_NUMBER() OVER (ORDER BY [W_INTEGRATION_ID]) [Line ID]
	,[DATE_WID]
      ,[CHANNEL_WID]
      ,[VARIANT_WID]
      ,[STORE_CODE]
      ,[STORE_NAME]
      ,[POSTED_DATE]
      ,[PERIOD]
      ,[ORDER_ID]
      ,[SKU_AMZ]
      ,[SKU_MDK]
      ,[AMT]
      ,[QTY]
      ,[POS_HRV]
      ,[REFUND_QTY]
      ,[REFUND_AMT]
      ,[ACT_QTY]
      ,[ACT_AMOUNT]

FROM [DWH].[W_MDK_AMAZON_SALE_F];
GO
/****** Object:  View [DWH].[VW_HAR_SHIPPING_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_SHIPPING_D] AS SELECT 
	ROW_NUMBER() OVER (ORDER BY A.[Order_WID]) [Shipping Key]
	,A.[Order_WID]
	,[Order Id]
	,[DATE_WID]
      ,[TIME_WID]
      ,[CUSTOMER_WID]
	  ,[Customer Type]
      ,[Store Key]
      ,[UTM_SOURCE]
      ,[UTM_MEDIUM]
      ,[UTM_CAMPAIGN]
      ,[UTM_TERM]
      ,[UTM_CONTENT]
      ,[USER_WID]
      ,[CHANNEL_WID]
      ,[CANCEL_REASON]
      ,[CANCELLED_AT]
      ,[CANCELLED_STATUS]
      ,[CREATED_AT]
      ,[CURRENCY]
      ,[FINANCIAL_STATUS]
      ,[FULFILLMENT_STATUS]
      ,[CONFIRMED_STATUS]
      ,[ORDER_NUMBER]
      ,[REF_ORDER_ID]
      ,[REF_ORDER_NUMBER]
      ,[SOURCE_NAME]
      
      ,[PAYMENT_GROUP]
      ,[PAYMENT_METHOD]
     
      ,[SHIPPING_CODE]
     
      ,[REDEEM_DISCOUNT_TYPE]
      ,[REDEEM_NAME]
	,A.[SHIPPING_PRICE] [Shipping Amount]
	

FROM
(SELECT [row_wid] [Order_WID]
,[order id]
 ,[DATE_WID]
      ,[TIME_WID]
      ,[CUSTOMER_WID]
	  ,[Customer Type]
      ,[Store Key]
      ,[UTM_SOURCE]
      ,[UTM_MEDIUM]
      ,[UTM_CAMPAIGN]
      ,[UTM_TERM]
      ,[UTM_CONTENT]
      ,[USER_WID]
      ,[CHANNEL_WID]
      ,[CANCEL_REASON]
      ,[CANCELLED_AT]
      ,[CANCELLED_STATUS]
      ,[CREATED_AT]
      ,[CURRENCY]
      ,[FINANCIAL_STATUS]
      ,[FULFILLMENT_STATUS]
      ,[CONFIRMED_STATUS]
      ,[ORDER_NUMBER]
      ,[REF_ORDER_ID]
      ,[REF_ORDER_NUMBER]
      ,[SOURCE_NAME]
      
      ,[PAYMENT_GROUP]
      ,[PAYMENT_METHOD]
      ,[SHIPPING_PRICE]
      ,[SHIPPING_CODE]
     
      ,[REDEEM_DISCOUNT_TYPE]
      ,[REDEEM_NAME]
      
   
	
	
		FROM [DWH].[VW_HAR_ORDERS_F] where 
	[SHIPPING_PRICE] > 0 ) A;
GO
/****** Object:  View [DWH].[VW_HAR_SALES_Fact]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_SALES_Fact] AS WITH CTE AS 
(SELECT 
	   [ORDER_WID],
	
	  ABS(SUM(CASE WHEN [RETURN_QUANTITY] = 0 THEN 0
		ELSE [RETURN_QUANTITY] * [PRICE]
		END )) AS [Total Order Return],
	SUM([Net Line Amount]) [Subtotal]

	FROM [DWH].[vW_HAR_ORDERS_LINE_F]  GROUP BY [ORDER_WID]) 


SELECT 

	 isnull(B.DATE_WID,0) [Date Key],
	ISNULL(B.TIME_WID,0) [Time Key],
	ISNULL(B.[CUSTOMER_WID],0) [Customer Key],
	b.[Customer Type],
	case when b.[Customer Type] = 'Unique' then 1 else 0 end as [Unique Flag],
	B.[Store Key] [Store Key],

	-- ISNULL(B.[USER_WID],0) [User Key], --

	ISNULL(A.[VARIANT_WID],0) [Product Key],
	ISNULL(A.[PROMOTION_WID],0) [Promotion Key],
	ISNULL(A.[DISCOUNT_WID],0) [Discount Key],
	ISNULL(P.[PAYMENT KEY],0) [Payment Key],
	A.[Line ID] [Line ID],

	CAST(B.[ORDER_NUMBER] AS VARCHAR(10)) AS [Bill Number],
	B.[REF_ORDER_NUMBER] [Ref Bill Number],
	A.[ORDER_ID] [Order ID],
	B.[REF_ORDER_ID] [Ref Order Id],
	A.[SKU] [SKU],
	--	A.[VARIANT_TITLE] [Variant Title], --

	A.[PRICE] [Unit Price],
	CASE WHEN A.[PRICE] < 100000 THEN '< 100k'
		WHEN A.[PRICE] >= 100000 AND  A.[PRICE] < 150000 THEN '100k - 150k'
		WHEN A.[PRICE] >= 150000 AND  A.[PRICE] < 200000 THEN '150k - 200k'
		WHEN A.[PRICE] >= 200000 AND  A.[PRICE] < 250000 THEN '200k - 250k'
		WHEN A.[PRICE] >= 250000 AND  A.[PRICE] < 300000 THEN '250k - 300k'
		WHEN A.[PRICE] >= 300000 AND  A.[PRICE] < 350000 THEN '300k - 350k'
		WHEN A.[PRICE] >= 350000 AND  A.[PRICE] < 400000 THEN '350k - 400k'
		ELSE '> 400K' 
		END AS [Price Range],

	CASE WHEN A.[PRICE] < 100000 THEN 1
		WHEN A.[PRICE] >= 100000 AND  A.[PRICE] < 150000 THEN 2
		WHEN A.[PRICE] >= 150000 AND  A.[PRICE] < 200000 THEN 3
		WHEN A.[PRICE] >= 200000 AND  A.[PRICE] < 250000 THEN 4
		WHEN A.[PRICE] >= 250000 AND  A.[PRICE] < 300000 THEN 5
		WHEN A.[PRICE] >= 300000 AND  A.[PRICE] < 350000 THEN 6
		WHEN A.[PRICE] >= 350000 AND  A.[PRICE] < 400000 THEN 7
		ELSE 8
		END AS [Price Range No],

	A.[PRICE_ORIGINAL] [Price Original],
	A.[QUANTITY] [Quantity],
	a.[Line Amount],
	

	a.[Net Line Amount] as [Net Amount],

	
	a.[Promotion Amount],

	/* 
	CASE WHEN B.[SUBTOTAL_PRICE] = 0 THEN 0
	ELSE 
	B.[TOTAL_DISCOUNTS] / B.[SUBTOTAL_PRICE] END AS [Order Discount %] ,  
	*/

	a.[Discount Amount],

	
	/* 
	CASE WHEN B.[SUBTOTAL_PRICE] = 0 THEN 0
	ELSE 
	ISNULL(C.[Amount],0) / B.[SUBTOTAL_PRICE] END AS [Paid Ratio],
	 */

	CASE when A.[Line ID] = 1201403051 then  58258.5069 
		when A.[Line ID] = 1201403052 then  209933.1516 
		when A.[Line ID] = 1201403053 then   77808.3415 --Bill #182501
		
		when A.[Line ID] = 1202900604 then 75297.3185
		when A.[Line ID] = 1202896215 then 34959.5135
		when A.[Line ID] = 1202900851 then 38887.5488
		when A.[Line ID] = 1202901036 then 58527.7249
		when A.[Line ID] = 1202904253 then 151547.7676
		when A.[Line ID] = 1202902012 then 151547.7676
		when A.[Line ID] = 1202901782 then  129232.3591  -- Bill #182774


		when A.[Line ID] = 1199376851 then 27109.2627
		when A.[Line ID] = 1199376390 then 80271.5825
		when A.[Line ID] = 1199376223 then 59656.0251
		when A.[Line ID] = 1199376555 then 130187.0504
		when A.[Line ID] = 1199375544 then 44830.036
		when A.[Line ID] = 1199375282 then 5459.2326
		when A.[Line ID] = 1199375162 then 5459.2326
		when A.[Line ID] = 1199375448 then  53027.5781  -- Bill #181648

		when A.[Line ID] = 1201244488 then 11733.7043
		when A.[Line ID] = 1201244487 then 11733.7043
		when A.[Line ID] = 1201244489 then 34532.5914 -- Bill #182384

		WHEN ISNULL(C.[Paid Amount],0) = 0 then 0
		
		when cte.[Subtotal] = 0 THEN 0
		when a.[Net Line Amount] < 0 then null
		ELSE 
		(C.[Paid Amount] - b.[SHIPPING_PRICE]) / cte.[Subtotal]  * a.[Net Line Amount]  
		END AS [Paid Amount],
	

	/*
	CASE WHEN  B.[SUBTOTAL_PRICE] = 0 THEN 0
		ELSE 
		(ISNULL(C.[Paid Amount],0) / cte.[Subtotal] ) * a.[Net Line Amount]
		END AS [Paid Amount],
	*/

	A.[RETURN_QUANTITY] [Return Quantity],

	 -- A.[RETURN_QUANTITY] * A.[PRICE]  AS [Line Return Anmount],

	CASE WHEN CTE.[Total Order Return] = 0 THEN 0
		WHEN A.[PRICE] * A.[RETURN_QUANTITY] = 0 THEN 0
		ELSE 
		(ISNULL(R.[Actual Return Amount],0) / CTE.[Total Order Return]) * (A.[PRICE] * A.[RETURN_QUANTITY])
		
		END AS [Return Amount],


    -- R.[Actual Return Amount] [Actual Return Amount],
	-- CTE.[Total Order Return],
	B.[CANCELLED_STATUS] [Cancelled Status],
	
	B.[FINANCIAL_STATUS] [Financial Status],
	B.[CONFIRMED_STATUS] [Confirmed Status]
		-- a.[Shipping Price]
      ,B.[SHIPPING_CODE] [Shipping Code]
      
      ,B.[REDEEM_DISCOUNT_TYPE] [Redeem Type]
      ,B.[REDEEM_NAME] [Redeem Name]
      ,a.[Redeem Used Amount]


	,B.[SOURCE_NAME] [Source Name]
	,B.[UTM_SOURCE] [UTM Source]
	,B.[UTM_MEDIUM] [UTM Medium]
	,B.[UTM_CAMPAIGN] [UTM Campaign]
	,B.[UTM_TERM] [UTM Term] 
	  ,B.[UTM_CONTENT] [UTM Content]
	  ,0 [Shipping Flag]
	
  FROM [DWH].[VW_HAR_ORDERS_LINE_F] A
	LEFT JOIN [DWH].[VW_HAR_ORDERS_F] B 
		ON A.[ORDER_WID] = B.[ROW_WID]

		--Paid Amt--
	LEFT JOIN 
	(SELECT 
	   [ORDER_WID]
      ,SUM([AMOUNT]) AS [Paid Amount]
	   , [Kind]
	FROM [DWH].[W_HAR_ORDERS_TRANSACTIONS_F] WHERE [Kind] = 'capture' GROUP BY [ORDER_WID] , [Kind]) C
	ON A.[ORDER_WID] = C.[ORDER_WID]

	
	--Return Amt--
	LEFT JOIN 
	(SELECT 
	   [ORDER_WID]
      ,ABS(SUM([AMOUNT]))  [Actual Return Amount]
	  , [Kind]

	FROM [DWH].[W_HAR_ORDERS_TRANSACTIONS_F] WHERE [Kind] = 'refund' GROUP BY [ORDER_WID], [Kind]) R
	ON A.[ORDER_WID] = R.[ORDER_WID]

	

	LEFT JOIN [DWH].[W_HAR_ORDERS_DISCOUNT_F] DC 
		ON A.[ORDER_WID] = DC.[ORDER_WID]
	LEFT JOIN [DWH].[VW_HAR_PAYMENT_Dim] P 
		ON B.[Payment_Method] = P.[Payment Method]
	LEFT JOIN CTE ON A.[ORDER_WID] = CTE.[ORDER_WID]

	where B.[Store Name] <> N'Kho bán Amazon' and B.[Store Name] <> N'Haravan Draft Order'

	
	 union 

select 
	a.[DATE_WID] [Date Key],
	a.[TIME_WID] [Time Key],
	a.[CUSTOMER_WID] [Customer Key],
	a.[Customer Type],
	case when a.[Customer Type] = 'Unique' then 1 else 0 end as [Unique Flag],
	a.[Store Key] [Store Key],

	null [Product Key],
	0 [Promotion Key],
	0 [Discount Key],
	p.[Payment Key],
	A.[Shipping Key] [Line ID],

	CAST(a.[ORDER_NUMBER] AS VARCHAR(10)) AS [Bill Number],
	a.[REF_ORDER_NUMBER] [Ref Bill Number],
	a.[ORDER ID] [Order ID],
	a.[REF_ORDER_ID] [Ref Order Id],
	null [SKU],
	--	A.[VARIANT_TITLE] [Variant Title], --

	0 [Unit Price],
	'Other' [Price Range],

	9 [Price Range No],

	0 [Price Original],
	0 [Quantity],
	a.[Shipping Amount] [Line Amount],
	

	0 [Net Amount],	
	0 [Promotion Amount],

	0 [Discount Amount],

	case when isnull(c.[Paid amount],0) = 0 then 0 
		when a.[FINANCIAL_STATUS] = 'paid' and SUM(b.[Net Line Amount])  over (partition by b.[ORDER_WID])  >= 0 then a.[Shipping Amount]
		when a.[FINANCIAL_STATUS] = 'paid' and SUM(b.[Net Line Amount])  over (partition by b.[ORDER_WID]) < 0 then c.[Paid Amount]
		
		else a.[Shipping Amount] end as [Paid Amount],

	0 [Return Quantity],
	0 [Return Amount],
	a.[CANCELLED_STATUS] [Cancelled Status],
	
	a.[FINANCIAL_STATUS] [Financial Status],
	a.[CONFIRMED_STATUS] [Confirmed Status]
	-- a.[Shipping Price]
      ,a.[SHIPPING_CODE] [Shipping Code]
      
      ,a.[REDEEM_DISCOUNT_TYPE] [Redeem Type]
      ,a.[REDEEM_NAME] [Redeem Name]
      ,0 [Redeem Used Amount]


	,a.[SOURCE_NAME] [Source Name]
	,a.[UTM_SOURCE] [UTM Source]
	,a.[UTM_MEDIUM] [UTM Medium]
	,a.[UTM_CAMPAIGN] [UTM Campaign]
	,a.[UTM_TERM] [UTM Term] 
	  ,a.[UTM_CONTENT] [UTM Content]
	  ,1 [Shipping Flag]
	

from 

 [DWH].[VW_HAR_SHIPPING_D]  a 
 LEFT JOIN [DWH].[VW_HAR_PAYMENT_Dim] P 
		ON a.[Payment_Method] = P.[Payment Method]

LEFT JOIN 
	(SELECT 
	   [ORDER_WID]
      ,SUM([AMOUNT]) AS [Paid Amount]
	   , [Kind]
	FROM [DWH].[W_HAR_ORDERS_TRANSACTIONS_F] WHERE [Kind] = 'capture' GROUP BY [ORDER_WID] , [Kind]) C
	ON A.[ORDER_WID] = C.[ORDER_WID]

left join [DWH].[VW_HAR_ORDERS_LINE_F] b
	on A.[ORDER_WID] = b.[ORDER_WID]
left join [DWH].[VW_HAR_STORE_Dim] S
	on a.[Store Key] = S.[Store Key]

where s.[Store Name] <> N'Kho bán Amazon' and s.[Store Name] <> N'Haravan Draft Order'




UNION



SELECT
	
	ISNULL(A.DATE_WID,0) [Date Key],
	0 [Time Key],
	0 [Customer Key],
	'KHVL' [Customer Type],
	0 [Unique Flag],
	B.[Store Key] [Store Key],
	0 [Product Key],
	0 [Promotion Key],
	0 [Discount Key],
	0 [Payment Key],
	0 [Line ID],
	NULL [Bill Number],
	NULL [Ref Bill Number],
	NULL [Order ID],
	0 [Ref Order Id],
	NULL [SKU],
--	A.[VARIANT_TITLE] [Variant Title], --

	0 [Unit Price],
	NULL [Price Range],
	NULL [Price Range No],
	0 [Price Original],
	A.[QUANTITY] [Quantity],
	0 [Line Amount],
	 A.[AMOUNT] AS [Net Amount],
	0 AS [Promotion Amount],
	0 AS [Discount Amount],
	A.[AMOUNT] AS [Paid Amount],

	0 [Return Quantity],
    0 [Return Amount],
	NULL [Cancelled Status],
	NULL [Confirmed Status],
	NULL [Financial Status]

	--0 [Shipping Price]
      ,null [Shipping Code]
     
      ,null [Redeem Type]
      ,null [Redeem Name]
      ,0 [Redeem Used Amount]
	
	,'Excel Co.op Xtra' AS [Source Name]
	,NULL [UTM Source]
	,NULL [UTM Medium]
	,NULL [UTM Campaign]
	,NULL  [UTM Term] 
	,NULL [UTM Content]
	,0 [Shipping Flag]
  

	  FROM [DWH].[W_MDK_COOP_SALE_F] A
	  LEFT JOIN [DWH].[VW_HAR_STORE_Dim] B
	  ON A.[STORE_CODE] = B.[Store Code]


UNION

	SELECT
	
	ISNULL(A.DATE_WID,0) [Date Key],
	0 [Time Key],
	0 [Customer Key],
	'Amazon' [Customer Type],
	0 [Unique Flag],
	B.[Store Key] [Store Key],
	A.[VARIANT_WID] [Product Key],
	0 [Promotion Key],
	0 [Discount Key],
	0 [Payment Key],
	A.[Line ID] [Line ID],
	[ORDER_ID] [Bill Number],
	NULL [Ref Bill Number],
	NULL [Order ID],
	0 [Ref Order Id],
	[SKU_MDK] [SKU],
--	A.[VARIANT_TITLE] [Variant Title], --

	(A.[AMT] * 23000 /A.[QTY]) [Unit Price],
	CASE WHEN (A.[AMT] * 23000 /A.[QTY]) < 100000 THEN '< 100k'
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 100000 AND  (A.[AMT] * 23000 /A.[QTY]) < 150000 THEN '100k - 150k'
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 150000 AND  (A.[AMT] * 23000 /A.[QTY]) < 200000 THEN '150k - 200k'
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 200000 AND  (A.[AMT] * 23000 /A.[QTY]) < 250000 THEN '200k - 250k'
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 250000 AND  (A.[AMT] * 23000 /A.[QTY]) < 300000 THEN '250k - 300k'
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 300000 AND  (A.[AMT] * 23000 /A.[QTY]) < 350000 THEN '300k - 350k'
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 350000 AND  (A.[AMT] * 23000 /A.[QTY]) < 400000 THEN '350k - 400k'
		ELSE '> 400K' 
		END AS [Price Range],
	CASE WHEN (A.[AMT] * 23000 /A.[QTY]) < 100000 THEN 1
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 100000 AND  (A.[AMT] * 23000 /A.[QTY]) < 150000 THEN 2
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 150000 AND  (A.[AMT] * 23000 /A.[QTY]) < 200000 THEN 3
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 200000 AND  (A.[AMT] * 23000 /A.[QTY]) < 250000 THEN 4
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 250000 AND  (A.[AMT] * 23000 /A.[QTY]) < 300000 THEN 5
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 300000 AND  (A.[AMT] * 23000 /A.[QTY]) < 350000 THEN 6
		WHEN (A.[AMT] * 23000 /A.[QTY]) >= 350000 AND  (A.[AMT] * 23000 /A.[QTY]) < 400000 THEN 7
		ELSE 8
		END AS [Price Range No],
	0 [Price Original],
	A.[QTY] [Quantity],
	(A.[AMT] * 23000) AS [Line Amount],
	(A.[ACT_AMOUNT] * 23000) [Net Amount],
	0 AS [Promotion Amount],
	0 AS [Discount Amount],
	(A.[ACT_AMOUNT] * 23000) AS [Paid Amount],
	
	A.[REFUND_QTY] [Return Quantity],
    (A.[REFUND_AMT] * 23000) [Return Amount],
	NULL [Cancelled Status],
	NULL [Confirmed Status],
	NULL [Financial Status]

	--0 [Shipping Price]
      ,null [Shipping Code]
    
      ,null [Redeem Type]
      ,null [Redeem Name]
      ,0 [Redeem Used Amount]
	
	,'Excel Amazon US' AS [Source Name]
	,NULL [UTM Source]
	,NULL [UTM Medium]
	,NULL [UTM Campaign]
	,NULL  [UTM Term] 
	,NULL [UTM Content]
	,0 [Shipping Flag]
	
   

	  FROM [DWH].[VW_MDK_AMAZON_US_SALE_F] A
	  LEFT JOIN [DWH].[VW_HAR_STORE_Dim] B
	  ON A.[CHANNEL_WID] = B.[Store Key];
GO
/****** Object:  View [DWH].[VW_CALENDAR_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_CALENDAR_D] AS WITH 
CTE AS(
SELECT DATE_WID,CONVERT(DATE,CAST(DATE_WID AS VARCHAR(8))) Day FROM [DWH].[W_CALENDAR_D]
),
W_CALENDAR_1 AS (
		select 
			DATE_WID [Date Key],
			Day AS [Date],
			cast(DATEPART(DD, Day) as varchar) +'-'+FORMAT(Day, 'MMM') AS [Day of Month],
			--DATEPART(week, Day) AS [Week No],
			CASE datepart(dy,Day)
				WHEN 1 THEN DATEPART(week, Day)
				ELSE DATEPART(week, DATEADD(DD,-1,Day)) END AS [Week No],
			(DATEPART(dd, Day) - 1)/7 + 1 AS [Week No by Month],
			(DATEPART(DY, Day)-1)/7 + 1 AS [Week No by Year],
			DATEPART(MM, Day) AS Month,
			CONCAT(FORMAT(Day, 'MMM'),'-',right(DATEPART(YEAR, Day),2)) AS [Month-Year],
			FORMAT(Day, 'yyyyMM') AS [Year Month No],
			
		
			CASE WHEN  EOMONTH(DATEADD(hh,7,getdate())) = EOMONTH(Day)  THEN 'Current'
				ELSE FORMAT(Day, 'MMM') END AS [Month - Slicer],
			
			FORMAT(Day, 'MMM') AS [Month Name],
			DATEPART(QQ, Day) AS Quarter,
			CASE DATEPART(QQ, Day)
						WHEN 1 THEN 'FIRST'
						WHEN 2 THEN 'SECOND'
						WHEN 3 THEN 'THIRD'
						WHEN 4 THEN 'FOURTH'
						END  AS [Quarter Name],
			DATEPART(YEAR, Day) AS Year,
			DATEPART(DW, Day) AS [Day of Week],
			DATENAME(DW, Day) AS [Day Name],
			DATEADD(YY, -1 , Day) AS [Day of Last Year],
			cast(DATEADD(MONTH, DATEDIFF(MONTH, -1, [Day])-1, -1) as Date) AS [Last Day of Last Month],
			--isnull([DWH].[get_Day_Of_Last_Nth_Month](1,Day),cast(DATEADD(MONTH, DATEDIFF(MONTH, -1, [Day])-1, -1) as Date)) AS  [Day of last month bk],
			--[DWH].[get_Day_Of_Last_Nth_Month](2,Day) AS  [Day of last 2nd month],
			--[DWH].[get_Day_Of_Last_Nth_Month](3,Day) AS  [Day of last 3rd month],
			--[DWH].[get_Day_Of_Last_Nth_Month](6,Day) AS  [Day of last 6th month],
			cast(DATEADD(mm, -1, Day) as date) AS [Day of last month],
			cast(DATEADD(mm, -2, Day) as date) AS [Day of last 2nd month],
			cast(DATEADD(mm, -3, Day) as date) AS [Day of last 3rd month],
			cast(DATEADD(mm, -6, Day) as date) AS [Day of last 6th month],
			cast(DATEADD(month, DATEDIFF(month, 0, DATEADD(mm, -3, Day)), 0) as date) as [1st day of last 3rd month],
			cast(DATEADD(month, DATEDIFF(month, 0, DATEADD(mm, -6, Day)), 0) as date) as [1st day of last 6th month],
			DATENAME(DW, DATEADD(MM, -1 , Day)) AS [Name Day of Last Month],
			DATENAME(DW, DATEADD(QQ, -1 , Day)) AS [Name Day of Last Quarter],
			DATENAME(DW, DATEADD(YY, -1 , Day)) AS [Name Day of Last Year],
			CONVERT(DATE, CONVERT(DATE, DATEADD(DD, - (DATEPART(DD, 
					Day) - 1), Day))) AS [First Day of Month],
			CONVERT(DATE, '01/01/' + CONVERT(VARCHAR, DATEPART(YY, 
					Day))) AS [First Day of Year],
			EOMONTH(Day) AS [Last Day of Month],
			CONVERT(DATE, '12/31/' + CONVERT(VARCHAR, DATEPART(YY, 
					Day))) AS [Last Day of Year],
			case when year(DATEADD(hh,7,getdate()))> DATEPART(YEAR, Day) then 'Historical'
			when year(DATEADD(hh,7,getdate()))= DATEPART(YEAR, Day)  then 'Current'
			else 'Future'
			end  as [Period Type],
			case when year(DATEADD(hh,7,getdate()))> DATEPART(YEAR, Day) then 1
				when year(DATEADD(hh,7,getdate()))= DATEPART(YEAR, Day) then 2
				else 3
			end  as [Period Type Order],
			case when convert(int,convert(char(8),DATEADD(hh,7,getdate()),112)) > DATE_WID then 'Y'
			else 'N'
			end [Closing Flag],
				case 
				when convert(int,convert(char(8),DATEADD(hh,7,getdate()),112))-1 > DATE_WID then 'Historical'
				when convert(int,convert(char(8),DATEADD(hh,7,getdate()),112))-1 = DATE_WID then 'Current'
			else 'Future'
			end [Date Type]
		FROM CTE
		)
SELECT aa.*,DATEPART(DD, [Date]) [Day Of Month2],format(aa.[date],'ddd-dd') [Day2],format(aa.[date],'dd')+'-'+cast([Day of Week] as varchar(1))+'-'+cast([Week No by Month] as varchar(1))  [Day Order],
	MIN([Date]) OVER (PARTITION BY Year,[Week No]) AS [First Day of Week],
	MIN([Date]) OVER (PARTITION BY Year,[Week No by Month]) AS [First Day of Week by Month],
	MIN([Date]) OVER (PARTITION BY Year,[Week No by Year]) AS [First Day of Week by Year],
	MAX([Date]) OVER (PARTITION BY Year,[Week No]) AS [Last Day of Week],
	MAX([Date]) OVER (PARTITION BY Year,[Week No by Month]) AS [Last Day of Week by Month],
	MAX([Date]) OVER (PARTITION BY Year,[Week No by Year]) AS [Last Day of Week by Year],
	DAY(EOMONTH([Date])) [Total Days of Month],
	cast(DATEPART(DD, [Date]) as float)/cast(DAY(EOMONTH([Date]))as float) [Time gone],
	'W' + cast([Week No by Month] as varchar(10)) AS [Week by Month]
FROM W_CALENDAR_1 aa;
GO
/****** Object:  View [DWH].[VW_CALENDAR_Dim]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_CALENDAR_Dim] AS SELECT C.[Date Key]
      ,C.[Date]
      ,C.[Day of Month2] [Day of Month]
      ,'W' + cast (C.[Week No by Month]as varchar(5)) AS [Week of Month]
      ,C.[Month] [Month No]
      ,C.[Month-Year] 
	  ,C.[Year Month No]
      ,C.[Month Name] [Month]
	  ,c.[Month - Slicer]
      ,C.[Quarter] [Quarter No]
	  ,'Q' + cast (C.[Quarter] as varchar(5)) AS [Quarter]
      ,C.[Year]
      ,CASE WHEN C.[Day of Week] = 1 THEN 7
			WHEN C.[Day of Week] = 2 THEN 1
			WHEN C.[Day of Week] = 3 THEN 2
			WHEN C.[Day of Week] = 4 THEN 3
			WHEN C.[Day of Week] = 5 THEN 4
			WHEN C.[Day of Week] = 6 THEN 5
			ELSE 6 
			END AS [Day of Week No]
      ,substring(C.[Day Name],1,3) [Day of Week]
	  ,C.[Last Day of Last Month]
	  --, format(C.[Last Day of Last Month], 'yyyyMMdd') as [Last Day of Last Month Char]
	  ,C.[Closing Flag] [Is Closed]
	  ,CASE WHEN D.[IS_WORKING_DAY] = 'Y' THEN 1
			WHEN D.[IS_WORKING_DAY] = 'N' THEN 0
			END AS [Is Working Day]
	,concat(C.[Year Month No], c.[Total Days of Month]) as [Last Day of This Month]
FROM [DWH].[VW_CALENDAR_D] C
JOIN [DWH].[W_CALENDAR_D] D
ON D.[DATE_WID] = C.[Date Key];
GO
/****** Object:  View [DWH].[VW_MRP_TRX_SALES_ORDER_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_TRX_SALES_ORDER_F] AS with cte as (
select  
COALESCE(C.[DATE_WID],format(isnull(A.[TPG_DELIVERY_PLAN_DATE],cast('1900-01-01' as date)),'yyyyMMdd')) [Date Key],
 A.[ROW_WID] ,
A.[CONTRACT_WID] [Contract Key],
A.[ITEM_WID] [Item Key],
A.[CUSTOMER_WID] [Customer Key],
A.[FACTORY_WID] [Factory Key],
A.[PO_ID] [PO Id],
A.[PO_NUMBER] [PO Number],

A.[PO_BATCH] [PO Batch],
A.[PO_CREATED_DATE] [PO Created Date],
A.[CUSTOMER_DELIVERY_PLAN_DATE] [Customer Delivery Plan Date],
A.[TPG_DELIVERY_PLAN_DATE] [Tpg Delivery Plan Date],
A.[PO_SOURCE] [PO Source],
A.[ITEM_ID] [Item Id],
A.[CUSTOMER_CODE] [Customer Code],
A.[RECEIVE_CUSTOMER_CODE] [Receive Customer Code],
A.[PAYMENT_CUSTOMER_CODE] [Payment Customer Code],
A.[CONTRACT_ID] [Contract Id],
A.[PO_STATUS] [PO Status],
A.[PO_NUMBER_REF] [PO Number Ref],
A.[COLOR_CODE] [Color Code],
A.[COLOR] [Color],
A.[STYLE] [Style],
A.[SUB_STYLE] [Sub Style],
A.[SIZE] [Size],
A.[COUNTRY] [Country],
A.[DIVISION] [Division],
A.[LABEL] [Label],
A.[HANGER] [Hanger],
A.[SEASON] [Season],
A.[SEASONCODE] [Seasoncode],
A.[PLAN_QUANTITY] [Plan Quantity],
A.[MODE_PRICE] [Mode Price],
A.[QUANTITY_DZ] [Quantity Dz],
A.[PRICE_DZ] [Price Dz],
A.[UC] [Uc],
A.[DISCOUNT_PERCENT] [Discount Percent],
A.[QUANTITY_PCS] [Quantity Pcs],

ISNULL(CASE WHEN A.[QUANTITY_PCS] = 0 AND B.[COLOR_CODE] ='' THEN A.[PLAN_QUANTITY] ELSE [QUANTITY_PCS] END,0) [QUANTITY],
A.[FOB_PRICE] [FOB Price],
a.[FOB_PRICE_PO],
a.[PRICE_TOTAL],
a.[PRICE_TOTAL_PO],
A.[VENDOR_CODE] [Vendor Code],
A.[STYLE_EXPORT] [Style Export],
A.[AMOUNT] [Amount]
,[FIX_SHORTSHIP] 
,[OVER_SHIP_QUANTITY]

,[PO_PACKING_QUANTITY_PCS]


from [DWH].[W_MRP_TRX_SALES_ORDER_F] a 
left join [DWH].[W_MRP_MD_PRODUCT_D] b on a.[ITEM_WID] = b.row_wid  

left join  (SELECT  [PO_ID],Min([DATE_WID]) [DATE_WID] FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] where [W_DELETE_FLG] = '0' and date_wid <> 19000101 GROUP BY [PO_ID]) c
on a.[PO_ID] = c.[PO_ID] and left(A.[DATE_WID],4) =left(c.[DATE_WID],4)
where 
(isnull(b.[ITEM_ID_REF],0)=0 or b.[ITEM_MODEL] ='LE')
and a.[PO_SOURCE] ='SX'
and a.[W_DELETE_FLG] = '0'

union 
select 
C.[DATE_WID] [Date Key],
A.[ROW_WID] ,
A.[CONTRACT_WID] [Contract Key],
A.[ITEM_WID] [Item Key],
A.[CUSTOMER_WID] [Customer Key],
A.[FACTORY_WID] [Factory Key],
A.[PO_ID] [PO Id],
A.[PO_NUMBER] [PO Number],
A.[PO_BATCH] [PO Batch],
A.[PO_CREATED_DATE] [PO Created Date],
A.[CUSTOMER_DELIVERY_PLAN_DATE] [Customer Delivery Plan Date],
A.[TPG_DELIVERY_PLAN_DATE] [Tpg Delivery Plan Date],
A.[PO_SOURCE] [PO Source],
A.[ITEM_ID] [Item Id],
A.[CUSTOMER_CODE] [Customer Code],
A.[RECEIVE_CUSTOMER_CODE] [Receive Customer Code],
A.[PAYMENT_CUSTOMER_CODE] [Payment Customer Code],
A.[CONTRACT_ID] [Contract Id],
A.[PO_STATUS] [PO Status],
A.[PO_NUMBER_REF] [PO Number Ref],
A.[COLOR_CODE] [Color Code],
A.[COLOR] [Color],
A.[STYLE] [Style],
A.[SUB_STYLE] [Sub Style],
A.[SIZE] [Size],
A.[COUNTRY] [Country],
A.[DIVISION] [Division],
A.[LABEL] [Label],
A.[HANGER] [Hanger],
A.[SEASON] [Season],
A.[SEASONCODE] [Seasoncode],
A.[PLAN_QUANTITY] [Plan Quantity],
A.[MODE_PRICE] [Mode Price],
A.[QUANTITY_DZ] [Quantity Dz],
A.[PRICE_DZ] [Price Dz],
A.[UC] [Uc],
A.[DISCOUNT_PERCENT] [Discount Percent],
A.[QUANTITY_PCS] [Quantity Pcs],


ISNULL(CASE WHEN A.[QUANTITY_PCS] = 0 AND B.[COLOR_CODE] ='' THEN A.[PLAN_QUANTITY] ELSE [QUANTITY_PCS] END,0) [QUANTITY],
A.[FOB_PRICE] [FOB Price],
a.[FOB_PRICE_PO],
a.[PRICE_TOTAL],
a.[PRICE_TOTAL_PO],
A.[VENDOR_CODE] [Vendor Code],
A.[STYLE_EXPORT] [Style Export],
A.[AMOUNT] [Amount]
,[FIX_SHORTSHIP]
,[OVER_SHIP_QUANTITY]
,[PO_PACKING_QUANTITY_PCS]


from [DWH].[W_MRP_TRX_SALES_ORDER_F] a 
left join [DWH].[W_MRP_MD_PRODUCT_D] b on a.[ITEM_WID] = b.row_wid  


join  (SELECT  [PO_ID],Min([DATE_WID]) [DATE_WID] FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] where [W_DELETE_FLG] = '0' and date_wid <> 19000101 GROUP BY [PO_ID]) c
on a.[PO_ID] = c.[PO_ID] and left(A.[DATE_WID],4) <>left(c.[DATE_WID],4)
where 
(isnull(b.[ITEM_ID_REF],0)=0 or b.[ITEM_MODEL] ='LE')
and a.[PO_SOURCE] ='SX'
and a.[W_DELETE_FLG] = '0'
),
cte2 as
(
select
left([Date Key],4) [year], [PO Id] , [Color Code], [Size] ,sum([QUANTITY])[QUANTITY],sum([Amount])[Amount] 
      ,SUM([OVER_SHIP_QUANTITY]) [Overship Quantity]
from cte where ISNULL([Vendor Code],'') not in ('0','') group by  [PO Id] , [Color Code], [Size], left([Date Key],4)

),cte3 as
(
select 
a.[Date Key],
A.[ROW_WID] ,
a.[Contract Key],
a.[Item Key],
a.[Customer Key],
a.[Factory Key],
a.[PO Id],
a.[PO Number],
A.[PO NUMBER] + '-' + A.[COUNTRY] [PO-Country],
a.[PO Batch],
a.[PO Created Date],
a.[Customer Delivery Plan Date],
a.[Tpg Delivery Plan Date],
a.[PO Source],
a.[Item Id],
a.[Customer Code],
a.[Receive Customer Code],
a.[Payment Customer Code],
a.[Contract Id],
a.[PO Status],
a.[PO Number Ref],
a.[Color Code],
a.[Color],
a.[Style],
a.[Sub Style],
a.[Size],
a.[Country],
a.[Division],
a.[Label],
a.[Hanger],
a.[Season],
a.[Seasoncode],
a.[Plan Quantity],
a.[Mode Price],
a.[Quantity Dz],
a.[Price Dz],
a.[Uc],
a.[Discount Percent],
a.[Quantity Pcs],
a.[QUANTITY] [QUANTITY],
--a.[Qty Packaging SX],
b.[FOB Price],
b.[FOB_PRICE_PO],
b.[PRICE_TOTAL],
b.[PRICE_TOTAL_PO],
isnull(a.[Vendor Code],'') [Vendor Code],
a.[Style Export],
a.[QUANTITY]*(case when isnull(b.[FOB Price],0) <>0 then b.[FOB Price] 
	else 
	(
	case when isnull(b.[PRICE_TOTAL],0) <>0 then b.[PRICE_TOTAL] 
	else 
		(
			case when  isnull(b.[FOB_PRICE_PO],0) <>0 then b.[FOB_PRICE_PO] 
			else b.[PRICE_TOTAL_PO] end
		) end
	) end
) [Amount]
,[FIX_SHORTSHIP] [Shortship Flag]
,[OVER_SHIP_QUANTITY] [Overship Quantity]
,[OVER_SHIP_QUANTITY] *b.[Fob Price] [Overship Amount]
,[PO_PACKING_QUANTITY_PCS]
,1 RN

from cte a left join (select [Date Key],[Po Id],[Color Code],[Size], [Fob Price],[FOB_PRICE_PO],[PRICE_TOTAL],[PRICE_TOTAL_PO] from cte where ISNULL([Vendor Code],'') in ('') )b on a.[Po Id] =b.[Po Id] and a.[Color Code] = b.[Color Code] and a.[Size] = b.[Size] and a.[Date Key] = b.[Date Key]
--where ISNULL(a.[Vendor Code],'') not in ('')

UNION ALL
SELECT
*
,ROW_NUMBER() OVER (PARTITION BY [PO Id] ORDER BY [Item Key]) RN
FROM(
select 
a.[Date Key],
A.[ROW_WID] ,
a.[Contract Key],
a.[Item Key],
a.[Customer Key],
a.[Factory Key],
a.[PO Id],
a.[PO Number],
A.[PO NUMBER] + '-' + A.[COUNTRY] [PO-Country],
a.[PO Batch],
a.[PO Created Date],
a.[Customer Delivery Plan Date],
a.[Tpg Delivery Plan Date],
a.[PO Source],
a.[Item Id],
a.[Customer Code],
a.[Receive Customer Code],
a.[Payment Customer Code],
a.[Contract Id],
a.[PO Status],
a.[PO Number Ref],
'' [Color Code],
'' [Color],
a.[Style],
a.[Sub Style],
'' [Size],
a.[Country],
a.[Division],
a.[Label],
a.[Hanger],
a.[Season],
a.[Seasoncode],
a.[Plan Quantity],
a.[Mode Price],
a.[Quantity Dz],
a.[Price Dz],
a.[Uc],
a.[Discount Percent],
a.[Quantity Pcs],
CASE WHEN SUM(a.[QUANTITY]) OVER (PARTITION BY  a.[PO Id]) = 0 THEN a.[Plan Quantity] ELSE 0 END [QUANTITY],
--a.[Qty Packaging SX],
b.[FOB Price],
b.[FOB_PRICE_PO],
b.[PRICE_TOTAL],
b.[PRICE_TOTAL_PO],
isnull(a.[Vendor Code],'') [Vendor Code],
a.[Style Export],
(CASE WHEN SUM(a.[QUANTITY]) OVER (PARTITION BY  a.[PO Id]) = 0 THEN a.[Plan Quantity] ELSE 0 END)*(case when isnull(b.[FOB Price],0) <>0 then b.[FOB Price] 
	else 
	(
	case when isnull(b.[PRICE_TOTAL],0) <>0 then b.[PRICE_TOTAL] 
	else 
		(
			case when  isnull(b.[FOB_PRICE_PO],0) <>0 then b.[FOB_PRICE_PO] 
			else b.[PRICE_TOTAL_PO] end
		) end
	) end
) [Amount]
,[FIX_SHORTSHIP] [Shortship Flag]
,[OVER_SHIP_QUANTITY] [Overship Quantity]
,[OVER_SHIP_QUANTITY] *b.[Fob Price] [Overship Amount]
,[PO_PACKING_QUANTITY_PCS]

from cte a left join (select [Date Key],[Po Id],[Color Code],[Size], [Fob Price],[FOB_PRICE_PO],[PRICE_TOTAL],[PRICE_TOTAL_PO] from cte where ISNULL([Vendor Code],'') in ('') )b on a.[Po Id] =b.[Po Id] and a.[Color Code] = b.[Color Code] and a.[Size] = b.[Size] and a.[Date Key] = b.[Date Key]
where ISNULL(a.[Vendor Code],'')  in ('')
) A WHERE A.[QUANTITY] <> 0

UNION ALL
SELECT
*
,ROW_NUMBER() OVER (PARTITION BY [PO Id] ORDER BY [Item Key]) RN
FROM(
select 
a.[Date Key],
A.[ROW_WID] ,
a.[Contract Key],
a.[Item Key],
a.[Customer Key],
(select min(row_wid) FROM [DWH].[W_MRP_MD_FACTORY_D] where factory_code = 'tp') [Factory Key],
a.[PO Id],
a.[PO Number],
A.[PO NUMBER] + '-' + A.[COUNTRY] [PO-Country],
a.[PO Batch],
a.[PO Created Date],
a.[Customer Delivery Plan Date],
a.[Tpg Delivery Plan Date],
a.[PO Source],
a.[Item Id],
a.[Customer Code],
a.[Receive Customer Code],
a.[Payment Customer Code],
a.[Contract Id],
a.[PO Status],
a.[PO Number Ref],
'' [Color Code],
'' [Color],
a.[Style],
a.[Sub Style],
'' [Size],
a.[Country],
a.[Division],
a.[Label],
a.[Hanger],
a.[Season],
a.[Seasoncode],
a.[Plan Quantity],
a.[Mode Price],
a.[Quantity Dz],
a.[Price Dz],
a.[Uc],
a.[Discount Percent],
a.[Quantity Pcs],
CASE WHEN SUM(a.[QUANTITY]) OVER (PARTITION BY  a.[PO Id]) = 0 THEN a.[Plan Quantity] ELSE 0 END [QUANTITY],
--a.[Qty Packaging SX],
b.[FOB Price],
b.[FOB_PRICE_PO],
b.[PRICE_TOTAL],
b.[PRICE_TOTAL_PO],
'TP' [Vendor Code],
a.[Style Export],
(CASE WHEN SUM(a.[QUANTITY]) OVER (PARTITION BY  a.[PO Id]) = 0 THEN a.[Plan Quantity] ELSE 0 END)*(case when isnull(b.[FOB Price],0) <>0 then b.[FOB Price] 
	else 
	(
	case when isnull(b.[PRICE_TOTAL],0) <>0 then b.[PRICE_TOTAL] 
	else 
		(
			case when  isnull(b.[FOB_PRICE_PO],0) <>0 then b.[FOB_PRICE_PO] 
			else b.[PRICE_TOTAL_PO] end
		) end
	) end
) [Amount]
,[FIX_SHORTSHIP] [Shortship Flag]
,[OVER_SHIP_QUANTITY] [Overship Quantity]
,[OVER_SHIP_QUANTITY] *b.[Fob Price] [Overship Amount]
,[PO_PACKING_QUANTITY_PCS]

from cte a left join (select [Date Key],[Po Id],[Color Code],[Size], [Fob Price],[FOB_PRICE_PO],[PRICE_TOTAL],[PRICE_TOTAL_PO] from cte where ISNULL([Vendor Code],'') in ('') )b on a.[Po Id] =b.[Po Id] and a.[Color Code] = b.[Color Code] and a.[Size] = b.[Size] and a.[Date Key] = b.[Date Key]
where ISNULL(a.[Vendor Code],'')  in ('')
) A WHERE A.[QUANTITY] <> 0

union 
select
a.[Date Key],
A.[ROW_WID] ,
a.[Contract Key],
a.[Item Key],
a.[Customer Key],
(select min(row_wid) FROM [DWH].[W_MRP_MD_FACTORY_D] where factory_code = 'tp') [Factory Key],
a.[PO Id],
a.[Po Number],
A.[PO NUMBER] + '-' + A.[COUNTRY] [PO-Country],
a.[PO Batch],
a.[PO Created Date],
a.[Customer Delivery Plan Date],
a.[Tpg Delivery Plan Date],
a.[PO Source],
a.[Item Id],
a.[Customer Code],
a.[Receive Customer Code],
a.[Payment Customer Code],
a.[Contract Id],
a.[Po Status],
a.[Po Number Ref],
a.[Color Code],
a.[Color],
a.[Style],
a.[Sub Style],
a.[Size],
a.[Country],
a.[Division],
a.[Label],
a.[Hanger],
a.[Season],
a.[Seasoncode],
a.[Plan Quantity],
a.[Mode Price],
a.[Quantity Dz],
a.[Price Dz],
a.[Uc],
a.[Discount Percent],
a.[Quantity Pcs],
a.[QUANTITY] - isnull(b.[QUANTITY],0)[Quantity],

a.[FOB Price],
a.[FOB_PRICE_PO],
a.[PRICE_TOTAL],
a.[PRICE_TOTAL_PO],
'TP' [Vendor Code],
a.[Style Export],
(a.[QUANTITY] - isnull(b.[QUANTITY],0))*(case when isnull(a.[FOB Price],0) <>0 then a.[FOB Price] 
	else 
	(
	case when isnull(a.[PRICE_TOTAL],0) <>0 then a.[PRICE_TOTAL] 
	else 
		(
			case when  isnull(a.[FOB_PRICE_PO],0) <>0 then a.[FOB_PRICE_PO] 
			else a.[PRICE_TOTAL_PO] end
		) end
	) end
) [Amount]
,a.[FIX_SHORTSHIP] [Shortship Flag]
,[OVER_SHIP_QUANTITY] - isnull([OVER_SHIP_QUANTITY],0) [Overship Quantity]
,([OVER_SHIP_QUANTITY] - isnull([OVER_SHIP_QUANTITY],0)) *a.[Fob Price] [Overship Amount]
,[PO_PACKING_QUANTITY_PCS]
,1 RN

from cte a left join cte2 b on a.[Po Id] =b.[Po Id] and a.[Color Code] = b.[Color Code] and a.[Size] = b.[Size] 
and left(a.[Date Key],4)= b.[year]
where ISNULL(a.[Vendor Code],'') in ('')
 and a.[QUANTITY] - isnull(b.[QUANTITY],0) <> 0
 )
 select * from cte3 where RN = 1;
GO
/****** Object:  View [DWH].[VW_MRP_SALES_ORDER_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_SALES_ORDER_F] AS with cte as 
(
SELECT
		A.[Date Key]
      ,A.[Contract Key]
	  ,C.[Contract Type Key]
	  ,C.[Production Type]
      ,A.[Item Key]
	  ,a.[Item Id]
      ,A.[Customer Key]
      ,A.[Factory Key]
      ,A.[Po Id]
      ,A.[PO Number]
      
      ,A.[PO Number] + '-' + a.[Country] [PO-Country]
      ,A.[PO Batch]
      ,A.[Po Created Date]
      ,A.[Customer Delivery Plan Date]
      ,A.[Tpg Delivery Plan Date] [TPG Delivery Plan Date] 
      ,A.[PO Source]   
      ,A.[Po Status] [PO Status]
      ,A.[Po Number Ref] [PO Number Ref]
      ,A.[Color Code]
      ,A.[Color]
      ,A.[Style]
      ,A.[Sub Style]
      ,A.[Size]
      ,A.[Country]
      ,A.[Division]
      ,A.[Label]
      ,A.[Hanger]
      ,A.[Season]
      ,A.[Mode Price]
      ,A.[Quantity Dz]
      ,A.[Price Dz]
      ,A.[Uc] [UC]
      ,A.[Discount Percent]
	  ,A.[Quantity Pcs]
      ,A.[QUANTITY] [Order Quantity]
	
      ,A.[Fob Price] [FOB Price]
	  ,a.[FOB_PRICE_PO]
	  ,a.[PRICE_TOTAL]
	  ,a.[PRICE_TOTAL_PO]
	  ,case when isnull(a.[FOB Price],0) <>0 then a.[FOB Price]
					else a.[FOB_PRICE_PO] end as [FOB Order Price]
		,case when isnull(a.[PRICE_TOTAL],0) <>0 then a.[PRICE_TOTAL]
					else a.[PRICE_TOTAL_PO] end as [CM Order Price]
      ,A.[Vendor Code]
	  ,R.[Exchange Rate]

	 ,b.[PO_PACKING_QUANTITY_PCS] [PO Packing Quantity Pcs]
      ,b.[SOURCE] [Source]
	  ,a.[Shortship Flag]
	,a.[Overship Quantity]
	,a.[Overship Amount]
	,dense_rank() over (partition by a.[po id] order by  a.[po id], a.[customer Key], a.[item id], a.[item key]) as [LineNo]
	,c.[Contract Type Code]
     

   
  FROM [DWH].[VW_MRP_TRX_SALES_ORDER_F] A
  left join [DWH].[W_MRP_TRX_SALES_ORDER_F] B 
  on a.[ROW_WID] = b.[ROW_WID]

  LEFT JOIN [DWH].[VW_MRP_CONTRACT_F] C ON A.[Contract Key] = C.[Contract Key]
  
  
  LEFT JOIN [DWH].[VW_MPR_MD_EXCHANGE_RATE_D] R ON
	A.[Date Key] >= FORMAT(R.[FROM DATE],'yyyyMMdd')
	AND (R.[TO DATE] IS NULL OR A.[Date Key] < FORMAT(R.[TO DATE],'yyyyMMdd'))


)

select 
		A.[Date Key]
      ,A.[Contract Key]
	  ,a.[Contract Type Key]
	  ,a.[Production Type]
      ,A.[Item Key]
	  ,a.[Item Id]
      ,A.[Customer Key]
      ,A.[Factory Key]
      ,A.[Po Id]
      ,A.[PO Number]
      
      ,A.[PO-Country]
      ,A.[PO Batch]
      ,A.[Po Created Date]
      ,A.[Customer Delivery Plan Date]
      ,A.[TPG Delivery Plan Date] 
      ,A.[PO Source]   
      ,A.[PO Status]
      ,A.[PO Number Ref]
      ,A.[Color Code]
      ,A.[Color]
      ,A.[Style]
      ,A.[Sub Style]
      ,A.[Size]
      ,A.[Country]
      ,A.[Division]
      ,A.[Label]
      ,A.[Hanger]
      ,A.[Season]
      ,A.[Mode Price]
      ,A.[Quantity Dz]
      ,A.[Price Dz]
      ,A.[Uc] [UC]
      ,A.[Discount Percent]
	  ,A.[Quantity Pcs]
      ,A.[Order Quantity]
	  ,a.[FOB Order Price]
	  ,a.[CM Order Price]
 
	  ,case when a.[Contract Type Code] like '%FOB%' then a.[FOB Order Price] 
			else a.[CM Order Price] end as [FOB/CM Order Price]
	  ,A.[Order Quantity] * a.[FOB Order Price] as [FOB Order Amount]
	  ,A.[Order Quantity] * a.[CM Order Price] as [CM Order Amount]
	  ,A.[Order Quantity] *
			(case when a.[Contract Type Code] like '%FOB%' then a.[FOB Order Price] 
			else a.[CM Order Price] end)  as [FOB/CM Order Amount]
      ,A.[Vendor Code]
	  ,a.[Exchange Rate]

	 ,case when [LineNo] = 1 then a.[PO Packing Quantity Pcs]
		else 0 end as [PO Packing Quantity Pcs]
      ,a.[SOURCE] [Source]
	  ,a.[Shortship Flag]
	,case when [LineNo] = 1 then a.[Overship Quantity]
		else 0 end as [Overship Quantity]
	,case when [LineNo] = 1 then a.[Overship Amount]
		else 0 end as [Overship Amount]

from cte a;
GO
/****** Object:  View [DWH].[VW_MRP_SALES_INVOICE_FACTORY_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_SALES_INVOICE_FACTORY_F] AS WITH 

--SELECT ITEM ROW FOR REPORT 
cte0 AS (
		SELECT	ITEM_WID
				,[PO_ID]
				,[ITEM_ID]
				,[COLOR_CODE]
				,[SIZE]
				,[PO_NUMBER_REF]

		  FROM [DWH].[W_MRP_TRX_SALES_ORDER_F] 
		  WHERE  DELETE_FLAG=0  AND ISNULL(PO_NUMBER_REF,0) <>0 AND  [VENDOR_CODE]='' 
		  GROUP BY ITEM_WID
				,[PO_ID]
				,[ITEM_ID]
				,[COLOR_CODE]
				,[SIZE]
				,[PO_NUMBER_REF]  
		),

--GET ITEM REF
cte AS (
		SELECT	A.*
				,B.ITEM_WID AS ITEM_WIDTC
		FROM cte0 AS A INNER JOIN   [DWH].[W_MRP_TRX_SALES_ORDER_F]  AS B ON A.[PO_NUMBER_REF]=B.[PO_ID] AND A.[COLOR_CODE]=B.[COLOR_CODE] AND A.[SIZE]=B.[SIZE] AND  B.DELETE_FLAG=0  AND  [VENDOR_CODE]=''
		),


--GET [CM Production Amount] AND GROUP BY [PO ID],[ITEM KEY],[FACTORY] 
cte2 AS (
		SELECT	B.[PO_NUMBER_REF] AS [PO ID]
				,a.[Factory Key]
				,B.ITEM_WIDTC [Item Key]
				,SUM([CM Production Amount])AS [CM Production Amount]
     
			FROM [DWH].[VW_MRP_PRODUCTION_F] AS A INNER JOIN cte AS B ON A.[PO ID]=b.[PO_ID] AND A.[Item Key]=B.ITEM_WID
			GROUP BY B.[PO_NUMBER_REF]
					,a.[Factory Key]
					,B.ITEM_WIDTC
			HAVING SUM([CM Production Amount]) >0
		),

--CALULATE PERCENT OF FACTORY  BY [CM Production Amount]
cte3 AS (
		SELECT	a.[PO ID]
				,A.[Item Key]
				,a.[Factory Key]
				,CAST(case	when b.[CM Production Amount]<> 0 AND  a.[CM Production Amount]<>b.[CM Production Amount]  
							then  a.[CM Production Amount]/b.[CM Production Amount] else 1 end AS NUMERIC(30,10)) as [Percent CM]
			FROM	cte2 AS A INNER JOIN(SELECT  [PO ID]
												,[Item Key]
												,SUM([CM Production Amount])AS [CM Production Amount]
     
											FROM cte2
											GROUP BY [PO ID] 
												,[Item Key]
											)AS B ON A.[PO ID]=B.[PO ID] AND A.[Item Key]=B.[Item Key] 

		WHERE	CAST(case when b.[CM Production Amount]<> 0 AND  a.[CM Production Amount]<>b.[CM Production Amount]  then  a.[CM Production Amount]/b.[CM Production Amount] else 1 end AS NUMERIC(30,10)) <=1 AND 
				CAST(case when b.[CM Production Amount]<> 0 AND  a.[CM Production Amount]<>b.[CM Production Amount]  then  a.[CM Production Amount]/b.[CM Production Amount] else 1 end AS NUMERIC(30,10)) <>0	
	),

--SELECT ALLOCATION KEY
cte4  AS 
(SELECT [Item Key],[PO ID] FROM  cte3 GROUP BY [Item Key],[PO ID]),


--SELECT SALE INVOICE BY ALLOCATION KEY
cte5 AS (SELECT 
		
		A.[DATE_WID] 
		,A.[INVOICE_NUMBER]
		,A.[CUSTOMER_WID] 
		,A.[ITEM_WID]
		,A.[PO_ID] 
		,A.[INVOICE_DATE] 
		,A.[COUNTRY_DESTINATION] 
		,A.[UOM] 
		,A.[CURRENCY] 
		,sum(A.[DOCUMENT_AMOUNT]) [DOCUMENT_AMOUNT]

		FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] A INNER JOIN CTE4 AS B ON A.[PO_ID]=B.[PO ID] AND A.[ITEM_WID]=B.[Item Key] 
												 INNER JOIN [DWH].[W_MRP_MD_FACTORY_D]  AS C ON A.[FACTORY_WID] =C.ROW_WID 
		WHERE A.[DATE_WID] <> 19000101 AND  C.FACTORY_TYPE='SX'    and a.[W_DELETE_FLG] = '0'
		GROUP BY  A.[DATE_WID] 
		,A.[INVOICE_NUMBER]
		,A.[CUSTOMER_WID] 
		,A.[ITEM_WID]
     
		,A.[PO_ID] 
		,A.[INVOICE_DATE] 
		,A.[COUNTRY_DESTINATION] 
		,A.[UOM] 
		,A.[CURRENCY] 
		)

--SELECT INVOICE NOT IN ALLOCAION KEY
SELECT	0 as [Allocate]
		,A.[INVOICE_NUMBER] AS [Invoice Number] 
		,A.[DATE_WID] [Date Key]
		,A.[CUSTOMER_WID] [Customer Key]
		,A.[FACTORY_WID] [Factory Key]
		,A.[ITEM_WID] AS [Item Key]
		,A.[PO_ID] [PO Id]
		,A.[INVOICE_DATE] [Invoice Date]
		,A.[COUNTRY_DESTINATION] [Country Destination]
		,A.[UOM] [UOM]
		,A.[CURRENCY] [Currency]
		,SUM(A.[DOCUMENT_AMOUNT]) [FOB/CM Invoice Amount]
  
  FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] A LEFT JOIN CTE4 AS  B ON A.[PO_ID]=B.[PO ID] AND A.[ITEM_WID]=B.[Item Key]
  WHERE A.[DATE_WID] <> 19000101 AND B.[PO ID] IS  NULL  
		AND a.[W_DELETE_FLG] = '0'
  group by  A.[DATE_WID] 
		,A.[INVOICE_NUMBER]
		,A.[CUSTOMER_WID] 
		,A.[FACTORY_WID]  
		,A.[ITEM_WID]
		,A.[PO_ID] 
		,A.[INVOICE_DATE] 
		,A.[COUNTRY_DESTINATION] 
		,A.[UOM] 
		,A.[CURRENCY] 

--SELECT INVOICE BY ALLOCAION KEY

UNION ALL
SELECT
		1 as [Allocate]
		,A.[INVOICE_NUMBER] as [Invoice Number]
		,A.[DATE_WID] [Date Key]
		,A.[CUSTOMER_WID] [Customer Key]
		,C.[Factory Key] [Factory Key]
		,A.[ITEM_WID] AS [Item Key]
		,A.[PO_ID] [PO Id]
		,A.[INVOICE_DATE] [Invoice Date]
		,A.[COUNTRY_DESTINATION] [Country Destination]
		,A.[UOM] [UOM]
		,A.[CURRENCY] [Currency]
  		,C.[Percent CM] * A.[DOCUMENT_AMOUNT] [FOB/CM Invoice Amount]

  FROM CTE5 A  INNER JOIN cte3  AS C ON A.[PO_ID]=C.[PO ID] AND A.[ITEM_WID]=C.[ITEM KEY];
GO
/****** Object:  View [DWH].[VW_MRP_TRX_PACKING_LIST_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_TRX_PACKING_LIST_F] AS select distinct 
a.[Date Key] [Filter Date],
format(a.[Tpg Delivery Plan Date],'yyyyMMdd') [Delivery Date],
C.[FACTORY_WID] [Factory Key],
b.[item_wid] [Item Key],
a.[Contract Key],
d.[Contract Type Key],
a.[Customer Key],
a.[PO Id],
a.[PO-Country],
a.[PO Batch],
a.[Item Id],
b.item_code,
a.[Customer Code],
C.[PO_PACKING_QUANTITY_PCS] [PO Packing Quantity Pcs],
C.[PLAN_QUANTITY] [Plan Quantity],
case when C.[PO_PACKING_QUANTITY_PCS] =0 then C.[PLAN_QUANTITY] else C.[PO_PACKING_QUANTITY_PCS] end [Packing List Quantity],
c.[FACTORY_CODE],
1 [TYPE]
from [DWH].[VW_MRP_TRX_SALES_ORDER_F] a 
join (select min([ROW_WID]) [item_wid],item_id,item_code from [DWH].[W_MRP_MD_PRODUCT_D] WHERE FACTORY_CODE ='TP' group by item_id,item_code) b on a.[Item Id] = b.item_id
join  [DWH].[W_MRP_TRX_FACTORY_QUANTITY_F] c on a.[PO Id] = c.[PO_ID] and c.[PRODUCTION_STAGE_CODE] = 'DONGGOI'
LEFT JOIN [DWH].[VW_MRP_CONTRACT_F] d ON A.[Contract Key] = d.[Contract Key]

where a.[Date Key] <> 19000101  --and  [vendor code] = 'tp' and [PO-Country] ='0922355-USA' -- and [Date Key] like '202101%'
--order by format([Tpg Delivery Plan Date],'yyyyMMdd'),[PO-Country],[PO Batch]

UNION ALL
select distinct 
D.[DATE_WID] [Filter Date],
format(a.[Tpg Delivery Plan Date],'yyyyMMdd') [Delivery Date],
C.[FACTORY_WID] [Factory Key],
b.[item_wid] [Item Key],
a.[Contract Key],
e.[Contract Type Key],
a.[Customer Key],
a.[PO Id],
a.[PO-Country],
a.[PO Batch],
a.[Item Id],
b.item_code,
a.[Customer Code],
C.[PO_PACKING_QUANTITY_PCS] [PO Packing Quantity Pcs],
C.[PLAN_QUANTITY] [Plan Quantity],
case when C.[PO_PACKING_QUANTITY_PCS] =0 then C.[PLAN_QUANTITY] else C.[PO_PACKING_QUANTITY_PCS] end [Packing List Quantity],
c.[FACTORY_CODE],
2 [TYPE]
from [DWH].[VW_MRP_TRX_SALES_ORDER_F] a 
join (select min([ROW_WID]) [item_wid],item_id,item_code from [DWH].[W_MRP_MD_PRODUCT_D] WHERE FACTORY_CODE ='TP' group by item_id,item_code) b on a.[Item Id] = b.item_id
join  [DWH].[W_MRP_TRX_FACTORY_QUANTITY_F] c on a.[PO Id] = c.[PO_ID] and c.[PRODUCTION_STAGE_CODE] = 'DONGGOI'
LEFT JOIN [DWH].[VW_MRP_CONTRACT_F] e ON A.[Contract Key] = e.[Contract Key]

join 
(SELECT min([DATE_WID]) [DATE_WID],
      [PO_ID]
  FROM [DWH].[W_MRP_TRX_INVENTORY_PRODUCT_F] group by [PO_ID]) D on a.[PO Id] = D.[PO_ID] and D.[DATE_WID]< a.[Date Key]
where a.[Date Key] <> 19000101;
GO
/****** Object:  View [DWH].[VW_CF_TRX_MRP_SALES_ORDER_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_CF_TRX_MRP_SALES_ORDER_F] AS SELECT *
			FROM
			(
           

			--
			select 1 [TYPE],a.[po number] [PO_NUMBER],e.[Customer Code] [CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],left([Date Key],6)+'01' [DATE],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01') [PAYMENT_DATE],sum(a.[FOB Order Amount]) [PAYMENT_AMOUNT]
			from
			[DWH].[VW_MRP_SALES_ORDER_F_BK] A
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[Contract Type Key] = c.[row_wid] and trim(c.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng FOB xuất khẩu ')
			join [DWH].[VW_MRP_CUSTOMER_D] e on a.[Customer Key] = e.[Customer Key] and (e.[Customer Code] LIKE '%ADIDAS%' OR e.[Customer Code] LIKE '%AEO%' OR e.[Customer Code] LIKE '%GARAN%' OR e.[Customer Code] LIKE '%HADDAD%' OR e.[Customer Code] LIKE '%HIS%' OR e.[Customer Code] LIKE '%LIFUNG%' OR e.[Customer Code] LIKE '%TARGET%')
			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] D ON  e.[Customer Code] LIKE CONCAT('%',D.[CUSTOMER],'%') 
			and d.[LOAI_HINH] = 'FOB'
			and
			(select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and e.[Customer Code] LIKE CONCAT('%',[CUSTOMER],'%')  and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= [Date Key]) =  format(cast(d.[EFFECTIVE_FROM] as datetime),'yyyyMMdd')

			LEFT JOIN (SELECT DISTINCT [DATE_WID] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] where  [TYPE]<>'TH M.D.K') LO ON 
			left([Date Key],6)+'01' = LO.[DATE_WID] 

			WHERE [Date Key] >= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01') and [Vendor Code] = ''
			and LO.[DATE_WID] is null
			group by e.[Customer Code],c.[CONTRACT_TYPE_NAME],left([Date Key],6)+'01',format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01'),a.[po number]

			union all
			select 1 [TYPE],a.[po number] [PO_NUMBER],'KHAC' [CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],left([Date Key],6)+'01' [DATE],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01') [PAYMENT_DATE],sum(a.[FOB Order Amount]) [PAYMENT_AMOUNT]
			from
			[DWH].[VW_MRP_SALES_ORDER_F_BK] A
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[Contract Type Key] = c.[row_wid] and trim(c.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng FOB xuất khẩu ')
			join [DWH].[VW_MRP_CUSTOMER_D] e on a.[Customer Key] = e.[Customer Key] and NOT(e.[Customer Code] LIKE '%ADIDAS%' OR e.[Customer Code] LIKE '%AEO%' OR e.[Customer Code] LIKE '%GARAN%' OR e.[Customer Code] LIKE '%HADDAD%' OR e.[Customer Code] LIKE '%HIS%' OR e.[Customer Code] LIKE '%LIFUNG%' OR e.[Customer Code] LIKE '%TARGET%')
			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] D ON d.[CUSTOMER]  LIKE N'%Khác%' 
			and d.[LOAI_HINH] = 'FOB' 
			and (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE N'%Khác%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= [Date Key]) =  format(cast(d.[EFFECTIVE_FROM] as datetime),'yyyyMMdd')

			LEFT JOIN (SELECT DISTINCT [DATE_WID] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] where  [TYPE]<>'TH M.D.K') LO ON 
			left([Date Key],6)+'01' = LO.[DATE_WID] 

			WHERE [Date Key] >= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01') and [Vendor Code] = ''
			and LO.[DATE_WID] is null
			group by c.[CONTRACT_TYPE_NAME],left([Date Key],6)+'01',format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01'),a.[po number]

			union all
			select 1 [TYPE],a.[po number] [PO_NUMBER],NULL [CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],left([Date Key],6)+'01' [DATE],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01') [PAYMENT_DATE],sum(a.[FOB Order Amount]) [PAYMENT_AMOUNT]
			from
			[DWH].[VW_MRP_SALES_ORDER_F_BK] A
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[Contract Type Key] = c.[row_wid] and trim(c.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng gia công trong nước')
			join [DWH].[VW_MRP_CUSTOMER_D] e on a.[Customer Key] = e.[Customer Key]
			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] D ON  e.[Customer Code] LIKE CONCAT('%',D.[CUSTOMER],'%') 
			and d.[LOAI_HINH] = 'GC MAY'
			and
			(select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'GC MAY' and e.[Customer Code] LIKE CONCAT('%',[CUSTOMER],'%')  and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= [Date Key]) =  format(cast(d.[EFFECTIVE_FROM] as datetime),'yyyyMMdd')

			LEFT JOIN (SELECT DISTINCT [DATE_WID] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] where  [TYPE]<>'TH M.D.K') LO ON 
			left([Date Key],6)+'01' = LO.[DATE_WID] 

			WHERE [Date Key] >= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01') and [Vendor Code] = ''
			and LO.[DATE_WID] is null
			group by c.[CONTRACT_TYPE_NAME],left([Date Key],6)+'01',format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01'),a.[po number]

			union all
			select 1 [TYPE],a.[po number] [PO_NUMBER],NULL [CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],left([Date Key],6)+'01' [DATE],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01') [PAYMENT_DATE],sum(a.[FOB Order Amount]) [PAYMENT_AMOUNT]
			from
			[DWH].[VW_MRP_SALES_ORDER_F_BK] A
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[Contract Type Key] = c.[row_wid] and trim(c.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng gia công xuất khẩu')
			join [DWH].[VW_MRP_CUSTOMER_D] e on a.[Customer Key] = e.[Customer Key]
			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] D ON  e.[Customer Code] LIKE CONCAT('%',D.[CUSTOMER],'%') 
			and d.[LOAI_HINH] = 'GC MAY XK'  
			and
			(select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'GC MAY XK' and e.[Customer Code] LIKE CONCAT('%',[CUSTOMER],'%')  and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= [Date Key]) =  format(cast(d.[EFFECTIVE_FROM] as datetime),'yyyyMMdd')

			LEFT JOIN (SELECT DISTINCT [DATE_WID] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] where  [TYPE]<>'TH M.D.K') LO ON 
			left([Date Key],6)+'01' = LO.[DATE_WID] 

			WHERE [Date Key] >= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01') and [Vendor Code] = ''
			and LO.[DATE_WID] is null
			group by c.[CONTRACT_TYPE_NAME],left([Date Key],6)+'01',format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01'),a.[po number]
            ) A;
GO
/****** Object:  View [DWH].[VW_CF_BANK_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_CF_BANK_D]
AS SELECT 
[ROW_WID]
      ,[BANK]
      ,[W_DELETE_FLG]
      ,[W_INTEGRATION_ID]
      ,[W_VERSION_PERIOD]
      ,[W_EFFECTIVE_FROM_DT]
      ,[W_EFFECTIVE_TO_DT]
      ,[W_CURRENT_FLG]
      ,[W_INSERT_DT]
      ,[W_UPDATE_DT]
      ,[W_DATASOURCE_NUM_ID]
      ,[W_BATCH_ID]
  FROM [DWH].[W_CF_BANK_D];
GO
/****** Object:  View [DWH].[VW_CF_CURRENCY_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_CF_CURRENCY_D]
AS SELECT   [ROW_WID]
      ,[CURRENCY]
      ,[W_DELETE_FLG]
      ,[W_INTEGRATION_ID]
      ,[W_VERSION_PERIOD]
      ,[W_EFFECTIVE_FROM_DT]
      ,[W_EFFECTIVE_TO_DT]
      ,[W_CURRENT_FLG]
      ,[W_INSERT_DT]
      ,[W_UPDATE_DT]
      ,[W_DATASOURCE_NUM_ID]
      ,[W_BATCH_ID]
  FROM [DWH].[W_CF_CURRENCY_D];
GO
/****** Object:  View [DWH].[VW_CF_DAILY_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_CF_DAILY_F] AS SELECT a.[DATE_WID]
      ,a.[BANK_WID]
      ,a.[CURRENCY_WID]
	  ,b.[STT]
      ,a.[TARGETS]
      ,a.[TOTAL(VND)]
      ,a.[BANK]
      ,a.[CURRENCY]
      ,a.[AMOUNT]
from [DWH].[W_CF_DAILY_F] a 
join (select min(stt) stt,targets from [DWH].[W_CF_DAILY_F] group by targets) b on a.targets = b.targets;
GO
/****** Object:  View [DWH].[VW_CF_TRX_MRP_SALES_INVOICE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_CF_TRX_MRP_SALES_INVOICE_F] AS SELECT *
            FROM
            (
       
			--
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID]  [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_1ST],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_1ST]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_1ST]/100 <> 0  and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID]  [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_2ND],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_2ND]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_2ND]/100 <> 0 and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID]  [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_3RD],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_3RD]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_3RD]/100 <> 0 and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID]  [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_4TH],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_4TH]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_4TH]/100 <> 0 and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID]  [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_5TH],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_5TH]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_5TH]/100 <> 0 and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
            ) A;
GO
/****** Object:  View [DWH].[VW_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] AS SELECT 
				 format(DATEADD(MONTH,[PAYMENT_TERM]/30,try_cast(STR([DATE_WID]) as datetime)),'yyyyMM01')  [DATE_WID],
				A.[CUSTOMER] [CUSTOMER_CODE],
				[AMT],
				[W_DATASOURCE_NUM_ID]
			from [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] A

			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] C ON A.[CUSTOMER] like concat('%',C.[CUSTOMER],'%');
GO
/****** Object:  View [DWH].[VW_HAR_DISCOUNT_Dim]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_DISCOUNT_Dim] AS SELECT
	a.[ROW_WID] [Discount Key],
	a.[CODE] [Discount Code],

		b.[Discount Name],
		
		[STATUS] [Discount Status],
		[STARTS_AT] [Discount Start Date],
		[ENDS_AT] [Discount End Date],
		[DISCOUNT_TYPE] [Discount Type],
		[MINIMUM_ORDER_AMOUNT] [Minimum Order Amount],
		[TIMES_USED] [Times Used]
 FROM [DWH].[W_HAR_DISCOUNT_D] A
 LEFT JOIN 
	(SELECT [ROW_WID],
	[CODE] [Discount Code],
	'Birthday Discount' [Discount Name]
	FROM [DWH].[W_HAR_DISCOUNT_D] 
	WHERE [CODE] LIKE 'SN%') b
	on a.[ROW_WID] = b.[ROW_WID];
GO
/****** Object:  View [DWH].[VW_HAR_PRODUCT_Dim]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_PRODUCT_Dim] AS with cte as
(
SELECT 
	DISTINCT A.[ROW_WID] [Product Key], --Variant Key--
	A.[BARCODE] [Barcode],
	A.[PRODUCT_ID] [Product Id],

	CASE WHEN M.[PARENT_SKUS] IS NULL THEN 'Other'
		ELSE M.[PARENT_SKUS] 
		END AS [Parent SKU],

	substring(A.[SKU],1,len(A.[SKU])-3) AS [Parent SKUs + Color],

	A.[SKU] [SKU],

	CASE WHEN TRIM(M.[STYLE]) IS NULL OR TRIM(M.[STYLE]) = '' 
		OR TRIM(M.[STYLE]) = 'nan' 
			THEN 'Other'
		ELSE TRIM(M.[STYLE]) 
		END AS [Style],


	CASE WHEN TRIM(M.[LINE]) = '-' OR TRIM(M.[LINE]) IS NULL 
		OR TRIM(M.[LINE]) = '' OR TRIM(M.[LINE]) = 'nan' 
			THEN 'Other'
		ELSE TRIM(M.[LINE]) 
		END AS [Line],

	CASE WHEN TRIM(M.[SEASON]) = '-' THEN 'Other'
		WHEN TRIM(M.[SEASON]) IS NULL THEN 'Other'
		ELSE TRIM(M.[SEASON]) 
		END AS [Season],

	M.[YEAR] [Product Year],

	CASE WHEN TRIM(M.[COLOR_NAME]) = '-' OR TRIM(M.[COLOR_NAME]) IS NULL 
		OR TRIM(M.[COLOR_NAME]) = 'nan' THEN 'Other'
		ELSE TRIM(UPPER(M.[COLOR_NAME])) 
		END AS [Color],

	CASE WHEN TRIM(M.[COLORGROUP]) = '-' OR TRIM(M.[COLORGROUP]) IS NULL 
		OR TRIM(M.[COLORGROUP]) = 'nan' THEN 'Other'
		ELSE TRIM(UPPER(M.[COLORGROUP])) 
		END AS [Color Group],
	
	ISNULL(TRIM(M.[SIZE]),'Other') AS [Size],

    CASE WHEN M.[SIZE] IS NULL OR M.[SIZE] = '' THEN 'Other'
		WHEN TRY_CONVERT(integer, M.[SIZE]) IS NULL THEN N'Người lớn'  
		ELSE N'Trẻ em'
		END AS [Age Group],


	CASE when B.[PRODUCT_TYPE] = N'Túi Canvas' OR B.[PRODUCT_TYPE] = N'Túi giấy'
		OR B.[PRODUCT_TYPE] = N'Túi Poly' OR B.[PRODUCT_TYPE] = N'Khẩu trang' 
			THEN 'Other'
	
		WHEN M.[GENDER] = '-' OR  M.[GENDER] IS NULL 
		OR M.[GENDER] = '' OR  M.[GENDER] = 'nan' 
			THEN 'Unisex'
		ELSE M.[GENDER] 
		END AS [Gender],
	
	ISNULL(TRIM(M.[SIHOUETTE]),'Other') AS [Sihouette],
	B.[TITLE] [Product Name],
	B.[PRODUCT_TYPE] [Product Type],
	
	CASE WHEN TRIM(M.[CATEGORY]) IS NULL 
		OR TRIM(M.[CATEGORY]) = '' OR TRIM(M.[CATEGORY]) = 'nan' 
			THEN 'Other'
		ELSE TRIM(M.[CATEGORY]) 
		END AS [Product Category],

	CASE WHEN TRIM(M.[SUBCATE]) IS NULL 
		OR TRIM(M.[SUBCATE]) = '' OR TRIM(M.[SUBCATE]) = 'nan' 
			THEN 'Other'
		ELSE TRIM(M.[SUBCATE]) 
		END AS [Product Subcategory],

	A.[PRICE] [Retail Price],
	M.[ORG_PRICE] [Original Price],
	M.[SELLING_PRICE] [Selling Price],
	CASE WHEN M.[ORG_PRICE] = M.[SELLING_PRICE] THEN N'Loại SP lợi nhuận'
		WHEN M.[ORG_PRICE] > M.[SELLING_PRICE] THEN N'Hàng thu hút' 
		ELSE 'Other'
	END AS [Product Note],
	C.[SRC] [Product Image]

  FROM [DWH].[W_HAR_VARIANTS_D] A
  LEFT JOIN [DWH].[W_HAR_PRODUCTS_D] B ON A.[PRODUCT_WID] = B.ROW_WID
  LEFT JOIN [DWH].[W_HAR_IMAGES_D] C ON A.[IMAGE_WID] = C.ROW_WID
  LEFT JOIN [DWH].[W_HAR_COLLECTS_D] D ON A.[PRODUCT_WID] = D.[PRODUCT_WID]
  LEFT JOIN [DWH].[W_MDK_PRODUCT_MAPPING_D] M ON A.[PRODUCT_MAPPING_WID] = M.[ROW_WID]



  UNION
  SELECT
	0 [Product Key], --Variant Key--
	NULL [Barcode],
	NULL [Product Id],
	NULL [Parent SKU],
	NULL [Parent SKUs + Color],
	NULL [SKU],
	'Other' [Style],
	'Other' [Line],
	'Other' [Season],
	NULL [Product Year],
	'Other' [Color],
	'Other' [Color Group],
	'Other' AS [Size],
	'Other' [Age Group],
	'Unisex' [Gender],
	'Other' [Sihouette],
	'Other' [Product Name],
	'Other'  [Product Type],
	'Other'  [Product Category],
	'Other'  [Product Subcategory],
	0 [Retail Price],
	0 [Original Price],
	0 [Selling Price],
	'Other' [Product Note],
	'Other' [Product Image]
)

select * 
	, 
	concat((case when right(Season, 2) = '21' then 4
			when right(Season, 2) = '20' then 3
			when right(Season, 2) = '19' then 2
			when right(Season, 2) = '18' then 1
			else 0 end)
			,
		(case when left(season, 3) = 'SUM' then 7
			when left(season, 3) = 'SPR' then 6
			when left(season, 3) = 'FAL' then 5
			when left(season, 3) = 'HOL' then 4
			when left(season, 3) = 'ATR' then 3
			when left(season, 3) = 'HOR' then 2
			when left(season, 4) = 'MINI' then 1
			else 0 end))

			as [Season DECS]

			
from cte;
GO
/****** Object:  View [DWH].[VW_HAR_PROMOTION_Dim]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_PROMOTION_Dim]
AS SELECT
	[ROW_WID] [Promotion Key],
	[ID] [Promotion Code],
		[NAME] [Promotion Name],
		[DISCOUNT_TYPE] [Discount Type],
		[STATUS] [Promotion Status],
		[STARTS_AT] [Promotion Start Date],
		[ENDS_AT] [Promotion End Date]
 FROM [DWH].[W_HAR_PROMOTION_D];
GO
/****** Object:  View [DWH].[VW_HAR_USER_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_HAR_USER_D]
AS SELECT 
	[ROW_WID] [User Key],
	[ACCOUNT_OWNER] [Account Owner],
	[BIO] [Bio],
	[EMAIL] [Email],
	[FIRST_NAME] [First Name],
	[ID] [Id],
	[IM] [Im],
	[LAST_NAME] [Last Name],
	[PERMISSIONS] [Permissions],
	[PHONE] [Phone],
	[RECEIVE_ANNOUNCEMENTS] [Receive Announcements],
	[URL] [Url],
	[USER_TYPE] [User Type]
  FROM [DWH].[W_HAR_USERS_D];
GO
/****** Object:  View [DWH].[VW_LAC_AP_BALANCE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_AP_BALANCE_F] AS select DATE_WID,INV_RECID,[INV_TRANSNO] [TRANSNO], SUPPLIER_WID, ACCOUNT_WID, INVOICE, INVOICE_DATE, SUPPLIER_CODE, VENDOR_GROUP, ACCOUNTID, CURRENCYID, PAYMENT_METHOD, 
	case when DUE_DATE is null then INVOICE_DATE else DUE_DATE end DUE_DATE,
	min(opening_AMOUNT2) AP_OPENING, min(opening_AMOUNT2) + sum(AP_AMOUNT2) AP_INVOICE_AMT, sum(PAID_AMOUNT2) AP_PAID_AMT, max(OUSTANDING_AMOUNT2) AP_OUTSTANDING
from DWH.W_LAC_AP_BALANCE_FINAL_F
where DATE_WID >= 20210501 group by DATE_WID, SUPPLIER_WID, ACCOUNT_WID, INVOICE, INVOICE_DATE, SUPPLIER_CODE, VENDOR_GROUP, ACCOUNTID, CURRENCYID, PAYMENT_METHOD, DUE_DATE,INV_RECID,[INV_TRANSNO];
GO
/****** Object:  View [DWH].[VW_LAC_AR_BALANCE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_AR_BALANCE_F] AS select DATE_WID,INV_RECID,[INV_TRANSNO] [TRANSNO], CUSTOMER_WID, ACCOUNT_WID, INVOICE, INVOICE_DATE, CUSTOMER_CODE, CUSTOMER_GROUP, ACCOUNTID, CURRENCYID, PAYMENT_METHOD, 
	case when DUE_DATE is null then INVOICE_DATE else DUE_DATE end DUE_DATE , 
	min(opening_AMOUNT2) AR_OPENING, min(opening_AMOUNT2) + sum(AR_AMOUNT2) AR_INVOICE_AMT, sum(PAID_AMOUNT2) AR_PAID_AMT, max(OUSTANDING_AMOUNT2) AR_OUTSTANDING
from DWH.W_LAC_AR_BALANCE_FINAL_F
where DATE_WID >= 20210501 group by DATE_WID, CUSTOMER_WID, ACCOUNT_WID, INVOICE, INVOICE_DATE, CUSTOMER_CODE, CUSTOMER_GROUP, ACCOUNTID, CURRENCYID, PAYMENT_METHOD, 
	DUE_DATE,INV_RECID,[INV_TRANSNO];
GO
/****** Object:  View [DWH].[VW_LAC_CF_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_CF_D] AS SELECT [ROW_WID] [Row Wid],
		(select min(stt) from [DWH].[W_LAC_CF_D] l1 where isnull(l1.[LV1_CODE], '') = isnull(a.[LV1_CODE], '') and l1.[REPORT_VIEW]=a.[REPORT_VIEW]) [Lv1 Sequence],
		(select min(stt) from [DWH].[W_LAC_CF_D] l2 where isnull(l2.[LV2_CODE], '') = isnull(a.[LV2_CODE], '') and (case when l2.[LV2_CODE] is null then '' else l2.[REPORT_VIEW] end)=(case when l2.[LV2_CODE] is null then '' else a.[REPORT_VIEW] end)) [Lv2 Sequence],
		(select min(stt) from [DWH].[W_LAC_CF_D] l3 where isnull(l3.[LV3_CODE], '') = isnull(a.[LV3_CODE], '') and (case when l3.[LV3_CODE] is null then '' else l3.[REPORT_VIEW] end)=(case when l3.[LV3_CODE] is null then '' else a.[REPORT_VIEW] end)) [Lv3 Sequence],
		(select min(stt) from [DWH].[W_LAC_CF_D] l4 where isnull(l4.[LV4_CODE], '') = isnull(a.[LV4_CODE], '') and (case when l4.[LV4_CODE] is null then '' else l4.[REPORT_VIEW] end)=(case when l4.[LV4_CODE] is null then '' else a.[REPORT_VIEW] end)) [Lv4 Sequence],
		(select min(stt) from [DWH].[W_LAC_CF_D] l5 where isnull(l5.[LV5_CODE], '') = isnull(a.[LV5_CODE], '') and (case when l5.[LV5_CODE] is null then '' else l5.[REPORT_VIEW] end)=(case when l5.[LV5_CODE] is null then '' else a.[REPORT_VIEW] end)) [Lv5 Sequence],
	   (select min(stt) from [DWH].[W_LAC_CF_D] b where isnull(COALESCE(b.LV5_CODE,b.[LV4_CODE],b.[LV3_CODE],b.[LV2_CODE],b.[LV1_CODE]),'') = isnull(COALESCE(a.LV5_CODE,a.[LV4_CODE],a.[LV3_CODE],a.[LV2_CODE],a.[LV1_CODE]),'') and b.[REPORT_VIEW]=a.[REPORT_VIEW]) [Stt],
	   [REPORT_VIEW] [Report View],
	   [LV1_CODE] [Lv1 Code],
	   concat([LV1_CODE],' ',[LV1_NAME]) [Lv1 Name],
	   [LV2_CODE] [Lv2 Code],
	   concat([LV2_CODE],' ',[LV2_NAME]) [Lv2 Name],
	   [LV3_CODE] [Lv3 Code],
	   concat([LV3_CODE],' ',[LV3_NAME]) [Lv3 Name],
	   [LV4_CODE] [Lv4 Code],
	   concat([LV4_CODE],' ',[LV4_NAME]) [Lv4 Name],
	   [LV5_CODE] [Lv5 Code],
	   concat([LV5_CODE],' ',[LV5_NAME]) [Lv5 Name],
	   COALESCE(LV5_CODE,[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE]) [LV0],
	   Isshow
  FROM [DWH].[W_LAC_CF_D] a
  where a.Isshow is null;
GO
/****** Object:  View [DWH].[VW_LAC_CF_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_CF_F]
AS SELECT [DATE_WID]
      ,[RL_WID]
      ,[STT]
      ,[REPORT_VIEW]
      ,[LV1_CODE]
      ,[LV2_CODE]
      ,[LV3_CODE]
      ,[LV4_CODE]
      ,[LV5_CODE]
	  ,COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE]) [LV0_CODE]
      ,[AMT]
      ,[W_DELETE_FLG]
      ,[W_INTEGRATION_ID]
      ,[W_INSERT_DT]
      ,[W_UPDATE_DT]
      ,[W_DATASOURCE_NUM_ID]
      ,[W_BATCH_ID]
  FROM [DWH].[W_LAC_CF_F];
GO
/****** Object:  View [DWH].[VW_LAC_CF_MONTHLY_FORECAST_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_CF_MONTHLY_FORECAST_F] AS SELECT [DATE_WID]
          ,[RL_WID]
          ,[STT]
          ,[REPORT_VIEW]
          ,[LV1_CODE]
          ,[LV2_CODE]
          ,[LV3_CODE]
          ,[LV4_CODE]
          ,[LV5_CODE]
          ,[LV0_CODE]
          ,[AMT] as [Amt]
      ,[W_DELETE_FLG]
      ,[W_INTEGRATION_ID]
      ,[W_VERSION_PERIOD]
      ,[W_INSERT_DT]
      ,[W_UPDATE_DT]
      ,[W_DATASOURCE_NUM_ID]
      ,[W_BATCH_ID]
  FROM [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] where [AMT] <> 0;
GO
/****** Object:  View [DWH].[VW_LAC_CF_WEEKLY_PLAN_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_CF_WEEKLY_PLAN_F] AS SELECT [DATE_WID] as [Date Wid],
		[WEEKLY_REPORTING_LINE_KEY] as [RL_WID],
		[WEEK_WID] as [Week],
		[NO] as [No],
		[STT] as [Stt],
		[LV1_CODE] as [Lv1 Code],
		[LV2_CODE] as [Lv2 Code],
		[LV3_CODE] as [Lv3 Code],
		COALESCE([LV3_CODE],[LV2_CODE],[LV1_CODE]) as [Lv0 Code],
		[AMT] as [Amt]
  FROM [DWH].[W_LAC_CF_WEEKLY_PLAN_F]
  where [DATE_WID] is not null and [WEEK_WID] <> '0' and [LV1_CODE] is not null
		and [WEEK_WID] >= case when cast(datepart(week, getdate())-1 as bigint) > 0 and cast(datepart(week, getdate())-1 as bigint) < 10 then ('W0' + cast(datepart(week, getdate())-1 as varchar(10)))
						when cast(datepart(week, getdate())-1 as bigint) >= 10 then ('W' + cast(datepart(week, getdate())-1 as varchar(10)))
						end
		and [WEEK_WID] <= case when cast(datepart(week, getdate())+7 as bigint) > 0 and cast(datepart(week, getdate())+7 as bigint) < 10 then ('W0' + cast(datepart(week, getdate())+7 as varchar(10)))
						when cast(datepart(week, getdate())+7 as bigint) >= 10 then ('W' + cast(datepart(week, getdate())+7 as varchar(10)))
						end;
GO
/****** Object:  View [DWH].[VW_LAC_CF_WEEKLY_REPORTING_LINE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_CF_WEEKLY_REPORTING_LINE_D]
AS SELECT [ROW_WID] [Row Wid],
	   (select min(stt) from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] b where isnull(b.[LV1_CODE],'') = isnull(a.[LV1_CODE],'')) [Stt],
	   [LV1_CODE] [Lv1 Code],
	   concat([LV1_CODE],' ',[LV1_NAME]) [Lv1 Name],
	   [LV2_CODE] [Lv2 Code],
	   concat([LV2_CODE],' ',[LV2_NAME]) [Lv2 Name],
	   [LV3_CODE] [Lv3 Code],
	   concat([LV3_CODE],' ',[LV3_NAME]) [Lv3 Name]

  FROM [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] a;
GO
/****** Object:  View [DWH].[VW_LAC_CUSTOMER_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_CUSTOMER_D]
AS select A.ROW_WID CUSTOMER_WID, A.CUSTOMER_CODE, A.CUSTOMER_NAME, B.[Customer Group] CUSTOMER_GROUP
from DWH.W_LAC_CUSTOMER_D A
left join STG.W_EXCEL_CF_AR_AP_MAPPING_DS B on A.CUSTOMER_CODE = B.[Customer Code];
GO
/****** Object:  View [DWH].[VW_LAC_GL_ACCOUNT_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_GL_ACCOUNT_D]
AS select ROW_WID ACCOUNT_WID, ACCOUNT_CODE, ACCOUNT_NAME, ACCOUNT_TYPE
from DWH.W_LAC_GL_ACCOUNT_D;
GO
/****** Object:  View [DWH].[VW_LAC_GL_DATA_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_GL_DATA_F]
AS select [DATE_WID]
      ,[RECID]
      ,[ACCOUNTID]
      ,[POSTEDON]
      ,[TRANSDATE]
      ,[TRANSTYPE]
      ,[TRANSNO]
      ,[MEMO]
      ,[CURRENCYID]
      ,[EXCHANGERATE]
      ,[CREDITING]
      ,[OFFSETACCTID]
      ,[DIM1]
      ,[DIM2]
      ,[DIM3]
      ,[TRANSAMT]
      ,[TRANSAMT2]
      ,[OBJECTID]
      ,[OBJECTTYPE]
      ,[PROJECTID]
      ,[OBJECTNAME]
      ,[SOURCE]
      ,[CREATED_DATE]
	from [DWH].[W_LAC_GL_DATA_F]
	where [W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_LAC_SUPPLIER_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_LAC_SUPPLIER_D]
AS select ROW_WID SUPPLIER_WID, SUPPLIER_CODE, SUPPLIER_NAME, SUPPLIER_GROUP
from W_LAC_SUPPLIER_D;
GO
/****** Object:  View [DWH].[VW_MDK_AOP_SALES_Fact]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MDK_AOP_SALES_Fact]
AS SELECT
 ISNULL(A.DATE_WID,0) [Date Key]
      ,A.[CHANNEL_WID] [Store Key] 
      ,A.[QUANTITY] [AOP Quantity]
      ,A.[AMOUNT] [AOP Amount]
	
  FROM [DWH].[W_MDK_AOP_SALE_F] A
  where [W_DELETE_FLG] = 'N';
GO
/****** Object:  View [DWH].[VW_MDK_SALES_TARGET_Fact]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MDK_SALES_TARGET_Fact]
AS SELECT
 ISNULL(A.DATE_WID,0) [Date Key]
 
      ,A.[CHANNEL_WID] [Store Key] 
      ,A.[QUANTITY] [Target Quantity]
      ,A.[AMOUNT] [Target Amount]
	
  FROM [DWH].[W_MDK_SALE_TARGET_F] A
where [W_DELETE_FLG] = 'N';
GO
/****** Object:  View [DWH].[VW_MDK_UOM_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MDK_UOM_D]
AS SELECT DISTINCT isnull(UOM, 'EA') AS UOM
	FROM [DWH].[W_MDK_SALE_TARGET_F]
 
 UNION
	SELECT DISTINCT isnull([CURRENCY], 'VND') AS UOM	
	FROM [DWH].[W_MDK_SALE_TARGET_F];
GO
/****** Object:  View [DWH].[VW_MRP_DAILY_WORKING_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_DAILY_WORKING_F] AS SELECT 
		A.[DATE_WID] [Date Key],
	   A.[PRODUCTION_DATE_WID] [Production Date Key]
      ,A.[DEPARTMENT_WID] [Production Line Key]
      ,F.[ROW_WID] [Factory Key]
      ,A.[MAKING_EMPLOYEE_COUNT] [Making Employee Count]
      ,A.[ASSISTANT_EMPLOYEE_COUNT] [Assistant Employee Count]
      ,A.[MAKING_EMPLOYEE_PRESENT] [Making Employee Present]
      ,A.[ASSISTANT_EMPLOYEE_PRESENT] [Assistant Employee Present]
      ,A.[WORD_DAY_OF_MAKING] [Work Day of Making]
      ,A.[WORD_DAY_OF_ASSISTANT] [Work Day of Assistant]
      ,A.[OT_OF_MAKING] [OT of Making]
      ,A.[OT_OF_ASSISTANT] [OT of Assistant]
    
  FROM [DWH].[W_MRP_TGT_PRODUCTION_TARGET_DAY_F] A
  LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] F
  ON A.[FACTORY_CODE] = F.[FACTORY_CODE]
  where A.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_INVENTORY_PRODUCT_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_INVENTORY_PRODUCT_F] AS SELECT 
		A.[DATE_WID] [Date Key]

      ,A.[ITEM_WID] [Item Key]
      ,A.[DEPARTMENT_WID] [Production Line Key]
	  ,F.[ROW_WID] [Factory Key]
	 ,A.[PO_ID] [PO Id]
      ,A.[QUANTITY] [Quantity]
      ,A.[FORMULA_CODE] [Formula Code]
	  ,b.[CUSTOMER_WID] [Customer Key]


	
    
  FROM [DWH].[W_MRP_TRX_INVENTORY_PRODUCT_F] A
  LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] F
  ON A.[FACTORY_CODE] = F.[FACTORY_CODE]
  LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] B
  ON A.[ITEM_WID] = B.[ROW_WID]
  
  where A.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_PAYMENT_TERM_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PAYMENT_TERM_D] AS SELECT 
	[ROW_WID] [Payment Term Key],
	[PAYMENT_TERM_CODE] [Payment Term Code],
	[PAYMENT_TERM_NAME] [Payment Term Name],
	[DESCRIPTION] [Description],
	[NUMBER_OF_PAYMENT] [Number Of Payment],
	[PAYMENT_SCHEDULE_1ST] [Payment Schedule 1st],
	[PAYMENT_SCHEDULE_2ND] [Payment Schedule 2nd],
	[PAYMENT_SCHEDULE_3RD] [Payment Schedule 3rd],
	[PAYMENT_SCHEDULE_4TH] [Payment Schedule 4th],
	[PAYMENT_SCHEDULE_5TH] [Payment Schedule 5th],
	[PERCENTAGE_OF_PS_1ST] [Percentage Of Ps 1st],
	[PERCENTAGE_OF_PS_2ND] [Percentage Of Ps 2nd],
	[PERCENTAGE_OF_PS_3RD] [Percentage Of Ps 3rd],
	[PERCENTAGE_OF_PS_4TH] [Percentage Of Ps 4th],
	[PERCENTAGE_OF_PS_5TH] [Percentage Of Ps 5th],
	[CREATED_DATE] [Created Date],
	[SOURCE] [Source]
  FROM [DWH].[W_MRP_MD_PAYMENT_TERM_D] 
  where [W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_PO_Key_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PO_Key_D]
AS with cte as
(
SELECT 
        a.[PO_ID] [PO Id] 
		,a.[PO_NUMBER]  [PO Number]
		,concat( a.[PO_ID],'-',a.[PO_NUMBER]) as [PO Key]
		
		, row_number() over ( 
		partition by 
		a.[PO_ID] 
		,a.[PO_NUMBER] 
		,concat( a.[PO_ID], a.[PO_NUMBER])
	
		order by 
		a.[PO_ID] 
		,a.[PO_NUMBER] 
		,concat( a.[PO_ID], a.[PO_NUMBER])
		
		) RowNo
	 from [DWH].[W_MRP_TRX_SALES_ORDER_F] a 
	 
	 where [W_DELETE_FLG] = '0'
	)

select	[PO Id] 
		,[PO Key]
		, [PO Number]
		
from cte where RowNo = 1;
GO
/****** Object:  View [DWH].[VW_MRP_PO_NUMBER_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PO_NUMBER_D] AS with cte as
(
SELECT 
        a.[PO_ID] [PO Id] ,
		a.[PO_NUMBER]  [PO Number],
		concat( a.[PO_ID],'-',a.[PO_NUMBER]) as [PO Key],
		a.[PO_NUMBER_REF] AS [PO Number Ref],
		a.[PO_NUMBER] + '-' + A.[COUNTRY] [PO-Country]
		,a.[PO_Batch] [PO Batch]
		,a.[Country] [Country]
		,a.[TPG_Delivery_Plan_Date] [TPG Delivery Plan Date]
		, row_number() over ( 
		partition by 
		a.[PO_ID] 
		,a.[PO_NUMBER] 
		,concat( a.[PO_ID], a.[PO_NUMBER])
		,a.[PO_NUMBER] + '-' + A.[COUNTRY] 
		,a.[PO_Batch]
		,a.[TPG_Delivery_Plan_Date]
		order by 
		a.[PO_ID] 
		,a.[PO_NUMBER] 
		,concat( a.[PO_ID], a.[PO_NUMBER])
		,a.[PO_NUMBER] + '-' + A.[COUNTRY] 
		,a.[PO_Batch]
		,a.[TPG_Delivery_Plan_Date]
		) RowNo
	 from [DWH].[W_MRP_TRX_SALES_ORDER_F] a 
	 
	 where [W_DELETE_FLG] = '0'
	)

select	[PO Id] 
		,[PO Key]
		, [PO Number]
		,[PO Number Ref]
		, [PO-Country]
		, [Country]
		, [PO Batch]
		, [TPG Delivery Plan Date] 
from cte where RowNo = 1;
GO
/****** Object:  View [DWH].[VW_MRP_PROCESSING_PRICE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PROCESSING_PRICE_D] AS select * 
,[Price Cm 3 New]+[Price P 3 New]+[Price T 3 New]+[Price W3 New]+[Price E 3 New]+[Price In 3 New] [Price Total 3 New]
from
(
SELECT 
	[ROW_WID] [Processing Price Key],
	[ITEM_WID] [Item Key],
	[ITEM_ID] [Item Id],
	[COLOR] [Color],
	[SIZE] [Size],
	[PRICE_CM_2] [Price Cm 2],
	[PRICE_P_2] [Price P 2],
	[PRICE_T_2] [Price T 2],
	[PRICE_W_2] [Price W 2],
	[PRICE_E_2] [Price E 2],
	[PRICE_IN_2] [Price In 2],
	[PRICE_OTHER_2] [Price Other 2],
	[PRICE_TOTAL_2] [Price Total 2],
	[PRICE_CM_3] [Price Cm 3],
	[PRICE_P_3] [Price P 3],
	[PRICE_T_3] [Price T 3],
	[PRICE_W3] [Price W3],
	[PRICE_E_3] [Price E 3],
	[PRICE_IN_3] [Price In 3],
	[PRICE_OTHER_3] [Price Other 3],
	[PRICE_TOTAL_3] [Price Total 3],
	CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_CM_2] ELSE [PRICE_CM_3] END [Price Cm 3 New],
	CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_P_2] ELSE [PRICE_P_3] END [Price P 3 New],
	CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_T_2] ELSE [PRICE_T_3] END [Price T 3 New],
	CASE WHEN [PRICE_W3] =0 THEN [PRICE_W_2] ELSE [PRICE_W3] END [Price W3 New],
	CASE WHEN [PRICE_E_3] =0 THEN [PRICE_E_2] ELSE [PRICE_E_3] END [Price E 3 New],
	CASE WHEN [PRICE_IN_3] =0 THEN [PRICE_IN_2] ELSE [PRICE_IN_3] END [Price In 3 New],
	CASE WHEN [PRICE_CM_3]+[PRICE_P_3]+[PRICE_T_3]+[PRICE_OTHER_3] =0 THEN [PRICE_OTHER_2] ELSE [PRICE_OTHER_3] END [Price Other 3 New]
  FROM [DWH].[W_MRP_MD_PROCESSING_PRICE_D]) a;
GO
/****** Object:  View [DWH].[VW_MRP_PRODUCT_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PRODUCT_D] AS SELECT 
	D.[ROW_WID] [Item Key],
	D.[ITEM_ID] [Item Id],
	D.[ITEM_ID_REF] [Item Id Ref],
	D.[ITEM_CODE] [Item Code],
	D.[ITEM_NAME_VN] [Item Name Vn],
	D.[ITEM_NAME_EN] [Item Name En],
	D.[ITEM_NAME_EX] [Item Name Ex],
	D.[SUBCATEGORY_CODE] [Subcategory Code],
	case when D.[SUBCATEGORY_NAME] = N'AÙO KHOAÙC NAM' then N'ÁO KHOÁC NAM'
		when D.[SUBCATEGORY_NAME] = N'AÙO KHOAÙC NÖÕ' then N'ÁO KHOÁC NỮ'
		when D.[SUBCATEGORY_NAME] = N'AÙO KHOAÙC TAY DAØI THUN TREÛ EM' THEN N'ÁO KHOÁC TAY DÀI THUN TRẺ EM'  
		when D.[SUBCATEGORY_NAME] = N'AÙO KHOAÙC TAY DAØI THUN TREÛ EM GAÙI' THEN N'ÁO KHOÁC TAY DÀI THUN TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'AÙO KHOAÙC TAY DAØI THUN TREÛ EM TRAI' THEN N'ÁO KHOÁC TAY DÀI THUN TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'AÙO KHOAÙC TREÛ EM GAÙI' THEN N'ÁO KHOÁC TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'AÙO KHOAÙC TREÛ EM TRAI' THEN N'ÁO KHOÁC TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'AÙO KIEÅU TREÛ EM GAÙI' THEN N'ÁO KIỂU TRẺ EM GÁI'
		
		when D.[SUBCATEGORY_NAME] = N'AÙO SÔ MI NAM' THEN N'ÁO SƠ MI NAM' 
		when D.[SUBCATEGORY_NAME] = N'AÙO SÔ MI TREÛ EM TRAI' THEN N'ÁO SƠ MI TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN COÙ NOÙN TREÛ EM GAÙI' THEN N'ÁO THUN CÓ NÓN TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN COÙ NOÙN TREÛ EM TRAI' THEN N'ÁO THUN CÓ NÓN TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN NAM' THEN N'ÁO THUN NAM'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN NGAÉN NGÖÔØI LÔÙN' THEN N'ÁO THUN NGẮN NGƯỜI LỚN'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN NGAÉN TREÛ EM TRAI' THEN N'ÁO THUN NGẮN TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN NÖÕ' THEN N'ÁO THUN NỮ'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN TAY DAØI COÙ NOÙN TREÛ EM TRAI' THEN N'ÁO THUN TAY DÀI CÓ NÓN TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN TAY DAØI NAM' THEN N'ÁO THUN TAY DÀI NAM'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN TAY DAØI TREÛ EM GAÙI' THEN N'ÁO THUN TAY DÀI TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN TAY DAØI TREÛ EM TRAI' THEN N'ÁO THUN TAY DÀI TRẺ EM TRAI'

		when D.[SUBCATEGORY_NAME] = N'AÙO THUN TREÛ EM GAÙI' THEN N'ÁO THUN TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'AÙO THUN TREÛ EM TRAI' OR D.[SUBCATEGORY_NAME] = 'AO THUN TRE EM TRAI' THEN N'ÁO THUN TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'BOÄ AÙO QUAÀN THUN TREÛ EM GAÙI' THEN N'BỘ ÁO QUẦN THUN TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'BOÄ AÙO QUAÀN THUN TREÛ EM TRAI' THEN N'BỘ ÁO QUẦN THUN TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'Boä ñaàm treû em gaùi' THEN N'Bộ đầm trẻ em gái'
		when D.[SUBCATEGORY_NAME] = N'BOÄ QUAÀN AÙO TREÛ EM GAÙI' THEN N'BỘ QUẦN ÁO TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'BOÄ QUAÀN AÙO TREÛ EM TRAI' THEN N'BỘ QUẦN ÁO TRẺ EM TRAI'

		when D.[SUBCATEGORY_NAME] = N'BOÄ VAÙY TREÛ EM GAÙI' THEN N'BỘ VÁY TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'DOÀ BAÛO HOÄ' OR D.[SUBCATEGORY_NAME] =  N'DỒ BẢO HỘ' THEN N'ĐỒ BẢO HỘ'
		when D.[SUBCATEGORY_NAME] = N'KHAÅU TRANG' THEN N'KHẨU TRANG'
		when D.[SUBCATEGORY_NAME] = N'ÑAÀM NÖÕ' THEN N'ĐẦM NỮ'
		when D.[SUBCATEGORY_NAME] = N'ÑAÀM TREÛ EM GAÙI' THEN N'ĐẦM TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'Ñoàng phuïc aùo' THEN N'Đồng phục áo'
		when D.[SUBCATEGORY_NAME] = N'Ñoàng phuïc giaày' THEN N'Đồng phục giầy'

		when D.[SUBCATEGORY_NAME] = N'QUAÀN DAØI JEAN NAM' THEN N'QUẦN DÀI JEAN NAM'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN DAØI JEAN TREÛ EM GAÙI' THEN N'QUẦN DÀI JEAN TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN DAØI NAM' THEN N'QUẦN DÀI NAM'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN DAØI NÖÕ' THEN N'QUẦN DÀI NỮ'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN DAØI THEÅ THAO NAM' THEN N'QUẦN DÀI THỂ THAO NAM'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN DAØI TREÛ EM GAÙI' THEN N'QUẦN DÀI TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN DAØI TREÛ EM TRAI' THEN N'QUẦN DÀI TRẺ EM TRAI'

		when D.[SUBCATEGORY_NAME] = N'QUAÀN NGAÉN JEAN TREÛ EM GAÙI' THEN N'QUẦN NGẮN JEAN TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN NGAÉN NAM' THEN N'QUẦN NGẮN NAM'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN NGAÉN NÖÕ' THEN N'QUẦN NGẮN NỮ'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN NGAÉN THUN TREÛ EM TRAI' THEN N'QUẦN NGẮN THUN TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN NGAÉN TREÛ EM GAÙI' THEN N'QUẦN NGẮN TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN NGAÉN TREÛ EM TRAI' THEN N'QUẦN NGẮN TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN THEÅ THAO NAM' THEN N'QUẦN THỂ THAO NAM'

		when D.[SUBCATEGORY_NAME] = N'QUAÀN THEÅ THAO TREÛ EM GAÙI' THEN N'QUẦN THỂ THAO TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN THEÅ THAO TREÛ EM TRAI' THEN N'QUẦN THỂ THAO TRẺ EM TRAI'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN YEÁM NÖÕ' THEN N'QUẦN YẾM NỮ'
		when D.[SUBCATEGORY_NAME] = N'QUAÀN YEÁM TREÛ EM GAÙI' THEN N'QUẦN YẾM TRẺ EM GÁI'
		when D.[SUBCATEGORY_NAME] = N'VAÙY NGAÉN NÖÕ' THEN N'VÁY NGẮN NỮ'
		when D.[SUBCATEGORY_NAME] = N'VAÙY NÖÕ' THEN N'VÁY NỮ'
		when D.[SUBCATEGORY_NAME] = N'VAÙY TREÛ EM GAÙI' THEN N'VÁY TRẺ EM GÁI'
		WHEN D.[SUBCATEGORY_NAME] = 'AO THUN TAY DAØI COÙ NOÙN TREÛ EM GAÙI' THEN N'AO THUN TAY DÀI CÓ NÓN TRẺ EM GÁI'

		ELSE D.[SUBCATEGORY_NAME] END AS [Subcategory Name],

	D.[SUBCATEGORY_NAME_EN] [Subcategory Name En],
	D.[CATEGORY_CODE] [Category Code],
	case when D.[CATEGORY_NAME] = N'ĐẦM' THEN N'Đầm'
		when D.[CATEGORY_NAME] = 'KHAU TRANG' or D.[CATEGORY_NAME] =  N'KHẢU TRANG' or D.[CATEGORY_NAME] = N'Mặt hàng khẩu trang'
			then N'Khẩu Trang'
		when D.[CATEGORY_NAME] = N'TÚI XÁCH' then N'Túi Xách'
		when D.[CATEGORY_NAME] = N'VÁY' then N'Váy'
		else D.[CATEGORY_NAME] end as [Category Name],
	D.[CATEGORY_GROUP] [Category Group],
	D.[CLASS] [Class],
	CASE WHEN D.[GENDER] = 'Nöõ' THEN N'Nữ'
		WHEN D.[GENDER] = 'Nam/ Nöõ' THEN N'Nam/Nữ'
		WHEN ISNULL(D.[GENDER],'') = '' THEN N'Nam/Nữ'
	ELSE D.[GENDER] 
	END AS [Gender],
	D.[ITEM_MODEL] AS [Iteam Mode] ,
	D.[COLOR_CODE] [Color],
	D.[SIZE] [Size],
	D.[UOM] [UOM],
	D.[STATUS] [Product Status],
	case when  TRIM(D.[IMAGE_URL]) ='' then '' else 'https://tpgstorageprod.blob.core.windows.net/image/HinhMaHang_SX$/' + lower(TRIM(D.[IMAGE_URL])) end [Image URL]

  FROM [DWH].[W_MRP_MD_PRODUCT_D] D
  where D.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_PRODUCTION_CALENDAR_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PRODUCTION_CALENDAR_D] AS SELECT 
	[ROW_WID] [Production Date Key],
	[DATE_ID] [Date Id],
	[DAY] [Production Date],
	[CALENDAR_TYPE] [Calendar Type],
	[WORKING_HOUR] [Working Hour],
	[HOLIDAY_NAME] [Holiday Name],
	[DEPARTMENT] [Production Line],
	[COMPANY] [Factory Code]

  FROM [DWH].[W_MRP_PRODUCTION_CALENDAR_D]
  where [W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_PRODUCTION_STAGE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PRODUCTION_STAGE_D] AS SELECT 
	[ROW_WID] [Production Stage Key],
	[PRODUCTION_STAGE_CODE] [Production Stage Code],
	[PRODUCTION_STAGE_NAME] [Production Stage Name],
	[DESCRIPTION] [Description],
	[SOURCE] [Source]
  FROM [DWH].[W_MRP_MD_PRODUCTION_STAGE_D]
  where [W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_PRODUCTION_TARGET_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_PRODUCTION_TARGET_F] AS SELECT
		 A.[DATE_WID][Date Key]
		 ,A.[PRODUCTION_DATE_WID] [Production Date Key]
      , A.[DEPARTMENT_WID] [Production Line Key]
      ,F.[ROW_WID] [Factory Key]
      ,A.[AMOUNT_PER_DEPARTMENT] [Amount Per Production Line]
      ,A.[NUMBER_OF_DAY] [Number of Day]
      ,A.[NUMBER_OF_WORKER] [Number of Worker]
	   ,A.[AMOUNT_PER_DAY] [Daily Target]
      ,A.[AMOUNT_PER_MONTH] [Monthly Target]
     
   
  FROM [DWH].[W_MRP_TGT_PRODUCTION_TARGET_MONTH_F] A
  LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] F
  ON A.[FACTORY_CODE] = F.[FACTORY_CODE]
  where a.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_SALES_ORDER_JOURNAL_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_SALES_ORDER_JOURNAL_F] AS SELECT 
		A.[DATE_WID] [Date Key]
		,A.[ITEM_WID] [Item Key]
		,A.[PO_ID] [PO Id]
		,A.[QUANTITY_PCS] [Quantity]
		
   
  FROM [DWH].[W_MRP_TRX_SALES_ORDER_JOURNA_F] A
  where a.[QUANTITY_PCS] > 0 and  a.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_TGT_FACTORY_TARGET_MONTH_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_TGT_FACTORY_TARGET_MONTH_F] AS SELECT 
      A.[DATE_WID] [Date Key]
      ,A.[PRODUCTION_DATE_WID] [Production Date Key]
	   ,F.[ROW_WID] [Factory Key]
      ,A.[ITEM_WID] [Item Key]
      ,A.[DEPARTMENT_WID] [Production Line Key]
     -- ,[PRODUCTION_STAGE_WID]
 
      ,[PRODUCTION_STAGE_CODE] [Production Stage Code]
     
      ,[PLAN_QUANTITY] [Factory Plan Quantity]
      ,[PRICE_CM] [Price CM Factory]
      ,[PRICE_P] [Price P Factory]
      ,[PRICE_T] [Price T Factory]
      ,[PRICE_W] [Price W Factory]
      ,[PRICE_E] [Price E Factory]
      ,[PRICE_PRINT] [Price In Factory]
      ,[PRICE_OTHER] [Price Other Factory]
      ,TRIM([TYPE]) [Type]
  
      ,A.[SOURCE] [Source]

    
  FROM [DWH].[W_MRP_TGT_FACTORY_TAGRET_MONTH_F] A
  LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] F
  ON A.[FACTORY_CODE] = F.[FACTORY_CODE]
  where a.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_TGT_PRODUCTION_TARGET_MONTH_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_TGT_PRODUCTION_TARGET_MONTH_F] AS SELECT 
		 A.[DATE_WID] [Date Key]
      ,A.[PRODUCTION_DATE_WID] [Production Date Key]
      ,A.[DEPARTMENT_WID] [Production Line Key]
      ,F.[ROW_WID] [Factory Key]
      ,[BEP_AMOUNT] [Break Even Target]
      ,[WORKING_TIME_8H] [Working Time 8h]
      ,[AMOUNT_9H] [Amount 9h]
      ,[AMOUNT_9H_X] [Amount 9h X]
	  , Case when [AMOUNT_9H_X] > 0 then 1
	  else 0 end as [Amount 9h X Flag]
      ,[AMOUNT_PER_DEPARTMENT] [Amount Per Production Line]
      ,[AMOUNT_PER_DAY] [Amount Per Day]
      ,[AMOUNT_PER_MONTH] [Amount Per Month]
      ,[NUMBER_OF_DAY] [Number of Day]
      ,[NUMBER_OF_WORKER] [Number of Worker]
    
      ,A.[SOURCE] [Source]

    
  FROM [DWH].[W_MRP_TGT_PRODUCTION_TARGET_MONTH_F] A
  LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] F
  ON A.[FACTORY_CODE] = F.[FACTORY_CODE]
  where a.[W_DELETE_FLG] = '0';
GO
/****** Object:  View [DWH].[VW_MRP_TRX_SALES_ORDER_JOURNA_AGG_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_TRX_SALES_ORDER_JOURNA_AGG_F] AS with cte as
(
SELECT
[CUSTOMER_WID] [Customer Key],
[CUSTOMER_CODE] [Customer Code],
[SNAPSHOT_DATE_WID] [Snapshot Date Key],
[DELIVERY_DATE_WID] [Delivery Date Key],
sum([PLAN_QUANTITY]) [Plan Quantity],
sum([PLAN_AMOUNT]) [Plan Amount],
sum([ACTUAL_QUANTITY]) [Actual Quantity],
sum([ACTUAL_AMOUNT]) [Actual Amount],
sum([REMAINING_QUANTITY]) [Remaining Quantity],
sum([REMAINING_AMOUNT]) [Remaining Amount],
CAST(FORMAT(CAST(CAST([SNAPSHOT_DATE_WID] AS VARCHAR) AS DATE), 'dd MMM yy') as VARCHAR) [Snapshot Date],
'(Ver. ' + CAST(FORMAT(CAST(CAST([SNAPSHOT_DATE_WID] AS VARCHAR) AS DATE), 'dd-MMM-yy') as VARCHAR) + ')' [Snapshot Ver],
FORMAT(CAST(CAST([SNAPSHOT_DATE_WID] AS VARCHAR) AS DATE), 'dd MMM yy') [Snapshot],
CAST(FORMAT(CAST(CAST([DELIVERY_DATE_WID] AS VARCHAR) AS DATE), 'yyyy-MM') as VARCHAR) [Delivery Date]
FROM [DWH].[W_MRP_TRX_SALES_ORDER_JOURNA_AGG_F] 
WHERE [SNAPSHOT_DATE_WID] < CONVERT(VARCHAR, DATEADD(HH, 7, GETDATE()), 112) and  [W_DELETE_FLG] = '0'
group by [CUSTOMER_WID],[SNAPSHOT_DATE_WID],[DELIVERY_DATE_WID],[CUSTOMER_CODE]
)

select *,
	case when Left(a.[Snapshot Date Key], 6) > LEft(a.[Delivery Date Key], 6) then [Actual Quantity]
		else [Plan Quantity] end as [Snapshot Quantity]
	,case when Left(a.[Snapshot Date Key], 6) > LEft(a.[Delivery Date Key], 6) then [Actual Amount]
		else [Plan Amount] end as [Snapshot Amount]

from cte a;
GO
/****** Object:  View [DWH].[VW_MRP_TRX_SALES_ORDER_JOURNA_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_TRX_SALES_ORDER_JOURNA_F]
AS (
SELECT A.[CUSTOMER_WID]
,B.[CUSTOMER_CODE]
,A.[SNAPSHOT_DATE_WID]
,A.[DELIVERY_DATE_WID]
,A.[QUANTITY_PCS]
,A.[TOTAL]
FROM (
SELECT 
      [CUSTOMER_WID]
	  ,[CL_DATE_WID] [SNAPSHOT_DATE_WID]
	  ,LEFT([DATE_WID],6) + '01' [DELIVERY_DATE_WID]
      ,SUM([QUANTITY_PCS]) [QUANTITY_PCS]
      ,SUM([TOTAL])		   [TOTAL]
FROM (
SELECT 
	   A.[DATE_WID]
      ,A.[SNAPSHOT_DATE]
	  ,B.[DATE_WID] [CL_DATE_WID]
      ,A.[ITEM_WID]
      ,A.[CONTRACT_WID]
      ,A.[CUSTOMER_WID]
      ,A.[CREATED_DATE]
      ,A.[ITEM_ID]
      ,A.[PO_ID]
      ,A.[CUSTOMER_DELIVERY_PLAN_DATE]
      ,A.[QUANTITY_PCS]
      ,A.[TOTAL]
      ,A.[SOURCE]
      ,A.[W_DELETE_FLG]
      ,A.[W_INTEGRATION_ID]
      ,A.[W_INSERT_DT]
      ,A.[W_UPDATE_DT]
      ,A.[W_DATASOURCE_NUM_ID]
      ,A.[W_BATCH_ID]
	  ,ROW_NUMBER() OVER(PARTITION BY A.[ITEM_WID],A.[PO_ID],B.[DATE_WID] ORDER BY A.[SNAPSHOT_DATE] DESC) RN
  FROM [DWH].[W_MRP_TRX_SALES_ORDER_JOURNA_F] A JOIN [DWH].[W_CALENDAR_D] B ON A.[SNAPSHOT_DATE] <= B.[DATE_WID] AND B.[DATE_WID]<= FORMAT(DATEADD(YEAR,3,GETDATE()),'yyyyMMdd') ) A WHERE RN = 1  group by [CUSTOMER_WID],[CL_DATE_WID],LEFT([DATE_WID],6)    

  ) A JOIN [DWH].[W_MRP_MD_CUSTOMER_D] B ON A.[CUSTOMER_WID] = B.ROW_WID );
GO
/****** Object:  View [DWH].[VW_MRP_WAREHOUSE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_MRP_WAREHOUSE_D]
AS SELECT 
	[ROW_WID] [Warehouse Key],
	[FACTORY_WID] [Factory Key],
	[WAREHOUSE_CODE] [Warehouse Code],
	[WAREHOUSE_NAME] [Warehouse Name],
	[ADDRESS] [Address],
	[FACTORY_CODE] [Factory Code],
	[CREATED_DATE] [Created Date],
	[SOURCE] [Source]
  FROM [DWH].[W_MRP_MD_WAREHOUSE_D];
GO
/****** Object:  View [DWH].[VW_REFRESH_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_REFRESH_D]
AS select max(CREATED_TS) as [Refresh Date] from [ADF].[ETL_LOG];
GO
/****** Object:  View [DWH].[VW_TIME_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[VW_TIME_D]
AS SELECT [TIME_WID] [Time Key]
      ,[TIME] [Time]
	  ,DATEPART(HOUR, [TIME]) [Hour]
  FROM [DWH].[W_TIME_D];
GO
/****** Object:  View [DWH].[W_MRP_TRX_SALES_ORDER_F_TY]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [DWH].[W_MRP_TRX_SALES_ORDER_F_TY] AS select  
COALESCE(C.[DATE_WID],format(isnull(A.[TPG_DELIVERY_PLAN_DATE],cast('1900-01-01' as date)),'yyyyMMdd')) [DATE_WID],
C.[DATE_WID] [INVOICE_DATE_WID],
A.[DATE_WID] [ORDER_DATE_WID],
A.[CONTRACT_WID],
A.[ITEM_WID],
A.[CUSTOMER_WID],
A.[FACTORY_WID],
A.[PO_ID],
A.[PO_NUMBER],
A.[PO_BATCH],
A.[PO_CREATED_DATE],
A.[CUSTOMER_DELIVERY_PLAN_DATE],
A.[TPG_DELIVERY_PLAN_DATE],
A.[PO_SOURCE],
A.[ITEM_ID],
A.[CUSTOMER_CODE],
A.[RECEIVE_CUSTOMER_CODE],
A.[PAYMENT_CUSTOMER_CODE],
A.[CONTRACT_ID],
A.[PO_STATUS],
A.[PO_NUMBER_REF],
A.[COLOR_CODE],
A.[COLOR],
A.[STYLE],
A.[SUB_STYLE],
A.[SIZE],
A.[COUNTRY],
A.[DIVISION],
A.[LABEL],
A.[HANGER],
A.[SEASON],
A.[SEASONCODE],
A.[PLAN_QUANTITY],
A.[MODE_PRICE],
A.[QUANTITY_DZ],
A.[PRICE_DZ],
A.[UC],
A.[DISCOUNT_PERCENT],
A.[QUANTITY_PCS],
--D.[QUANTITY] [Qty Packaging SX],
ISNULL(CASE WHEN A.[QUANTITY_PCS] = 0 AND B.[COLOR_CODE] ='' THEN A.[PLAN_QUANTITY] ELSE [QUANTITY_PCS] END,0) [QUANTITY],
A.[FOB_PRICE],
ISNULL(A.[VENDOR_CODE],'') [VENDOR_CODE],
A.[STYLE_EXPORT],
A.[AMOUNT],
a.[PO_PACKING_QUANTITY_PCS],
a.[SOURCE]


from [DWH].[W_MRP_TRX_SALES_ORDER_F] a 
left join [DWH].[W_MRP_MD_PRODUCT_D] b on a.[ITEM_WID] = b.row_wid  
--LEFT JOIN [DWH].[VW_MRP_SALES_ORDER_JOURNAL_F] D ON A.[PO_ID] = D.[PO ID] AND A.[ITEM_WID] = D.[Item Key]
left join  (SELECT  [PO_ID],Min([DATE_WID]) [DATE_WID] FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] GROUP BY [PO_ID]) c
on a.[PO_ID] = c.[PO_ID] and left(A.[DATE_WID],4) =left(c.[DATE_WID],4)
where 
(isnull(b.[ITEM_ID_REF],0)=0 or b.[ITEM_MODEL] ='LE')
and a.[PO_SOURCE] ='SX'
and a.[W_DELETE_FLG] = '0';
GO
/****** Object:  StoredProcedure [ADF].[proc_etl_end_batch]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ADF].[proc_etl_end_batch] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime,
	@v_total_batch int,
	@v_abort_job int,
	@v_error_job int;
begin
	set @v_batch_id = 0;
	set @v_job_id = null;
	set @v_log_status = null;
	set @v_log_message = null;
	set @v_error_code = null;
	set @v_error_message = null;
	set @v_error_serverity = null;
	set @v_curr_date=DATEADD(hour,7,getdate());

	begin try
		if @p_batch_id is null
			begin
				set @v_log_status = 'ERROR';
				set @v_error_code		= 1
				set @v_error_serverity	= 1
				set @v_error_message	= 'Cannot END the batch without value!'			

				-- Insert data to table LOG
				execute [ADF].[proc_etl_log_message] 
					@p_batch_id			= @v_batch_id,
					@p_job_id			= @v_job_id,
					@p_log_status		= @v_log_status,
					@p_log_message		= @v_log_message,
					@p_error_code		= @v_error_code,
					@p_error_message	= @v_error_message
			
				raiserror (@v_error_message, -- Message text.  
						   @v_error_serverity, -- Severity.  
						   @v_error_code -- State.  
						   );  	
			end
		else
			begin
				select @v_total_batch=count(*) from [ADF].[ETL_BATCH] where BATCH_ID=@p_batch_id;

				if @v_total_batch = 0
					begin
						set @v_log_status = 'ERROR';
						set @v_error_code		= 1
						set @v_error_serverity	= 1
						set @v_error_message	= 'Cannot FIND batch ' + cast(@p_batch_id as varchar)

						-- Insert data to table LOG
						execute [ADF].[proc_etl_log_message] 
							@p_batch_id			= @v_batch_id,
							@p_job_id			= @v_job_id,
							@p_log_status		= @v_log_status,
							@p_log_message		= @v_log_message,
							@p_error_code		= @v_error_code,
							@p_error_message	= @v_error_message
			
						raiserror (@v_error_message, -- Message text.  
								   @v_error_serverity, -- Severity.  
								   @v_error_code -- State.  
								   );  	
					end
				else
					begin
						set @v_batch_id = @p_batch_id

						IF OBJECT_ID('tempdb..#BATCH_STATUS') IS NOT NULL
							DROP TABLE #BATCH_STATUS

						create table #BATCH_STATUS
						WITH (DISTRIBUTION = ROUND_ROBIN)
						as
						with
							CTE1 as (
								select BATCH_ID,LOG_STATUS
								from [ADF].[ETL_LOG]
								where 1=1
									and BATCH_ID in (
										select distinct BATCH_ID
										from [ADF].[ETL_BATCH] 
										where 1=1
											--and UPPER(BATCH_STATUS)='RUNNING'
											)
									and LOG_STATUS <> 'INFO'
									and BATCH_ID=@v_batch_id),
							CTE2 as (
								select *
								from CTE1
								PIVOT 
									( count(LOG_STATUS) FOR LOG_STATUS IN ([START],[END],[WARN],[ERROR])) as RAW_TABLE),
							CTE3 as (
								select
									BATCH_ID,
									[START],
									[END],
									[WARN],
									[ERROR],
									case
										when [ERROR] > 0 then 'ERROR'
										when [ERROR] =0 and [START] > [END] then 'ABORTED'
										when [ERROR] =0 and [START] = [END] and [WARN] =0 then 'SUCCESS'
										else 'OTHERS'
									end 'BATCH_STATUS'
								from CTE2)
						select 
							BATCH_ID,
							[START],
							[END],
							[WARN],
							[ERROR],
							BATCH_STATUS
						from CTE3;

						select @v_abort_job=count(*) 
						from #BATCH_STATUS
						where 1=1
							and [ERROR] =0 
							and [START] > [END] + 1;

						select @v_error_job=count(*) 
						from #BATCH_STATUS
						where 1=1
							and [ERROR] >0;
	
						if @v_abort_job=0
							begin
								if @v_error_job=0 
									begin
										set @v_log_status = 'END';
										set @v_log_message = 'Ended Batch ' + cast(@v_batch_id as varchar) + ' Success.';

										update 	[ADF].[ETL_BATCH] 
										set BATCH_STATUS='SUCCESS',
											END_TS=@v_curr_date
										where BATCH_ID=@p_batch_id;

										-- Insert data to table LOG
										execute [ADF].[proc_etl_log_message] 
											@p_batch_id			= @v_batch_id,
											@p_job_id			= @v_job_id,
											@p_log_status		= @v_log_status,
											@p_log_message		= @v_log_message,
											@p_error_code		= @v_error_code,
											@p_error_message	= @v_error_message;
									end
								else
									begin
										set @v_log_status = 'END'
										set @v_log_message = 'Ended Batch ' + cast(@v_batch_id as varchar) + ' Failed.'

										update 	[ADF].[ETL_BATCH] 
										set BATCH_STATUS='FAILED',
											END_TS=@v_curr_date
										where BATCH_ID=@p_batch_id;

										-- Insert data to table LOG
										execute [ADF].[proc_etl_log_message] 
											@p_batch_id			= @v_batch_id,
											@p_job_id			= @v_job_id,
											@p_log_status		= @v_log_status,
											@p_log_message		= @v_log_message,
											@p_error_code		= @v_error_code,
											@p_error_message	= @v_error_message;
									end
							end
						else
							begin
								set @v_log_status = 'ABORT';
								set @v_log_message = 'Abort Batch ' + cast(@v_batch_id as varchar) + ' Success.';
								
								update 	[ADF].[ETL_BATCH] 
								set BATCH_STATUS=@v_log_status,
									END_TS=@v_curr_date
								where BATCH_ID=@p_batch_id;

								-- Insert data to table LOG
								execute [ADF].[proc_etl_log_message] 
									@p_batch_id			= @v_batch_id,
									@p_job_id			= @v_job_id,
									@p_log_status		= @v_log_status,
									@p_log_message		= @v_log_message,
									@p_error_code		= @v_error_code,
									@p_error_message	= @v_error_message;
							end									
					end
			end
	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch
end
GO
/****** Object:  StoredProcedure [ADF].[proc_etl_get_batch_id]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ADF].[proc_etl_get_batch_id] @p_batch_id [varchar](100) AS

BEGIN
if @p_batch_id is null
	begin 
		SELECT    isnull(max([BATCH_ID]) + 1,format(dateadd(hour,7,getdate()),'yyyyMMdd01')) [BATCH_ID]
			FROM [ADF].[ETL_LOG] where left([BATCH_ID],8) = format(dateadd(hour,7,getdate()),'yyyyMMdd')
	end
else
	select @p_batch_id [BATCH_ID]
END
GO
/****** Object:  StoredProcedure [ADF].[proc_etl_get_job]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ADF].[proc_etl_get_job] @p_batch_id [varchar](100),@p_job_id [varchar](100),@p_job_sub_group [varchar](100),@p_api_group [varchar](100),@p_order [varchar](100) AS
DECLARE 
	@v_curr_date datetime
BEGIN
	set @v_curr_date=DATEADD(hour,7,getdate())
	
	select * from [ADF].[ETL_JOB] where 1= 1
AND CASE WHEN @p_job_sub_group = 'ALL' OR ISNULL(@p_job_sub_group,'')='' THEN JOB_SUB_GROUP ELSE @p_job_sub_group END = JOB_SUB_GROUP
AND CASE WHEN @p_job_id = 'ALL'        OR ISNULL(@p_job_id,'')=''        THEN job_id ELSE @p_job_id END = job_id
AND CASE WHEN @p_api_group = 'ALL'     OR ISNULL(@p_api_group,'')=''     THEN ISNULL(api_group,'') ELSE @p_api_group END = ISNULL(api_group,'')
AND CASE WHEN @p_order = 'ALL'        OR  ISNULL(@p_order,'')=''        THEN [ORDER] ELSE @p_order END = [ORDER]
order by [ORDER] 


END
GO
/****** Object:  StoredProcedure [ADF].[proc_etl_log_message]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ADF].[proc_etl_log_message] @p_batch_id [bigint],@p_job_id [bigint],@p_log_status [VARCHAR](20),@p_log_message [VARCHAR](2000),@p_error_code [VARCHAR](2000),@p_error_message [VARCHAR](2000) AS
DECLARE 
	@v_curr_date datetime
BEGIN
	set @v_curr_date=DATEADD(hour,7,getdate())
	
	--1. Insert log
	insert into [ADF].[ETL_LOG] ( BATCH_ID, JOB_ID, LOG_STATUS, LOG_MESSAGE, ERROR_CODE, [ERROR_MESSAGE],CREATED_TS)
		values( @p_batch_id, @p_job_id, @p_log_status, @p_log_message, @p_error_code,  @p_error_message,@v_curr_date )

END
GO
/****** Object:  StoredProcedure [ADF].[proc_etl_refresh_ssas]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ADF].[proc_etl_refresh_ssas] @group_name [varchar](60) AS
declare
	@v_string varchar(max),
	@v_i int,
	@v_n int,
	@v_j int,
	@v_m int,
	@v_group_name varchar(60);
begin
	set @v_i=1	
	set @v_j=1
	select @v_group_name=isnull(@group_name,'Sales')
	set @v_string = '{"Type":"Full","CommitMode":"transactional","MaxParallelism":5,"RetryCount":2,"Objects":['
	
	IF object_id('tempdb..#REFRESH_SSAS_FULL') IS NOT NULL
		begin
			drop table #REFRESH_SSAS_FULL;
		end;	

	IF object_id('tempdb..#REFRESH_SSAS_PART') IS NOT NULL
		begin
			drop table #REFRESH_SSAS_PART;
		end;	

	select 
		TABLE_NAME,
		row_number() over (order by TABLE_NAME) ROW_NUM
	into #REFRESH_SSAS_FULL
	from [ADF].[ETL_SSAS_REFRESH] 
	where 1=1
		and ACTIVE_FLG='Y' 
		and PARTITION_NAME=''
		and (GROUP_NAME = @v_group_name or GROUP_NAME= 'All');

	select @v_n=count(*) from #REFRESH_SSAS_FULL;

	select 
		TABLE_NAME,
		PARTITION_NAME,
		row_number() over (order by TABLE_NAME) ROW_NUM
	into #REFRESH_SSAS_PART
	from [ADF].[ETL_SSAS_REFRESH] 
	where 1=1
		and ACTIVE_FLG='Y' 
		and PARTITION_NAME<>''
		and (GROUP_NAME = @v_group_name or GROUP_NAME= 'All');

	select @v_m=count(*) from #REFRESH_SSAS_PART;

	if @v_n > 0 
		begin
			while @v_i<=@v_n
			begin
				declare @v_string_tmp nvarchar(100);

				select @v_string_tmp=TABLE_NAME FROM #REFRESH_SSAS_FULL WHERE ROW_NUM = @v_i;
				if @v_i = 1 
					set @v_string=@v_string + '{"table":"' + @v_string_tmp+'"}';
				else
					set @v_string=@v_string + ',{"table":"' + @v_string_tmp+'"}';

				set @v_i = @v_i +1;
			end;
		end;

	if @v_m > 0 
		begin
			while @v_j<=@v_m
			begin
				declare 
					@v_string1_tmp nvarchar(100),
					@v_string2_tmp nvarchar(100);

				select @v_string1_tmp=TABLE_NAME,@v_string2_tmp=PARTITION_NAME FROM #REFRESH_SSAS_PART WHERE ROW_NUM = @v_j;

				set @v_string=@v_string + ',{"table":"' + @v_string1_tmp+'","partition": "' + @v_string2_tmp + '"}';

				set @v_j = @v_j +1;
			end;
		end;

	set @v_string=@v_string + ']}'

	select @v_string as AAA;

end;
GO
/****** Object:  StoredProcedure [ADF].[proc_etl_start_batch]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ADF].[proc_etl_start_batch] @p_batch_type_id [int] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime,
	@v_total_batch int;
begin
	set @v_batch_id = 0;
	set @v_job_id = null;
	set @v_log_status = null;
	set @v_log_message = null;
	set @v_error_code = null;
	set @v_error_message = null;
	set @v_error_serverity = null;
	set @v_curr_date=DATEADD(hour,7,getdate());

	if @p_batch_type_id=0 
		set @v_batch_type='DAILY JOB'
	else
		set @v_batch_type='MANUAL JOB'

	begin try
		select @v_total_batch=count(*) 
		from [ADF].[ETL_BATCH]
		where 1=1
			and SUBSTRING(cast(BATCH_ID as varchar),1,6) in (select format(@v_curr_date,'yyMMdd'));

		if @v_total_batch=0 
			begin
				select @v_batch_id=(cast(format(@v_curr_date,'yyMMdd') as bigint)*1000)+1;

				set @v_log_status = 'START';
				set @v_log_message = 'Started Batch ' +cast(@v_batch_id as varchar);

				-- Insert data to table BATCH
				insert into [ADF].[ETL_BATCH] (
					BATCH_ID,BATCH_TYPE,BATCH_STATUS,START_TS)
				values (
					@v_batch_id,@v_batch_type,'RUNNING',@v_curr_date);
					
				--print convert(varchar(20),@v_batch_id);
				
				select @v_batch_id as AAA;

				-- Insert data to table LOG
				execute [ADF].[proc_etl_log_message] 
					@p_batch_id			= @v_batch_id,
					@p_job_id			= @v_job_id,
					@p_log_status		= @v_log_status,
					@p_log_message		= @v_log_message,
					@p_error_code		= @v_error_code,
					@p_error_message	= @v_error_message

			end
		else
			begin
				select @v_batch_id=(cast(format(DATEADD(hour,7,getdate()),'yyMMdd') as bigint)*1000) + (max(BATCH_ID)%1000)+1
				from [ADF].[ETL_BATCH]
				where 1=1
					and SUBSTRING(cast(BATCH_ID as varchar),1,6) in (select format(DATEADD(hour,7,getdate()),'yyMMdd'));

				select @v_batch_id as AAA;

				--print convert(varchar(200),@v_batch_id);

				set @v_log_status = 'START';
				set @v_log_message = 'Started Batch ' +cast(@v_batch_id as varchar);

				-- Insert data to table BATCH
				insert into [ADF].[ETL_BATCH] (
					BATCH_ID,BATCH_TYPE,BATCH_STATUS,START_TS)
				values (
					@v_batch_id, @v_batch_type,'RUNNING',@v_curr_date);
				
				--print convert(varchar(20),@v_batch_id);
										
				-- Insert data to table LOG
				execute [ADF].[proc_etl_log_message] 
					@p_batch_id			= @v_batch_id,
					@p_job_id			= @v_job_id,
					@p_log_status		= @v_log_status,
					@p_log_message		= @v_log_message,
					@p_error_code		= @v_error_code,
					@p_error_message	= @v_error_message

			end
	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot Start Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  

  
			RAISERROR (@v_error_message, -- Message text.  
					   @v_error_serverity, -- Severity.  
					   @v_error_code -- State.  
					   );  
	end catch
end
GO
/****** Object:  StoredProcedure [ADF].[proc_etl_update_batch]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ADF].[proc_etl_update_batch] @p_table_name [varchar](200),@p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime,
	@v_total_batch int,
	@v_abort_job int,
	@v_table_name varchar(200),
	@v_strings nvarchar(max);
begin
	set @v_batch_id = 0;
	set @v_job_id = null;
	set @v_log_status = null;
	set @v_log_message = null;
	set @v_error_code = null;
	set @v_error_message = null;
	set @v_error_serverity = null;
	set @v_curr_date=DATEADD(hour,7,getdate());

	select @v_batch_id=isnull(@p_batch_id,0)

	begin try
		set @v_strings= N'update STG.'+ @p_table_name + N' set W_BATCH_ID='+cast(@p_batch_id as varchar);

		print @v_strings;

		execute sp_executesql @v_strings;

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch
end
GO
/****** Object:  StoredProcedure [ADF].[proc_failprocedure]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ADF].[proc_failprocedure] @raiseerror [varchar](50),@message [nvarchar](500) AS
begin
  if @raiseerror = 'true'
	begin
		RAISERROR (@message, -- Message text.  
					16, -- Severity.  
					1 -- State.  
					);  
	end
end
GO
/****** Object:  StoredProcedure [DWH].[proc_MRP_MD_CONTRACT_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_MRP_MD_CONTRACT_F] @p_batch_id [bigint] AS
DECLARE @v_batch_id BIGINT
	,@v_job_id INT
	,@v_log_status VARCHAR(20)
	,@v_log_message VARCHAR(2000)
	,@v_error_code VARCHAR(2000)
	,@v_error_message VARCHAR(2000)
	,@v_error_serverity INT
	,@v_batch_type VARCHAR(20)
	,@v_curr_date DATETIME
	,@v_total_batch INT
	,@v_abort_job INT
	,@v_datasource_num_id INT
	,@v_tgt_table VARCHAR(100)
	,@v_tgt_table_tmp VARCHAR(100)
	,@v_datasource_name VARCHAR(100)
	,@v_string VARCHAR(max);

BEGIN
	SET @v_curr_date = DATEADD(hour, 7, getdate());
	SET @v_tgt_table = 'W_SALES_INVOICE_RETAIL_F';
	SET @v_tgt_table_tmp = '#W_SALES_INVOICE_RETAIL_F';
	SET @v_datasource_name = 'LS';

	BEGIN TRY
		SELECT @v_datasource_num_id = [DATASOURCE_NUM_ID]
		FROM [ADF].[ETL_DATASOURCE]
		WHERE [DATASOURCE_VALUE] = @v_datasource_name;

		SELECT @v_job_id = JOB_ID
		FROM ADF.ETL_JOB
		WHERE TARGET_TABLE = @v_tgt_table;

		SELECT @v_batch_id = @p_batch_id;

		-- Begin process
		SET @v_log_status = 'START';
		SET @v_log_message = 'Start process SIL ' + @v_tgt_table;
		SET @v_error_code = NULL;
		SET @v_error_message = NULL;

		EXECUTE [ADF].[proc_etl_log_message] @p_batch_id = @v_batch_id
			,@p_job_id = @v_job_id
			,@p_log_status = @v_log_status
			,@p_log_message = @v_log_message
			,@p_error_code = @v_error_code
			,@p_error_message = @v_error_message

		IF object_id('tempdb..#W_SALES_INVOICE_RETAIL_F') IS NOT NULL
		BEGIN
			DROP TABLE #W_SALES_INVOICE_RETAIL_F;
		END;

		-- INFO process
		SET @v_log_status = 'INFO';
		SET @v_log_message = 'Create temporary table of process SIL ' + @v_tgt_table;
		SET @v_error_code = NULL;
		SET @v_error_message = NULL;

		EXECUTE [ADF].[proc_etl_log_message] @p_batch_id = @v_batch_id
			,@p_job_id = @v_job_id
			,@p_log_status = @v_log_status
			,@p_log_message = @v_log_message
			,@p_error_code = @v_error_code
			,@p_error_message = @v_error_message

		CREATE TABLE #W_SALES_INVOICE_RETAIL_F (
			[DATE_WID] [bigint] NULL,
			[LOCATION_WID] [bigint] NULL,
			[ITEM_WID] [bigint] NULL,
			[MEMBER_WID] [bigint] NULL,
			[CUSTOMER_WID] [bigint] NULL,
			[PROMOTION_WID] [bigint] NULL,
			[STAFF_WID] [bigint] NULL,
			[LOCATION_CODE] [nvarchar](10) NULL,
			[STORE_CODE] [nvarchar](10) NULL,
			[POS_CODE] [nvarchar](10) NULL,
			[TRANSACTION_NO] [int] NULL,
			[LINE_NO] [int] NULL,
			[RECEIPT_NO] [nvarchar](20) NULL,
			[BARCODE] [nvarchar](22) NULL,
			[ITEM_CODE] [nvarchar](20) NULL,
			[SALES_STAFF] [nvarchar](20) NULL,
			[ITEM_CATEGORY_CODE] [nvarchar](10) NULL,
			[PRODUCT_GROUP_CODE] [nvarchar](10) NULL,
			[PRICE] [decimal](38, 20) NULL,
			[NET_PRICE] [decimal](38, 20) NULL,
			[QUANTITY] [decimal](38, 20) NULL,
			[PRICE_GROUP_CODE] [nvarchar](10) NULL,
			[VAT_BUS_POSTING_GROUP] [nvarchar](10) NULL,
			[VAT_CODE] [nvarchar](10) NULL,
			[XTRANSACTION_STATUS] [int] NULL,
			[DISCOUNT_AMOUNT] [decimal](38, 20) NULL,
			[COST_AMOUNT] [decimal](38, 20) NULL,
			[COST_AMOUNT_GL] [decimal](38, 20) NULL,
			[DATE] [datetime] NULL,
			[NET_AMOUNT] [decimal](38, 20) NULL,
			[VAT_AMOUNT] [decimal](38, 20) NULL,
			[STANDARD_NET_PRICE] [decimal](38, 20) NULL,
			[DISC_AMOUNT_FROM_STD_PRICE] [decimal](38, 20) NULL,
			[CUSTOMER_CODE] [nvarchar](20) NULL,
			[STAFF_ID] [nvarchar](20) NULL,
			[ITEM_POSTING_GROUP] [nvarchar](10) NULL,
			[TOTAL_ROUNDED_AMT] [decimal](38, 20) NULL,
			[COUNTER] [decimal](38, 20) NULL,
			[VARIANT_CODE] [nvarchar](10) NULL,
			[SERIAL_NO] [nvarchar](20) NULL,
			[MEMBER_POINTS] [decimal](38, 20) NULL,
			[OFFER_BLOCKED_POINTS] [tinyint] NULL,
			[TRANS_DATE] [datetime] NULL,
			[LINE_DISCOUNT] [decimal](38, 20) NULL,
			[CUSTOMER_DISCOUNT] [decimal](38, 20) NULL,
			[INFOCODE_DISCOUNT] [decimal](38, 20) NULL,
			[CUST_INVOICE_DISCOUNT] [decimal](38, 20) NULL,
			[UNIT_OF_MEASURE] [nvarchar](10) NULL,
			[UOM_QUANTITY] [decimal](38, 20) NULL,
			[UOM_PRICE] [decimal](38, 20) NULL,
			[TOTAL_DISCOUNT] [decimal](38, 20) NULL,
			[TOTAL_DISC] [decimal](38, 20) NULL,
			[TOT_DISC_INFO_LINE_NO] [int] NULL,
			[PERIODIC_DISC_TYPE] [int] NULL,
			[PERIODIC_DISC_GROUP] [nvarchar](20) NULL,
			[PERIODIC_DISCOUNT] [decimal](38, 20) NULL,
			[DEAL_LINE] [tinyint] NULL,
			[DEAL_HEADER_LINE_NO] [int] NULL,
			[DEAL_LINE_NO] [int] NULL,
			[DEAL_LINE_ADDED_AMT] [decimal](38, 20) NULL,
			[DEAL_MODIFIER_ADDED_AMT] [decimal](38, 20) NULL,
			[DEAL_MODIFIER_LINE_NO] [int] NULL,
			[DISCOUNT_AMT_FOR_PRINTING] [decimal](38, 20) NULL,
			[COUPON_DISCOUNT] [decimal](38, 20) NULL,
			[COUPON_AMT_FOR_PRINTING] [decimal](38, 20) NULL,
			[REPLICATION_COUNTER] [int] NULL,
			[SALES_TYPE] [nvarchar](20) NULL,
			[ORIG_FROM_INFOCODE] [nvarchar](10) NULL,
			[ORIG_FROM_SUBCODE] [nvarchar](20) NULL,
			[PARENT_LINE_NO] [int] NULL,
			[INFOCODE_ENTRY_LINE_NO] [int] NULL,
			[EXCLUDED_BOM_LINE_NO] [int] NULL,
			[INFOCODE_SELECTED_QTY] [decimal](38, 20) NULL,
			[PARENT_ITEM_NO] [nvarchar](20) NULL,
			[ORIG_TRANS_STORE] [nvarchar](10) NULL,
			[ORIG_TRANS_POS] [nvarchar](10) NULL,
			[ORIG_TRANS_NO] [int] NULL,
			[ORIG_TRANS_LINE_NO] [int] NULL,
			[REFUND_QTY] [decimal](38, 20) NULL,
			[REFUNDED_LINE_NO] [int] NULL,
			[REFUNDED_TRANS_NO] [int] NULL,
			[REFUNDED_POS_NO] [nvarchar](20) NULL,
			[REFUNDED_STORE_NO] [nvarchar](20) NULL,
			[CREATED_BY_STAFF_ID] [nvarchar](20) NULL,
			[VAT_INV_NO] [nvarchar](20) NULL,
			[VAT_INV_LINE_NO] [int] NULL,
			[VAT_INVOICE] [tinyint] NULL,
			[VAT_PROD_POSTING_GROUP] [nvarchar](10) NULL,
			[REFERENCE_NO] [nvarchar](20) NULL,
			[TRANSACTION_TYPE] [int] NULL,
			[NO_OF_ITEMS] [decimal](38, 20) NULL,
			[NO_OF_ITEM_LINES] [decimal](38, 20) NULL,
			[MEMBER_CARD_CODE] [nvarchar](100) NULL,
			[MEMBER_SCHEME] [nvarchar](10) NULL,
			[REFERENCEID] [nvarchar](100) NULL,
			[W_DELETE_FLG] [varchar](1) NOT NULL,
			[W_INTEGRATION_ID] [nvarchar](4000) NULL,
			[W_INSERT_DT] [datetime] NOT NULL,
			[W_UPDATE_DT] [datetime] NOT NULL,
			[W_DATASOURCE_NUM_ID] [int] NOT NULL,
			[W_BATCH_ID] [int] NOT NULL,
			[W_INS_UPD_FLG] [varchar](1) NOT NULL
			)
			WITH (
					DISTRIBUTION = ROUND_ROBIN
					,CLUSTERED COLUMNSTORE INDEX
					);

		-- INFO process
		SET @v_log_status = 'INFO';
		SET @v_log_message = 'Insert data to temporary table of process SIL ' + @v_tgt_table;
		SET @v_error_code = NULL;
		SET @v_error_message = NULL;

		EXECUTE [ADF].[proc_etl_log_message] @p_batch_id = @v_batch_id
			,@p_job_id = @v_job_id
			,@p_log_status = @v_log_status
			,@p_log_message = @v_log_message
			,@p_error_code = @v_error_code
			,@p_error_message = @v_error_message;

		WITH cte
		AS (
			SELECT cast(FORMAT(FF.[DATE],'yyyyMMdd') AS INT) [DATE_WID]
				,ISNULL(DS2.[LOCATION_WID],0) [LOCATION_WID]
				,ISNULL(DI.[ITEM_WID],0) [ITEM_WID]
				,ISNULL(DM.[MEMBER_WID],0) [MEMBER_WID]
				,ISNULL(DC.[CUSTOMER_WID],0) [CUSTOMER_WID]
				,ISNULL(DP1.[PROMOTION_WID],0) [PROMOTION_WID]
				,ISNULL(DS.[STAFF_WID],0) [STAFF_WID]
				,DS2.LOCATION_CODE [LOCATION_CODE]
				,FF.[STORE_CODE] [STORE_CODE]
				,FF.[POS_CODE]
				,FF.[TRANSACTION_NO]
				,FF.[LINE_NO]
				,FF.[RECEIPT_NO]
				,FF.[BARCODE]
				,FF.[ITEM_CODE]
				,FF.[SALES_STAFF]
				,FF.[ITEM_CATEGORY_CODE]
				,FF.[PRODUCT_GROUP_CODE]
				,FF.[PRICE]
				,FF.[NET_PRICE]
				,FF.[QUANTITY]
				,FF.[PRICE_GROUP_CODE]
				,FF.[VAT_BUS_POSTING_GROUP]
				,FF.[VAT_CODE]
				,FF.[XTRANSACTION_STATUS]
				,FF.[DISCOUNT_AMOUNT]
				,FF.[COST_AMOUNT]
				,ISNULL(GL.[COST_AMOUNT],0) [COST_AMOUNT_GL]
				,FF.[DATE]
				,FF.[NET_AMOUNT]
				,FF.[VAT_AMOUNT]
				,FF.[STANDARD_NET_PRICE]
				,FF.[DISC_AMOUNT_FROM_STD_PRICE]
				,FF.[CUSTOMER_CODE]
				,FF.[STAFF_ID]
				,FF.[ITEM_POSTING_GROUP]
				,FF.[TOTAL_ROUNDED_AMT]
				,FF.[COUNTER]
				,FF.[VARIANT_CODE]
				,FF.[SERIAL_NO]
				,FF.[MEMBER_POINTS]
				,FF.[OFFER_BLOCKED_POINTS]
				,FF.[TRANS_DATE]
				,FF.[LINE_DISCOUNT]
				,FF.[CUSTOMER_DISCOUNT]
				,FF.[INFOCODE_DISCOUNT]
				,FF.[CUST_INVOICE_DISCOUNT]
				,FF.[UNIT_OF_MEASURE]
				,FF.[UOM_QUANTITY]
				,FF.[UOM_PRICE]
				,FF.[TOTAL_DISCOUNT]
				,FF.[TOTAL_DISC]
				,FF.[TOT_DISC_INFO_LINE_NO]
				,FF.[PERIODIC_DISC_TYPE]
				,FF.[PERIODIC_DISC_GROUP]
				,FF.[PERIODIC_DISCOUNT]
				,FF.[DEAL_LINE]
				,FF.[DEAL_HEADER_LINE_NO]
				,FF.[DEAL_LINE_NO]
				,FF.[DEAL_LINE_ADDED_AMT]
				,FF.[DEAL_MODIFIER_ADDED_AMT]
				,FF.[DEAL_MODIFIER_LINE_NO]
				,FF.[DISCOUNT_AMT_FOR_PRINTING]
				,FF.[COUPON_DISCOUNT]
				,FF.[COUPON_AMT_FOR_PRINTING]
				,FF.[REPLICATION_COUNTER]
				,FF.[SALES_TYPE]
				,FF.[ORIG_FROM_INFOCODE]
				,FF.[ORIG_FROM_SUBCODE]
				,FF.[PARENT_LINE_NO]
				,FF.[INFOCODE_ENTRY_LINE_NO]
				,FF.[EXCLUDED_BOM_LINE_NO]
				,FF.[INFOCODE_SELECTED_QTY]
				,FF.[PARENT_ITEM_NO]
				,FF.[ORIG_TRANS_STORE]
				,FF.[ORIG_TRANS_POS]
				,FF.[ORIG_TRANS_NO]
				,FF.[ORIG_TRANS_LINE_NO]
				,FF.[REFUND_QTY]
				,FF.[REFUNDED_LINE_NO]
				,FF.[REFUNDED_TRANS_NO]
				,FF.[REFUNDED_POS_NO]
				,FF.[REFUNDED_STORE_NO]
				,FF.[CREATED_BY_STAFF_ID]
				,FF.[VAT_INV_NO]
				,FF.[VAT_INV_LINE_NO]
				,FF.[VAT_INVOICE]
				,FF.[VAT_PROD_POSTING_GROUP]
				,FF.[REFERENCE_NO]
				,FF.[TRANSACTION_TYPE]
				,FF.[NO_OF_ITEMS]
				,FF.[NO_OF_ITEM_LINES]
				,FF.[MEMBER_CARD_CODE]
				,FF.[MEMBER_SCHEME]
				,ISNULL(GL.[REFERENCE],'0') [REFERENCEID]
				,'N' W_DELETE_FLG
				,FF.W_INTEGRATION_ID
				,@v_curr_date AS W_INSERT_DT
				,@v_curr_date AS W_UPDATE_DT
				,@v_datasource_num_id W_DATASOURCE_NUM_ID
				,@v_batch_id W_BATCH_ID
				,'I' AS W_INS_UPD_FLG
				,row_number() OVER (
					PARTITION BY FF.W_INTEGRATION_ID ORDER BY FF.[DATE] DESC
					) AS ROW_NUM
			FROM [STG].[W_SALES_INVOICE_RETAIL_FS] FF
			LEFT OUTER JOIN [DWH].[W_CUSTOMER_D] DC ON (
					FF.CUSTOMER_CODE = DC.CUSTOMER_CODE
					AND DC.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_ITEM_D] DI ON (
					FF.ITEM_CODE = DI.ITEM_CODE
					AND ISNULL(FF.VARIANT_CODE,'') = ISNULL(DI.VARIANT,'')
					AND DI.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_MEMBER_D] DM ON (
					FF.[MEMBER_CARD_CODE] = DM.[MEMBER_CARD_CODE]
					AND DM.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_STAFF_D] DS ON (
					FF.STAFF_ID = DS.STAFF_ID
					AND DS.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_LOCATION_D] DS2 ON (
					FF.STORE_CODE = DS2.STORE_CODE
					AND DS2.W_DELETE_FLG = 'N'
					AND  ( (format(FF.[DATE],'yyyyMM') < (select min([W_VERSION_PERIOD]) from [DWH].[W_LOCATION_D]) AND DS2.[W_VERSION_PERIOD] = (select min([W_VERSION_PERIOD]) from [DWH].[W_LOCATION_D])) OR
							   (DS2.[W_VERSION_PERIOD] = format(FF.[DATE],'yyyyMM') ))
					)
			LEFT OUTER JOIN [DWH].[W_PROMOTION_D] DP1 ON (
					FF.[PERIODIC_DISC_GROUP] = DP1.PROMOTION_CODE
					AND DP1.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_ITEM_GL_ENTRY_F] GL ON (
					FF.STORE_CODE+'-'+FF.[POS_CODE]+'-'+Convert(char(1000),FF.[Transaction_NO]) = GL.[REFERENCE]
					AND FF.ITEM_CODE= GL.ITEM_CODE 
					AND FF.VARIANT_CODE = GL.VARIANT_CODE
					AND GL.W_DELETE_FLG = 'N'
					)
			)
		INSERT INTO #W_SALES_INVOICE_RETAIL_F
		SELECT 
			[DATE_WID]
			,[LOCATION_WID]
			,[ITEM_WID]
			,[MEMBER_WID]
			,[CUSTOMER_WID]
			,[PROMOTION_WID]
			,[STAFF_WID]
			,[LOCATION_CODE]
			,[STORE_CODE]
			,[POS_CODE]
			,[TRANSACTION_NO]
			,[LINE_NO]
			,[RECEIPT_NO]
			,[BARCODE]
			,[ITEM_CODE]
			,[SALES_STAFF]
			,[ITEM_CATEGORY_CODE]
			,[PRODUCT_GROUP_CODE]
			,[PRICE]
			,[NET_PRICE]
			,[QUANTITY]
			,[PRICE_GROUP_CODE]
			,[VAT_BUS_POSTING_GROUP]
			,[VAT_CODE]
			,[XTRANSACTION_STATUS]
			,[DISCOUNT_AMOUNT]
			,[COST_AMOUNT]
			,[COST_AMOUNT_GL]
			,[DATE]
			,[NET_AMOUNT]
			,[VAT_AMOUNT]
			,[STANDARD_NET_PRICE]
			,[DISC_AMOUNT_FROM_STD_PRICE]
			,[CUSTOMER_CODE]
			,[STAFF_ID]
			,[ITEM_POSTING_GROUP]
			,[TOTAL_ROUNDED_AMT]
			,[COUNTER]
			,[VARIANT_CODE]
			,[SERIAL_NO]
			,[MEMBER_POINTS]
			,[OFFER_BLOCKED_POINTS]
			,[TRANS_DATE]
			,[LINE_DISCOUNT]
			,[CUSTOMER_DISCOUNT]
			,[INFOCODE_DISCOUNT]
			,[CUST_INVOICE_DISCOUNT]
			,[UNIT_OF_MEASURE]
			,[UOM_QUANTITY]
			,[UOM_PRICE]
			,[TOTAL_DISCOUNT]
			,[TOTAL_DISC]
			,[TOT_DISC_INFO_LINE_NO]
			,[PERIODIC_DISC_TYPE]
			,[PERIODIC_DISC_GROUP]
			,[PERIODIC_DISCOUNT]
			,[DEAL_LINE]
			,[DEAL_HEADER_LINE_NO]
			,[DEAL_LINE_NO]
			,[DEAL_LINE_ADDED_AMT]
			,[DEAL_MODIFIER_ADDED_AMT]
			,[DEAL_MODIFIER_LINE_NO]
			,[DISCOUNT_AMT_FOR_PRINTING]
			,[COUPON_DISCOUNT]
			,[COUPON_AMT_FOR_PRINTING]
			,[REPLICATION_COUNTER]
			,[SALES_TYPE]
			,[ORIG_FROM_INFOCODE]
			,[ORIG_FROM_SUBCODE]
			,[PARENT_LINE_NO]
			,[INFOCODE_ENTRY_LINE_NO]
			,[EXCLUDED_BOM_LINE_NO]
			,[INFOCODE_SELECTED_QTY]
			,[PARENT_ITEM_NO]
			,[ORIG_TRANS_STORE]
			,[ORIG_TRANS_POS]
			,[ORIG_TRANS_NO]
			,[ORIG_TRANS_LINE_NO]
			,[REFUND_QTY]
			,[REFUNDED_LINE_NO]
			,[REFUNDED_TRANS_NO]
			,[REFUNDED_POS_NO]
			,[REFUNDED_STORE_NO]
			,[CREATED_BY_STAFF_ID]
			,[VAT_INV_NO]
			,[VAT_INV_LINE_NO]
			,[VAT_INVOICE]
			,[VAT_PROD_POSTING_GROUP]
			,[REFERENCE_NO]
			,[TRANSACTION_TYPE]
			,[NO_OF_ITEMS]
			,[NO_OF_ITEM_LINES]
			,[MEMBER_CARD_CODE]
			,[MEMBER_SCHEME]
			,[REFERENCEID]
			,[W_DELETE_FLG]
			,[W_INTEGRATION_ID]
			,[W_INSERT_DT]
			,[W_UPDATE_DT]
			,[W_DATASOURCE_NUM_ID]
			,[W_BATCH_ID]
			,[W_INS_UPD_FLG]
		FROM cte
		WHERE ROW_NUM = 1;

		UPDATE [DWH].[W_SALES_INVOICE_RETAIL_F]
		SET [W_DELETE_FLG] = 'Y'
		WHERE [DATE_WID] IN (
				SELECT DISTINCT [DATE_WID]
				FROM #W_SALES_INVOICE_RETAIL_F
				)

		UPDATE #W_SALES_INVOICE_RETAIL_F
		SET W_INS_UPD_FLG = 'U'
		WHERE W_INTEGRATION_ID IN (
				SELECT W_INTEGRATION_ID
				FROM DWH.W_SALES_INVOICE_RETAIL_F
				);

		-- End process
		SET @v_log_status = 'INFO';
		SET @v_log_message = 'Update new attribute in process SIL ' + @v_tgt_table;
		SET @v_error_code = NULL;
		SET @v_error_message = NULL;

		EXECUTE [ADF].[proc_etl_log_message] @p_batch_id = @v_batch_id
			,@p_job_id = @v_job_id
			,@p_log_status = @v_log_status
			,@p_log_message = @v_log_message
			,@p_error_code = @v_error_code
			,@p_error_message = @v_error_message;

		UPDATE DWH.W_SALES_INVOICE_RETAIL_F
		SET  [DATE_WID] = SRC.[DATE_WID]
			,[LOCATION_WID] = SRC.[LOCATION_WID]
			,[ITEM_WID] = SRC.[ITEM_WID]
			,[MEMBER_WID] = SRC.[MEMBER_WID]
			,[CUSTOMER_WID] = SRC.[CUSTOMER_WID]
			,[PROMOTION_WID] = SRC.[PROMOTION_WID]
			,[STAFF_WID] = SRC.[STAFF_WID]
			,[LOCATION_CODE] = SRC.[LOCATION_CODE]
			,[STORE_CODE] = SRC.[STORE_CODE]
			,[POS_CODE] = SRC.[POS_CODE]
			,[TRANSACTION_NO] = SRC.[TRANSACTION_NO]
			,[LINE_NO] = SRC.[LINE_NO]
			,[RECEIPT_NO] = SRC.[RECEIPT_NO]
			,[BARCODE] = SRC.[BARCODE]
			,[ITEM_CODE] = SRC.[ITEM_CODE]
			,[SALES_STAFF] = SRC.[SALES_STAFF]
			,[ITEM_CATEGORY_CODE] = SRC.[ITEM_CATEGORY_CODE]
			,[PRODUCT_GROUP_CODE] = SRC.[PRODUCT_GROUP_CODE]
			,[PRICE] = SRC.[PRICE]
			,[NET_PRICE] = SRC.[NET_PRICE]
			,[QUANTITY] = SRC.[QUANTITY]
			,[PRICE_GROUP_CODE] = SRC.[PRICE_GROUP_CODE]
			,[VAT_BUS_POSTING_GROUP] = SRC.[VAT_BUS_POSTING_GROUP]
			,[VAT_CODE] = SRC.[VAT_CODE]
			,[XTRANSACTION_STATUS] = SRC.[XTRANSACTION_STATUS]
			,[DISCOUNT_AMOUNT] = SRC.[DISCOUNT_AMOUNT]
			,[COST_AMOUNT] = SRC.[COST_AMOUNT]
			,[COST_AMOUNT_GL] = SRC.[COST_AMOUNT_GL]
			,[DATE] = SRC.[DATE]
			,[NET_AMOUNT] = SRC.[NET_AMOUNT]
			,[VAT_AMOUNT] = SRC.[VAT_AMOUNT]
			,[STANDARD_NET_PRICE] = SRC.[STANDARD_NET_PRICE]
			,[DISC_AMOUNT_FROM_STD_PRICE] = SRC.[DISC_AMOUNT_FROM_STD_PRICE]
			,[CUSTOMER_CODE] = SRC.[CUSTOMER_CODE]
			,[STAFF_ID] = SRC.[STAFF_ID]
			,[ITEM_POSTING_GROUP] = SRC.[ITEM_POSTING_GROUP]
			,[TOTAL_ROUNDED_AMT] = SRC.[TOTAL_ROUNDED_AMT]
			,[COUNTER] = SRC.[COUNTER]
			,[VARIANT_CODE] = SRC.[VARIANT_CODE]
			,[SERIAL_NO] = SRC.[SERIAL_NO]
			,[MEMBER_POINTS] = SRC.[MEMBER_POINTS]
			,[OFFER_BLOCKED_POINTS] = SRC.[OFFER_BLOCKED_POINTS]
			,[TRANS_DATE] = SRC.[TRANS_DATE]
			,[LINE_DISCOUNT] = SRC.[LINE_DISCOUNT]
			,[CUSTOMER_DISCOUNT] = SRC.[CUSTOMER_DISCOUNT]
			,[INFOCODE_DISCOUNT] = SRC.[INFOCODE_DISCOUNT]
			,[CUST_INVOICE_DISCOUNT] = SRC.[CUST_INVOICE_DISCOUNT]
			,[UNIT_OF_MEASURE] = SRC.[UNIT_OF_MEASURE]
			,[UOM_QUANTITY] = SRC.[UOM_QUANTITY]
			,[UOM_PRICE] = SRC.[UOM_PRICE]
			,[TOTAL_DISCOUNT] = SRC.[TOTAL_DISCOUNT]
			,[TOTAL_DISC] = SRC.[TOTAL_DISC]
			,[TOT_DISC_INFO_LINE_NO] = SRC.[TOT_DISC_INFO_LINE_NO]
			,[PERIODIC_DISC_TYPE] = SRC.[PERIODIC_DISC_TYPE]
			,[PERIODIC_DISC_GROUP] = SRC.[PERIODIC_DISC_GROUP]
			,[PERIODIC_DISCOUNT] = SRC.[PERIODIC_DISCOUNT]
			,[DEAL_LINE] = SRC.[DEAL_LINE]
			,[DEAL_HEADER_LINE_NO] = SRC.[DEAL_HEADER_LINE_NO]
			,[DEAL_LINE_NO] = SRC.[DEAL_LINE_NO]
			,[DEAL_LINE_ADDED_AMT] = SRC.[DEAL_LINE_ADDED_AMT]
			,[DEAL_MODIFIER_ADDED_AMT] = SRC.[DEAL_MODIFIER_ADDED_AMT]
			,[DEAL_MODIFIER_LINE_NO] = SRC.[DEAL_MODIFIER_LINE_NO]
			,[DISCOUNT_AMT_FOR_PRINTING] = SRC.[DISCOUNT_AMT_FOR_PRINTING]
			,[COUPON_DISCOUNT] = SRC.[COUPON_DISCOUNT]
			,[COUPON_AMT_FOR_PRINTING] = SRC.[COUPON_AMT_FOR_PRINTING]
			,[REPLICATION_COUNTER] = SRC.[REPLICATION_COUNTER]
			,[SALES_TYPE] = SRC.[SALES_TYPE]
			,[ORIG_FROM_INFOCODE] = SRC.[ORIG_FROM_INFOCODE]
			,[ORIG_FROM_SUBCODE] = SRC.[ORIG_FROM_SUBCODE]
			,[PARENT_LINE_NO] = SRC.[PARENT_LINE_NO]
			,[INFOCODE_ENTRY_LINE_NO] = SRC.[INFOCODE_ENTRY_LINE_NO]
			,[EXCLUDED_BOM_LINE_NO] = SRC.[EXCLUDED_BOM_LINE_NO]
			,[INFOCODE_SELECTED_QTY] = SRC.[INFOCODE_SELECTED_QTY]
			,[PARENT_ITEM_NO] = SRC.[PARENT_ITEM_NO]
			,[ORIG_TRANS_STORE] = SRC.[ORIG_TRANS_STORE]
			,[ORIG_TRANS_POS] = SRC.[ORIG_TRANS_POS]
			,[ORIG_TRANS_NO] = SRC.[ORIG_TRANS_NO]
			,[ORIG_TRANS_LINE_NO] = SRC.[ORIG_TRANS_LINE_NO]
			,[REFUND_QTY] = SRC.[REFUND_QTY]
			,[REFUNDED_LINE_NO] = SRC.[REFUNDED_LINE_NO]
			,[REFUNDED_TRANS_NO] = SRC.[REFUNDED_TRANS_NO]
			,[REFUNDED_POS_NO] = SRC.[REFUNDED_POS_NO]
			,[REFUNDED_STORE_NO] = SRC.[REFUNDED_STORE_NO]
			,[CREATED_BY_STAFF_ID] = SRC.[CREATED_BY_STAFF_ID]
			,[VAT_INV_NO] = SRC.[VAT_INV_NO]
			,[VAT_INV_LINE_NO] = SRC.[VAT_INV_LINE_NO]
			,[VAT_INVOICE] = SRC.[VAT_INVOICE]
			,[VAT_PROD_POSTING_GROUP] = SRC.[VAT_PROD_POSTING_GROUP]
			,[REFERENCE_NO] = SRC.[REFERENCE_NO]
			,[TRANSACTION_TYPE] = SRC.[TRANSACTION_TYPE]
			,[NO_OF_ITEMS] = SRC.[NO_OF_ITEMS]
			,[NO_OF_ITEM_LINES] = SRC.[NO_OF_ITEM_LINES]
			,[MEMBER_CARD_CODE] = SRC.[MEMBER_CARD_CODE]
			,[MEMBER_SCHEME] = SRC.[MEMBER_SCHEME]
			,[REFERENCEID] = SRC.[REFERENCEID]
			,[W_DELETE_FLG] = SRC.[W_DELETE_FLG]
			,[W_UPDATE_DT] = SRC.[W_UPDATE_DT]
			,[W_DATASOURCE_NUM_ID] = SRC.[W_DATASOURCE_NUM_ID]
			,[W_BATCH_ID] = SRC.[W_BATCH_ID]
		FROM DWH.W_SALES_INVOICE_RETAIL_F TAR
		INNER JOIN #W_SALES_INVOICE_RETAIL_F SRC ON (
				TAR.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID
				AND SRC.W_INS_UPD_FLG = 'U'
				);

		-- End process
		SET @v_log_status = 'INFO';
		SET @v_log_message = 'Insert new data in process SIL ' + @v_tgt_table;
		SET @v_error_code = NULL;
		SET @v_error_message = NULL;

		EXECUTE [ADF].[proc_etl_log_message] @p_batch_id = @v_batch_id
			,@p_job_id = @v_job_id
			,@p_log_status = @v_log_status
			,@p_log_message = @v_log_message
			,@p_error_code = @v_error_code
			,@p_error_message = @v_error_message;

		INSERT INTO DWH.W_SALES_INVOICE_RETAIL_F (
             [DATE_WID]
			,[LOCATION_WID]
			,[ITEM_WID]
			,[MEMBER_WID]
			,[CUSTOMER_WID]
			,[PROMOTION_WID]
			,[STAFF_WID]
			,[LOCATION_CODE]
			,[STORE_CODE]
			,[POS_CODE]
			,[TRANSACTION_NO]
			,[LINE_NO]
			,[RECEIPT_NO]
			,[BARCODE]
			,[ITEM_CODE]
			,[SALES_STAFF]
			,[ITEM_CATEGORY_CODE]
			,[PRODUCT_GROUP_CODE]
			,[PRICE]
			,[NET_PRICE]
			,[QUANTITY]
			,[PRICE_GROUP_CODE]
			,[VAT_BUS_POSTING_GROUP]
			,[VAT_CODE]
			,[XTRANSACTION_STATUS]
			,[DISCOUNT_AMOUNT]
			,[COST_AMOUNT]
			,[COST_AMOUNT_GL]
			,[DATE]
			,[NET_AMOUNT]
			,[VAT_AMOUNT]
			,[STANDARD_NET_PRICE]
			,[DISC_AMOUNT_FROM_STD_PRICE]
			,[CUSTOMER_CODE]
			,[STAFF_ID]
			,[ITEM_POSTING_GROUP]
			,[TOTAL_ROUNDED_AMT]
			,[COUNTER]
			,[VARIANT_CODE]
			,[SERIAL_NO]
			,[MEMBER_POINTS]
			,[OFFER_BLOCKED_POINTS]
			,[TRANS_DATE]
			,[LINE_DISCOUNT]
			,[CUSTOMER_DISCOUNT]
			,[INFOCODE_DISCOUNT]
			,[CUST_INVOICE_DISCOUNT]
			,[UNIT_OF_MEASURE]
			,[UOM_QUANTITY]
			,[UOM_PRICE]
			,[TOTAL_DISCOUNT]
			,[TOTAL_DISC]
			,[TOT_DISC_INFO_LINE_NO]
			,[PERIODIC_DISC_TYPE]
			,[PERIODIC_DISC_GROUP]
			,[PERIODIC_DISCOUNT]
			,[DEAL_LINE]
			,[DEAL_HEADER_LINE_NO]
			,[DEAL_LINE_NO]
			,[DEAL_LINE_ADDED_AMT]
			,[DEAL_MODIFIER_ADDED_AMT]
			,[DEAL_MODIFIER_LINE_NO]
			,[DISCOUNT_AMT_FOR_PRINTING]
			,[COUPON_DISCOUNT]
			,[COUPON_AMT_FOR_PRINTING]
			,[REPLICATION_COUNTER]
			,[SALES_TYPE]
			,[ORIG_FROM_INFOCODE]
			,[ORIG_FROM_SUBCODE]
			,[PARENT_LINE_NO]
			,[INFOCODE_ENTRY_LINE_NO]
			,[EXCLUDED_BOM_LINE_NO]
			,[INFOCODE_SELECTED_QTY]
			,[PARENT_ITEM_NO]
			,[ORIG_TRANS_STORE]
			,[ORIG_TRANS_POS]
			,[ORIG_TRANS_NO]
			,[ORIG_TRANS_LINE_NO]
			,[REFUND_QTY]
			,[REFUNDED_LINE_NO]
			,[REFUNDED_TRANS_NO]
			,[REFUNDED_POS_NO]
			,[REFUNDED_STORE_NO]
			,[CREATED_BY_STAFF_ID]
			,[VAT_INV_NO]
			,[VAT_INV_LINE_NO]
			,[VAT_INVOICE]
			,[VAT_PROD_POSTING_GROUP]
			,[REFERENCE_NO]
			,[TRANSACTION_TYPE]
			,[NO_OF_ITEMS]
			,[NO_OF_ITEM_LINES]
			,[MEMBER_CARD_CODE]
			,[MEMBER_SCHEME]
			,[REFERENCEID]
			,[W_DELETE_FLG]
			,[W_INTEGRATION_ID]
			,[W_INSERT_DT]
			,[W_UPDATE_DT]
			,[W_DATASOURCE_NUM_ID]
			,[W_BATCH_ID]
			)
		SELECT 
             [DATE_WID]
			,[LOCATION_WID]
			,[ITEM_WID]
			,[MEMBER_WID]
			,[CUSTOMER_WID]
			,[PROMOTION_WID]
			,[STAFF_WID]
			,[LOCATION_CODE]
			,[STORE_CODE]
			,[POS_CODE]
			,[TRANSACTION_NO]
			,[LINE_NO]
			,[RECEIPT_NO]
			,[BARCODE]
			,[ITEM_CODE]
			,[SALES_STAFF]
			,[ITEM_CATEGORY_CODE]
			,[PRODUCT_GROUP_CODE]
			,[PRICE]
			,[NET_PRICE]
			,[QUANTITY]
			,[PRICE_GROUP_CODE]
			,[VAT_BUS_POSTING_GROUP]
			,[VAT_CODE]
			,[XTRANSACTION_STATUS]
			,[DISCOUNT_AMOUNT]
			,[COST_AMOUNT]
			,[COST_AMOUNT_GL]
			,[DATE]
			,[NET_AMOUNT]
			,[VAT_AMOUNT]
			,[STANDARD_NET_PRICE]
			,[DISC_AMOUNT_FROM_STD_PRICE]
			,[CUSTOMER_CODE]
			,[STAFF_ID]
			,[ITEM_POSTING_GROUP]
			,[TOTAL_ROUNDED_AMT]
			,[COUNTER]
			,[VARIANT_CODE]
			,[SERIAL_NO]
			,[MEMBER_POINTS]
			,[OFFER_BLOCKED_POINTS]
			,[TRANS_DATE]
			,[LINE_DISCOUNT]
			,[CUSTOMER_DISCOUNT]
			,[INFOCODE_DISCOUNT]
			,[CUST_INVOICE_DISCOUNT]
			,[UNIT_OF_MEASURE]
			,[UOM_QUANTITY]
			,[UOM_PRICE]
			,[TOTAL_DISCOUNT]
			,[TOTAL_DISC]
			,[TOT_DISC_INFO_LINE_NO]
			,[PERIODIC_DISC_TYPE]
			,[PERIODIC_DISC_GROUP]
			,[PERIODIC_DISCOUNT]
			,[DEAL_LINE]
			,[DEAL_HEADER_LINE_NO]
			,[DEAL_LINE_NO]
			,[DEAL_LINE_ADDED_AMT]
			,[DEAL_MODIFIER_ADDED_AMT]
			,[DEAL_MODIFIER_LINE_NO]
			,[DISCOUNT_AMT_FOR_PRINTING]
			,[COUPON_DISCOUNT]
			,[COUPON_AMT_FOR_PRINTING]
			,[REPLICATION_COUNTER]
			,[SALES_TYPE]
			,[ORIG_FROM_INFOCODE]
			,[ORIG_FROM_SUBCODE]
			,[PARENT_LINE_NO]
			,[INFOCODE_ENTRY_LINE_NO]
			,[EXCLUDED_BOM_LINE_NO]
			,[INFOCODE_SELECTED_QTY]
			,[PARENT_ITEM_NO]
			,[ORIG_TRANS_STORE]
			,[ORIG_TRANS_POS]
			,[ORIG_TRANS_NO]
			,[ORIG_TRANS_LINE_NO]
			,[REFUND_QTY]
			,[REFUNDED_LINE_NO]
			,[REFUNDED_TRANS_NO]
			,[REFUNDED_POS_NO]
			,[REFUNDED_STORE_NO]
			,[CREATED_BY_STAFF_ID]
			,[VAT_INV_NO]
			,[VAT_INV_LINE_NO]
			,[VAT_INVOICE]
			,[VAT_PROD_POSTING_GROUP]
			,[REFERENCE_NO]
			,[TRANSACTION_TYPE]
			,[NO_OF_ITEMS]
			,[NO_OF_ITEM_LINES]
			,[MEMBER_CARD_CODE]
			,[MEMBER_SCHEME]
			,[REFERENCEID]
			,[W_DELETE_FLG]
			,[W_INTEGRATION_ID]
			,[W_INSERT_DT]
			,[W_UPDATE_DT]
			,[W_DATASOURCE_NUM_ID]
			,[W_BATCH_ID]
		FROM #W_SALES_INVOICE_RETAIL_F
		WHERE 1 = 1
			AND W_INS_UPD_FLG = 'I';

		-- Update Missing Master Data
		IF object_id('tempdb..#W_SALES_INVOICE_RETAIL_F_UPDATE') IS NOT NULL
		BEGIN
			DROP TABLE #W_SALES_INVOICE_RETAIL_F_UPDATE;
		END;

		SET @v_log_status = 'INFO';
		SET @v_log_message = 'Updating missing master data in process SIL ' + @v_tgt_table;
		SET @v_error_code = NULL;
		SET @v_error_message = NULL;

		EXECUTE [ADF].[proc_etl_log_message] @p_batch_id = @v_batch_id
			,@p_job_id = @v_job_id
			,@p_log_status = @v_log_status
			,@p_log_message = @v_log_message
			,@p_error_code = @v_error_code
			,@p_error_message = @v_error_message;

		SELECT FF.[W_INTEGRATION_ID]
			,ISNULL(DS2.[LOCATION_WID],0) [LOCATION_WID]
			,ISNULL(DI.[ITEM_WID],0) [ITEM_WID]
			,ISNULL(DM.[MEMBER_WID],0) [MEMBER_WID]
			,ISNULL(DC.[CUSTOMER_WID],0) [CUSTOMER_WID]
			,ISNULL(DP1.[PROMOTION_WID],0) [PROMOTION_WID]
			,ISNULL(DS.[STAFF_WID],0) [STAFF_WID]
			,ISNULL(GL.[REFERENCE],'0') [REFERENCEID]
			,ISNULL(GL.[COST_AMOUNT],0) [COST_AMOUNT_GL]
		
		INTO #W_SALES_INVOICE_RETAIL_F_UPDATE
		FROM DWH.W_SALES_INVOICE_RETAIL_F FF
			LEFT OUTER JOIN [DWH].[W_CUSTOMER_D] DC ON (
					FF.CUSTOMER_CODE = DC.CUSTOMER_CODE
					AND DC.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_ITEM_D] DI ON (
					FF.ITEM_CODE = DI.ITEM_CODE
					AND ISNULL(FF.VARIANT_CODE,'') = ISNULL(DI.VARIANT,'')
					AND DI.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_MEMBER_D] DM ON (
					FF.[MEMBER_CARD_CODE] = DM.[MEMBER_CARD_CODE]
					AND DM.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_STAFF_D] DS ON (
					FF.STAFF_ID = DS.STAFF_ID
					AND DS.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_LOCATION_D] DS2 ON (
					FF.STORE_CODE = DS2.STORE_CODE
					AND DS2.W_DELETE_FLG = 'N'
					AND  ( (format(FF.[DATE],'yyyyMM') < (select min([W_VERSION_PERIOD]) from [DWH].[W_LOCATION_D]) AND DS2.[W_VERSION_PERIOD] = (select min([W_VERSION_PERIOD]) from [DWH].[W_LOCATION_D])) OR
							   (DS2.[W_VERSION_PERIOD] = format(FF.[DATE],'yyyyMM') ))
					)
			LEFT OUTER JOIN [DWH].[W_PROMOTION_D] DP1 ON (
					FF.[PERIODIC_DISC_GROUP] = DP1.PROMOTION_CODE
					AND DP1.W_DELETE_FLG = 'N'
					)
			LEFT OUTER JOIN [DWH].[W_ITEM_GL_ENTRY_F] GL ON (
					FF.STORE_CODE+'-'+FF.[POS_CODE]+'-'+Convert(char(1000),FF.[Transaction_NO]) = GL.[REFERENCE]
					AND FF.ITEM_CODE= GL.ITEM_CODE 
					AND FF.VARIANT_CODE = GL.VARIANT_CODE
					AND GL.W_DELETE_FLG = 'N'
					)
		WHERE 1 = 1
			AND (
                   FF.[CUSTOMER_WID] = 0
				OR FF.[ITEM_WID] = 0
				OR FF.[MEMBER_WID] = 0
				OR FF.[STAFF_WID] = 0
				OR FF.[LOCATION_WID] = 0
				OR FF.[PROMOTION_WID] = 0
				OR FF.[REFERENCEID] = '0'
				);

		UPDATE DWH.W_SALES_INVOICE_RETAIL_F
		SET  [CUSTOMER_WID] = SRC.[CUSTOMER_WID]
			,[ITEM_WID] = SRC.[ITEM_WID]
			,[MEMBER_WID] = SRC.[MEMBER_WID]
			,[STAFF_WID] = SRC.[STAFF_WID]
			,[LOCATION_WID] = SRC.[LOCATION_WID]
			,[PROMOTION_WID] = SRC.[PROMOTION_WID]
			,[REFERENCEID] = SRC.[REFERENCEID]
			,[COST_AMOUNT_GL] = SRC.[COST_AMOUNT_GL]
			
		FROM DWH.W_SALES_INVOICE_RETAIL_F TAR
		INNER JOIN #W_SALES_INVOICE_RETAIL_F_UPDATE SRC ON (TAR.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID);

		-- End process
		SET @v_log_status = 'END';
		SET @v_log_message = 'End process SIL ' + @v_tgt_table;
		SET @v_error_code = NULL;
		SET @v_error_message = NULL;

		EXECUTE [ADF].[proc_etl_log_message] @p_batch_id = @v_batch_id
			,@p_job_id = @v_job_id
			,@p_log_status = @v_log_status
			,@p_log_message = @v_log_message
			,@p_error_code = @v_error_code
			,@p_error_message = @v_error_message;
	END TRY

	BEGIN CATCH
		SELECT @v_error_message = ERROR_MESSAGE()
			,@v_error_serverity = ERROR_SEVERITY()
			,@v_error_code = ERROR_STATE();

		SET @v_log_status = 'ERROR';
		SET @v_log_message = 'Cannot End Batch ';

		-- Insert data to table LOG
		EXECUTE [ADF].[proc_etl_log_message] @p_batch_id = @v_batch_id
			,@p_job_id = @v_job_id
			,@p_log_status = @v_log_status
			,@p_log_message = @v_log_message
			,@p_error_code = @v_error_code
			,@p_error_message = @v_error_message

		RAISERROR (
				@v_error_message
				,-- Message text.  
				@v_error_serverity
				,-- Severity.  
				@v_error_code -- State.  
				);
	END CATCH
END;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_CALENDAR_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_CALENDAR_D] @START_DATE [DATETIME],@END_DATE [DATETIME] AS
BEGIN
	SET NOCOUNT ON;
	TRUNCATE TABLE DWH.W_CALENDAR_D;


	WITH e1(n)
	AS
	(
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1
	),
	e2(n) AS (SELECT 1 FROM e1 CROSS JOIN e1 AS b), -- 10*10
	e3(n) AS (SELECT 1 FROM e1 CROSS JOIN e2 as c), -- 10*100
	e4(n) AS (SELECT 1 FROM e2 CROSS JOIN e3), -- 100*1000
	CTE0 
	AS 
	(
		SELECT n = ROW_NUMBER() OVER (ORDER BY n) FROM e4
	),
	CTE1
	AS
	(
		SELECT n, DATEADD(DAY,n-1,@START_DATE) AS CALENDAR_DATE FROM CTE0
	),
	CTE2
	AS
	(
		SELECT FORMAT(CALENDAR_DATE,'yyyyMMdd') AS [DATE_KEY],
				CASE
					WHEN (DATENAME(weekday, CALENDAR_DATE) = 'Sunday') THEN 'N' 
					ELSE 'Y' END AS [IS_WORKING_DAY]
		FROM CTE1
		WHERE CALENDAR_DATE <= dateadd(day,-1,format(dateadd(year,4,GETDATE()),'yyyy'))
	)

	INSERT INTO DWH.W_CALENDAR_D (DATE_WID, IS_WORKING_DAY)
	SELECT [DATE_KEY], [IS_WORKING_DAY]
	FROM CTE2

	
END
GO
/****** Object:  StoredProcedure [DWH].[proc_W_CF_BANK_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_CF_BANK_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_CF_BANK_D',
	@V_src_table nvarchar(100) = 'W_CF_DAILY_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='CFE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRIM([bank]) [bank],
			    'N' as W_DELETE_FLG,
			    TRIM([bank]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    @v_batch_id W_BATCH_ID,
			    row_number() over (partition by TRIM([bank]) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_CF_DAILY_FS]
		)
		insert into #W_CF_BANK_D_TMP
		select
			[bank],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_CF_CURRENCY_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_CF_CURRENCY_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_CF_CURRENCY_D',
	@V_src_table nvarchar(100) = 'W_CF_DAILY_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='CFE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRIM([CURRENCY]) [CURRENCY],
			    'N' as W_DELETE_FLG,
			    TRIM([CURRENCY]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    @v_batch_id W_BATCH_ID,
			    row_number() over (partition by TRIM([CURRENCY]) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_CF_DAILY_FS]
		)
		insert into #W_CF_CURRENCY_D_TMP
		select
			[CURRENCY],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_CF_DAILY_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_CF_DAILY_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_CF_DAILY_F',
	@V_src_table nvarchar(100) = 'W_CF_DAILY_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='CFE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				left(right(A.[w_file_name],13),8) [DATE_WID],
				ISNULL(B.[ROW_WID],0) [BANK_WID],
				ISNULL(C.[ROW_WID],0) [CURRENCY_WID],
				try_cast(a.stt as bigint) [STT],
				TRIM(A.[targets]) [targets],
				ISNULL(TRY_CAST(A.[total(VND)] AS FLOAT),0) [total(VND)],
				TRIM(A.[bank]) [bank],
				TRIM(A.[currency]) [currency],
				ISNULL(TRY_CAST(A.[amount] AS FLOAT),0) [amount],
			    'N' W_DELETE_FLG,
				CONCAT(left(right(A.[w_file_name],13),8),'~',TRIM(A.[targets]),'~',TRIM(A.[bank]),'~',TRIM(A.[currency])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(left(right(A.[w_file_name],13),8),'~',TRIM(A.[targets]),'~',TRIM(A.[bank]),'~',TRIM(A.[currency])) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_CF_DAILY_FS] A 
			LEFT JOIN [DWH].[W_CF_BANK_D] B ON TRIM(A.[bank]) = B.[bank]
			LEFT JOIN [DWH].[W_CF_CURRENCY_D] C ON TRIM(A.[CURRENCY]) = C.[CURRENCY]
	
				
		)
		insert into #W_CF_DAILY_F_TMP
		select
			[DATE_WID],
			[BANK_WID],
			[CURRENCY_WID],
			[STT],
			[TARGETS],
			[TOTAL(VND)],
			[BANK],
			[CURRENCY],
			[AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+@v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT[DATE_WID] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID'
		EXEC sp_executesql @v_script;

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_CF_MONTHLY_ACTUAL_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_CF_MONTHLY_ACTUAL_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_CF_MONTHLY_ACTUAL_F',
	@V_src_table nvarchar(100) = 'W_CF_MONTHLY_ACTUAL_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='CFE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				format(cast(LEFT(RIGHT([w_file_name],9),4)+'-'+[MONTH]+'-01' as datetime),'yyyyMMdd') [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				ISNULL(TRY_CAST([AMT] AS FLOAT),0) [AMT],
			    '0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID,
				1 ROW_NUM
			FROM (SELECT TRIM([No])[No]
					  ,[Jan]
					  ,[Feb]
					  ,[Mar]
					  ,[Apr]
					  ,[May]
					  ,[Jun]
					  ,[Jul]
					  ,[Aug]
					  ,[Sep]
					  ,[Oct]
					  ,[Nov]
					  ,[Dec]
					  ,[w_file_name]
				  FROM [STG].[W_CF_MONTHLY_ACTUAL_FS] where isnull(Note,'') <> N'Không cần nhập'
				  ) A


				UNPIVOT ([AMT] FOR [MONTH] IN ([Jan]
					  ,[Feb]
					  ,[Mar]
					  ,[Apr]
					  ,[May]
					  ,[Jun]
					  ,[Jul]
					  ,[Aug]
					  ,[Sep]
					  ,[Oct]
					  ,[Nov]
					  ,[Dec])) AS UnPVT
				LEFT JOIN [DWH].[W_LAC_CF_D] B ON UnPVT.[NO] = COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE])
		)
		insert into #W_CF_MONTHLY_ACTUAL_F_TMP 
		select
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[AMT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		SET @v_script = 'DELETE tar from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT [DATE_WID] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID'
		EXEC sp_executesql @v_script;

	


		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F',
	@V_src_table nvarchar(100) = 'W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='CFE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
			case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01') end [DATE_WID],
			TRIM([TYPE]) [TYPE],
			TRIM([CUSTOMER]) [CUSTOMER_CODE],
			TRIM([NOTE]) [NOTE],
			SUM(TRY_CAST([VALUE] AS FLOAT)) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			
			  [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS]
			WHERE TRY_CAST([VALUE] AS FLOAT) IS NOT NULL
			GROUP BY case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01') end,TRIM([TYPE]),TRIM([CUSTOMER]),TRIM([NOTE])
			
		)
		insert into #W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F_TMP 
		select
			[DATE_WID],
			[TYPE],
			[CUSTOMER_CODE],
			[NOTE],
			[AMT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		SET @v_script = 'DELETE tar from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT [DATE_WID] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID'
		EXEC sp_executesql @v_script;

	


		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_EXE_CF_MONTHLY_FORECAST_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_EXE_CF_MONTHLY_FORECAST_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_EXE_CF_MONTHLY_FORECAST_F',
	@V_src_table nvarchar(100) = 'W_EXE_CF_MONTHLY_FORECAST_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='CFE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01') [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				TRY_CAST([AMT] AS FLOAT) [AMT],
			    '0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID,
				1 ROW_NUM
			FROM  [STG].[W_EXE_CF_MONTHLY_FORECAST_FS] A
				LEFT JOIN [DWH].[W_LAC_CF_D] B ON A.[NO] = COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE])
			where isnull(Note,'') <> N'Không cần nhập'and try_cast([MONTH_YEAR] as datetime) is not null and TRY_CAST([AMT] AS FLOAT) is not null

			UNION ALL
			SELECT 
				format(cast(LEFT(RIGHT([w_file_name],9),4)+'-'+[MONTH]+'-01' as datetime),'yyyyMMdd') [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST([AMT] AS FLOAT),0) [AMT],
			    '0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID,
				1 ROW_NUM
			FROM (SELECT  TRIM([FACTORY_NAME]) [FACTORY_NAME]
						  ,TRIM([TITLE]) [TITLE]
						  ,TRY_CAST([T1]	AS FLOAT)    [1]
						  ,TRY_CAST([T2]	AS FLOAT)    [2]
						  ,TRY_CAST([T3]	AS FLOAT)    [3]
						  ,TRY_CAST([T4]	AS FLOAT)    [4]
						  ,TRY_CAST([T5]	AS FLOAT)    [5]
						  ,TRY_CAST([T6]	AS FLOAT)    [6]
						  ,TRY_CAST([T7]	AS FLOAT)    [7]
						  ,TRY_CAST([T8]	AS FLOAT)    [8]
						  ,TRY_CAST([T9]	AS FLOAT)    [9]
						  ,TRY_CAST([T10]   AS FLOAT) [10]
						  ,TRY_CAST([T11]   AS FLOAT) [11]
						  ,TRY_CAST([T12]   AS FLOAT) [12]
						  ,[w_file_name]
					  FROM [STG].[W_EXE_CF_MONTHLY_SALARY_FORECAST_FS] WHERE TITLE <> N'Tiền BHXH-BHYT-BHTN'
				  ) A


				UNPIVOT ([AMT] FOR [MONTH] IN (
					   [1]
					  ,[2]
					  ,[3]
					  ,[4]
					  ,[5]
					  ,[6]
					  ,[7]
					  ,[8]
					  ,[9]
					  ,[10]
					  ,[11]
					  ,[12])) AS UnPVT
				LEFT JOIN [DWH].[W_LAC_CF_D] B ON CONCAT(B.LV1_NAME,CASE WHEN B.LV2_NAME IS NULL THEN '' ELSE '~' END,B.LV2_NAME,CASE WHEN B.LV3_NAME IS NULL THEN '' ELSE '~' END,B.LV3_NAME,CASE WHEN B.LV4_NAME IS NULL THEN '' ELSE '~' END,B.LV4_NAME,CASE WHEN B.LV5_NAME IS NULL THEN '' ELSE '~' END,B.LV5_NAME) LIKE CONCAT('%',UnPVT.[FACTORY_NAME],'~',UnPVT.[TITLE])

			
			UNION ALL
			SELECT 
				format(cast(LEFT(RIGHT([w_file_name],9),4)+'-'+[MONTH]+'-01' as datetime),'yyyyMMdd') [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST([AMT] AS FLOAT),0) [AMT],
			    '0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID,
				1 ROW_NUM
			FROM (SELECT  TRIM([FACTORY_NAME]) [FACTORY_NAME]
						  ,TRIM([TITLE]) [TITLE]
						  ,TRY_CAST([T1]	AS FLOAT)    [1]
						  ,TRY_CAST([T2]	AS FLOAT)    [2]
						  ,TRY_CAST([T3]	AS FLOAT)    [3]
						  ,TRY_CAST([T4]	AS FLOAT)    [4]
						  ,TRY_CAST([T5]	AS FLOAT)    [5]
						  ,TRY_CAST([T6]	AS FLOAT)    [6]
						  ,TRY_CAST([T7]	AS FLOAT)    [7]
						  ,TRY_CAST([T8]	AS FLOAT)    [8]
						  ,TRY_CAST([T9]	AS FLOAT)    [9]
						  ,TRY_CAST([T10]   AS FLOAT) [10]
						  ,TRY_CAST([T11]   AS FLOAT) [11]
						  ,TRY_CAST([T12]   AS FLOAT) [12]
						  ,[w_file_name]
					  FROM [STG].[W_EXE_CF_MONTHLY_SALARY_FORECAST_FS] WHERE TITLE = N'Tiền BHXH-BHYT-BHTN'
				  ) A


				UNPIVOT ([AMT] FOR [MONTH] IN (
					   [1]
					  ,[2]
					  ,[3]
					  ,[4]
					  ,[5]
					  ,[6]
					  ,[7]
					  ,[8]
					  ,[9]
					  ,[10]
					  ,[11]
					  ,[12])) AS UnPVT
				LEFT JOIN [DWH].[W_LAC_CF_D] B ON UnPVT.[TITLE] = COALESCE(B.[LV5_NAME],B.[LV4_NAME],B.[LV3_NAME],B.[LV2_NAME],B.[LV1_NAME])

			-- HADDAD
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			3 W_DATASOURCE_NUM_ID,
			1 W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.1' and A.[CUSTOMER] LIKE '%HADDAD%'
			  and a.[TYPE] = 'FOB'
			JOIN

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE '%HADDAD%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER]  LIKE '%HADDAD%' and c.[LOAI_HINH] = 'FOB'
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]

			-- HIS
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.2' and A.[CUSTOMER] LIKE '%HIS%'
			  and a.[TYPE] = 'FOB'
			JOIN

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where  [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE '%HIS%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER]  LIKE '%HIS%' and c.[LOAI_HINH] = 'FOB'
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]

			-- Garan
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.3' and A.[CUSTOMER] LIKE '%Garan%'
			  and a.[TYPE] = 'FOB'
			JOIN

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and  [CUSTOMER]  LIKE '%Garan%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER]  LIKE '%Garan%' and c.[LOAI_HINH] = 'FOB'
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]

			-- Target
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.4' and A.[CUSTOMER] LIKE '%Target%'
			  and a.[TYPE] = 'FOB'
			JOIN

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE '%Target%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER]  LIKE '%Target%' and c.[LOAI_HINH] = 'FOB'
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]
			
			-- Aeo
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.5' and A.[CUSTOMER] LIKE '%Aeo%'
			  and a.[TYPE] = 'FOB'
			JOIN

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE '%Aeo%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER]  LIKE '%Aeo%' and c.[LOAI_HINH] = 'FOB'
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]
			
			-- Adidas
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.6' and A.[CUSTOMER] LIKE '%Adidas%'
			  and a.[TYPE] = 'FOB'
			JOIN

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE '%Adidas%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER]  LIKE '%Adidas%' and c.[LOAI_HINH] = 'FOB'
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]

			-- Lifung
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.7' and A.[CUSTOMER] LIKE '%Lifung%'
			  and a.[TYPE] = 'FOB'	  
			JOIN

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE '%Lifung%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER]  LIKE '%Lifung%' and c.[LOAI_HINH] = 'FOB'
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]

			-- Khác (Asia, NW360...)
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.8' and A.[CUSTOMER] not in ('ADIDAS','AEO','GARAN','HADDAD-LEVIS','HADDAD-NIKE','HIS','LIFUNG01','TARGET','HADDAD')
			  and a.[TYPE] = 'FOB'
			JOIN

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE N'%Khác%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER]  LIKE N'%Khác%' and c.[LOAI_HINH] = 'FOB'
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]

			-- GC MAY
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.2.1'  and trim(a.[TYPE]) = 'GC MAY' 
			JOIN 

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where trim([LOAI_HINH]) = 'GC MAY' and [CUSTOMER] = a.[CUSTOMER] and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER] = a.[CUSTOMER]
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]

			-- GC MAY XK
			UNION ALL
			SELECT 
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			SUM([AMT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID,
			1 ROW_NUM
			FROM
			(
			SELECT 
				case WHEN try_cast([MONTH_YEAR] as datetime) is NULL then '19000101' else format(DATEADD(MONTH,c.[VALUE],try_cast([MONTH_YEAR] as datetime)),'yyyyMM01') end [DATE_WID],
				ISNULL(B.[ROW_WID],0) [RL_WID],
				B.[STT],
				B.[REPORT_VIEW],
				B.[LV1_CODE],
				B.[LV2_CODE],
				B.[LV3_CODE],
				B.[LV4_CODE],
				B.[LV5_CODE],
				COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) [LV0_CODE],
				ISNULL(TRY_CAST(a.[VALUE] AS FLOAT),0)/[N1] [AMT]
			from [STG].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_FS] A
			
			JOIN [DWH].[W_LAC_CF_D] B ON COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.2.2'  and trim(a.[TYPE]) = 'GC MAY XK' 
			JOIN 

			(
			SELECT DISTINCT 
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS]

			UNION
			select
			trim([LOAI_HINH]) [LOAI_HINH],
			trim([CUSTOMER]) [CUSTOMER],
			format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') [EFFECTIVE_FROM],
			CAST(ROUND(ISNULL(TRY_cast([PAYMENT_TERM] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([PAYMENT_TERM] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			from
			[STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] 
			)
			C on (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where trim([LOAI_HINH]) = 'GC MAY XK' and [CUSTOMER] = a.[CUSTOMER] and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= format(try_cast([MONTH_YEAR] as datetime),'yyyyMM01')) =  c.[EFFECTIVE_FROM] and C.[CUSTOMER] = a.[CUSTOMER]
			) A 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] EX ON 1=1
			GROUP BY [DATE_WID],[RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]

		)
		insert into #W_EXE_CF_MONTHLY_FORECAST_F_TMP 
		select
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			[AMT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			W_VERSION_PERIOD,
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		SET @v_script = 'DELETE tar from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT [DATE_WID] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID'
		EXEC sp_executesql @v_script;
		*/
	
		SET @v_script = 'DELETE tar from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar WHERE [W_VERSION_PERIOD] = FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),''yyyyMMdd'')'
		EXEC sp_executesql @v_script;

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_EXE_CF_MONTHLY_SX_MDK_FORECAST_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_EXE_CF_MONTHLY_SX_MDK_FORECAST_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_EXE_CF_MONTHLY_SX_MDK_FORECAST_F',
	@V_src_table nvarchar(100) = 'W_EXE_CF_MONTHLY_SX_MDK_FORECAST_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='CFE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				format(cast(LEFT(RIGHT([w_file_name],9),4)+'-'+[MONTH]+'-01' as datetime),'yyyyMMdd') [DATE_WID],
				[BST],
				ISNULL(TRY_CAST([AMT] AS FLOAT),0) [AMT],
			    '0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID,
				1 ROW_NUM
			FROM (SELECT TRIM([BST]) [BST]
						  ,[Month 01] [01]
						  ,[Month 02] [02]
						  ,[Month 03] [03]
						  ,[Month 04] [04]
						  ,[Month 05] [05]
						  ,[Month 06] [06]
						  ,[Month 07] [07]
						  ,[Month 08] [08]
						  ,[Month 09] [09]
						  ,[Month 10] [10]
						  ,[Month 11] [11]
						  ,[Month 12] [12]
						  ,[w_file_name]
					  FROM [STG].[W_EXE_CF_MONTHLY_SX_MDK_FORECAST_FS]
				  ) A


				UNPIVOT ([AMT] FOR [MONTH] in ([01],[02],[03],[04],[05],[06],[07],[08],[09],[10],[11],[12])) AS UnPVT

		)
		insert into #W_EXE_CF_MONTHLY_SX_MDK_FORECAST_F_TMP 
		select
			[DATE_WID],
			[BST],
			[AMT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			W_VERSION_PERIOD,
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		SET @v_script = 'DELETE tar from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT [DATE_WID] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID'
		EXEC sp_executesql @v_script;
		*/
	
		SET @v_script = 'DELETE tar from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar WHERE [W_VERSION_PERIOD] = FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),''yyyyMMdd'')'
		EXEC sp_executesql @v_script;

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_ADDRESSES_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_ADDRESSES_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_ADDRESSES_D',
	@V_src_table nvarchar(100) = 'W_HAR_ADDRESSES_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				A.[ADDRESS1],
				A.[ADDRESS2],
				A.[CITY],
				A.[COMPANY],
				A.[COUNTRY],
				A.[COUNTRY_CODE],
				CAST(TRY_CAST(A.[CUSTOMER_ID] AS FLOAT) AS BIGINT) [CUSTOMER_ID],
				TRY_CAST(A.[DEFAULT] AS BIT) [DEFAULT],
				A.[DISTRICT],
				A.[DISTRICT_CODE],
				A.[FIRST_NAME],
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) [ID],
				A.[LAST_NAME],
				A.[NAME],
				A.[PHONE],
				A.[PROVINCE],
				A.[PROVINCE_CODE],
				A.[WARD],
				A.[WARD_CODE],
				CAST(TRY_CAST(A.[ZIP] AS FLOAT) AS INT) [ZIP],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_HAR_ADDRESSES_DS] A 
		)
		insert into #W_HAR_ADDRESSES_D_TMP
		select
			[ADDRESS1],
			[ADDRESS2],
			[CITY],
			[COMPANY],
			[COUNTRY],
			[COUNTRY_CODE],
			[CUSTOMER_ID],
			[DEFAULT],
			[DISTRICT],
			[DISTRICT_CODE],
			[FIRST_NAME],
			[ID],
			[LAST_NAME],
			[NAME],
			[PHONE],
			[PROVINCE],
			[PROVINCE_CODE],
			[WARD],
			[WARD_CODE],
			[ZIP],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_CHANNEL_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_CHANNEL_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_CHANNEL_D',
	@V_src_table nvarchar(100) = 'W_HAR_LOCATIONS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end


			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				TRIM(CHANNEL_CODE) CHANNEL_CODE,
				LOCATION_ID,
				CHANNEL_NAME,
			    'N' as W_DELETE_FLG,
			    CONCAT(TRIM(CHANNEL_CODE),'~',LOCATION_ID) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    @p_batch_id W_BATCH_ID,
			    row_number() over (partition by CONCAT(TRIM(CHANNEL_CODE),'~',LOCATION_ID) order by (SELECT NULL) desc) as ROW_NUM
			FROM ( SELECT 
			  DISTINCT TRIM([SOURCE_NAME]) CHANNEL_CODE
			  ,B.ID LOCATION_ID
			  ,ISNULL(TRIM(B.[NAME]),TRIM([SOURCE_NAME])) CHANNEL_NAME 
			  FROM [STG].[W_HAR_ORDERS_FS]
			  A LEFT JOIN ( SELECT DISTINCT [ID],[NAME] FROM [DWH].[W_HAR_LOCATIONS_D] ) B  
				ON TRIM(A.[SOURCE_NAME]) ='POS') A
		)
		insert into #W_HAR_CHANNEL_D_TMP
		select
			CHANNEL_CODE,
			LOCATION_ID,
			CHANNEL_NAME,
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_COLLECTIONS_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_COLLECTIONS_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_COLLECTIONS_D',
	@V_src_table1 nvarchar(100) = 'W_HAR_CUSTOM_COLLECTIONS_DS',
	@V_src_table2 nvarchar(100) = 'W_HAR_SMART_COLLECTIONS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				[BODY_HTML],
				[HANDLE],
				CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) [ID],
				'CUSTOM' [TYPE],
				[IMAGE],
				TRY_CAST([PUBLISHED] AS BIT) [PUBLISHED],
				NULL [DISJUNCTIVE],
				TRY_CAST([PUBLISHED_AT] AS DATETIME) [PUBLISHED_AT],
				[PUBLISHED_SCOPE],
				[SORT_ORDER],
				[TEMPLATE_SUFFIX],
				[TITLE],
				TRY_CAST([UPDATED_AT] AS DATETIME) [UPDATED_AT],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by TRY_CAST([PUBLISHED_AT] AS DATETIME) desc) as ROW_NUM
			FROM [STG].[W_HAR_CUSTOM_COLLECTIONS_DS]
			UNION ALL
			SELECT
				[BODY_HTML],
				[HANDLE],
				CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) [ID],
				'SMART' [TYPE],
				[IMAGE],
				NULL [PUBLISHED],
				TRY_CAST([DISJUNCTIVE] AS BIT) [DISJUNCTIVE],
				TRY_CAST([PUBLISHED_AT] AS DATETIME) [PUBLISHED_AT],
				[PUBLISHED_SCOPE],
				[SORT_ORDER],
				[TEMPLATE_SUFFIX],
				[TITLE],
				TRY_CAST([UPDATED_AT] AS DATETIME) [UPDATED_AT],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by TRY_CAST([PUBLISHED_AT] AS DATETIME) desc) as ROW_NUM
			FROM [STG].[W_HAR_SMART_COLLECTIONS_DS]
		)
		insert into #W_HAR_COLLECTIONS_D_TMP
		select
			[BODY_HTML],
			[HANDLE],
			[ID],
			[TYPE],
			[IMAGE],
			[PUBLISHED],
			[DISJUNCTIVE],
			[PUBLISHED_AT],
			[PUBLISHED_SCOPE],
			[SORT_ORDER],
			[TEMPLATE_SUFFIX],
			[TITLE],
			[UPDATED_AT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_COLLECTS_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_COLLECTS_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_COLLECTS_D',
	@V_src_table nvarchar(100) = 'W_HAR_COLLECTS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(B.[ROW_WID],0) [COLLECTION_WID],
				ISNULL(C.[ROW_WID],0) [PRODUCT_WID],
				CAST(TRY_CAST(A.[COLLECTION_ID] AS FLOAT) AS BIGINT) [COLLECTION_ID],
				TRY_CAST(A.[CREATED_AT] AS DATETIME) [CREATED_AT],
				TRY_CAST(A.[FEATURED] AS BIT) [FEATURED],
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) [ID],
				TRY_CAST(A.[POSITION] AS INT) [POSITION],
				CAST(TRY_CAST(A.[PRODUCT_ID] AS FLOAT) AS BIGINT) [PRODUCT_ID],
				A.[SORT_VALUE],
				TRY_CAST(A.[UPDATED_AT] AS DATETIME) [UPDATED_AT],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) order by TRY_CAST(A.[CREATED_AT] AS DATETIME) desc) as ROW_NUM
			FROM [STG].[W_HAR_COLLECTS_DS] A
			LEFT JOIN [DWH].[W_HAR_COLLECTIONS_D] B ON CAST(TRY_CAST(A.[COLLECTION_ID] AS FLOAT) AS BIGINT) = B.[ID]
			LEFT JOIN [DWH].[W_HAR_PRODUCTS_D] C ON CAST(TRY_CAST(A.[PRODUCT_ID] AS FLOAT) AS BIGINT) = C.[ID]
		)
		insert into #W_HAR_COLLECTS_D_TMP
		select
			[COLLECTION_WID],
			[PRODUCT_WID],
			[COLLECTION_ID],
			[CREATED_AT],
			[FEATURED],
			[ID],
			[POSITION],
			[PRODUCT_ID],
			[SORT_VALUE],
			[UPDATED_AT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_CUSTOMERS_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_CUSTOMERS_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_CUSTOMERS_D',
	@V_src_table nvarchar(100) = 'W_HAR_CUSTOMERS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end

	
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRY_CAST([ACCEPTS_MARKETING] AS BIT) [ACCEPTS_MARKETING],
				TRY_CAST([BIRTHDAY] AS DATETIME) [BIRTHDAY],
				TRY_CAST([CREATED_AT] AS DATETIME) [CREATED_AT],
				CAST(TRY_CAST([DEFAULT_ADDRESS_ID] AS FLOAT) AS BIGINT) [DEFAULT_ADDRESS_ID],
				[EMAIL],
				CASE WHEN [FIRST_NAME] = 'None' then '' else [FIRST_NAME] end [FIRST_NAME],
				CAST(TRY_CAST([GENDER] AS FLOAT) AS INT) [GENDER],
				[GROUP_NAME],
				CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) [ID],
				CASE WHEN [LAST_NAME] = 'None' then '' else [LAST_NAME] end [LAST_NAME],
				TRY_CAST([LAST_ORDER_DATE] AS DATETIME) [LAST_ORDER_DATE],
				CAST(TRY_CAST([LAST_ORDER_ID] AS FLOAT) AS BIGINT) [LAST_ORDER_ID],
				[LAST_ORDER_NAME],
				[MULTIPASS_IDENTIFIER],
				[NOTE],
				CAST(TRY_CAST([ORDERS_COUNT] AS FLOAT) AS INT) [ORDERS_COUNT],
				[PHONE],
				[STATE],
				[TAGS],
				TRY_CAST([TOTAL_PAID] AS FLOAT) [TOTAL_PAID],
				TRY_CAST([TOTAL_SPENT] AS FLOAT) [TOTAL_SPENT],
				TRY_CAST([UPDATED_AT] AS DATETIME) [UPDATED_AT],
				TRY_CAST([VERIFIED_EMAIL] AS BIT) [VERIFIED_EMAIL],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by [CREATED_AT] desc) as ROW_NUM
			FROM [STG].[W_HAR_CUSTOMERS_DS]
		)
		insert into #W_HAR_CUSTOMERS_D_TMP
		select
			[ACCEPTS_MARKETING],
			[BIRTHDAY],
			[CREATED_AT],
			[DEFAULT_ADDRESS_ID],
			[EMAIL],
			[FIRST_NAME],
			[GENDER],
			[GROUP_NAME],
			[ID],
			[LAST_NAME],
			[LAST_ORDER_DATE],
			[LAST_ORDER_ID],
			[LAST_ORDER_NAME],
			[MULTIPASS_IDENTIFIER],
			[NOTE],
			[ORDERS_COUNT],
			[PHONE],
			[STATE],
			[TAGS],
			[TOTAL_PAID],
			[TOTAL_SPENT],
			[UPDATED_AT],
			[VERIFIED_EMAIL],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_DISCOUNT_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_DISCOUNT_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_DISCOUNT_D',
	@V_src_table nvarchar(100) = 'W_HAR_DISCOUNTS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRY_CAST([APPLIES_ONCE] AS BIT) [APPLIES_ONCE],
				CAST(TRY_CAST([APPLIES_TO_ID] AS FLOAT) AS BIGINT) [APPLIES_TO_ID],
				TRY_CAST([APPLIES_TO_QUANTITY] AS INT) [APPLIES_TO_QUANTITY],
				[APPLIES_TO_RESOURCE],
				[CHANNEL],
				[CODE],
				CAST(TRY_CAST([CREATE_USER] AS FLOAT) AS BIGINT) [CREATE_USER],
				TRY_CAST([CREATED_AT] AS DATETIME) [CREATED_AT],
				[DISCOUNT_TYPE],
				TRY_CAST([ENDS_AT] AS DATETIME) [ENDS_AT],
				[FIRST_NAME],
				CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) [ID],
				TRY_CAST([IS_ADVANCE_SAME_PRICE_DISCOUNT] AS BIT) [IS_ADVANCE_SAME_PRICE_DISCOUNT],
				TRY_CAST([IS_NEW_COUPON] AS BIT) [IS_NEW_COUPON],
				TRY_CAST([IS_PROMOTION] AS BIT) [IS_PROMOTION],
				[LAST_NAME],
				TRY_CAST([MAX_AMOUNT_APPLY] AS FLOAT) [MAX_AMOUNT_APPLY],
				TRY_CAST([MINIMUM_ORDER_AMOUNT] AS FLOAT) [MINIMUM_ORDER_AMOUNT],
				[ORDER_OVER],
				[PROMOTION_APPLY_TYPE],
				TRY_CAST([STARTS_AT] AS DATETIME) [STARTS_AT],
				[STATUS],
				TRY_CAST([TIMES_USED] AS INT) [TIMES_USED],
				TRY_CAST([UPDATED_AT] AS DATETIME) [UPDATED_AT],
				TRY_CAST([USAGE_LIMIT] AS INT) [USAGE_LIMIT],
				TRY_CAST([VALUE] AS FLOAT) [VALUE],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by [CREATED_AT] desc) as ROW_NUM
			FROM [STG].[W_HAR_DISCOUNTS_DS]
		)
		insert into #W_HAR_DISCOUNT_D_TMP
		select
			[APPLIES_ONCE],
			[APPLIES_TO_ID],
			[APPLIES_TO_QUANTITY],
			[APPLIES_TO_RESOURCE],
			[CHANNEL],
			[CODE],
			[CREATE_USER],
			[CREATED_AT],
			[DISCOUNT_TYPE],
			[ENDS_AT],
			[FIRST_NAME],
			[ID],
			[IS_ADVANCE_SAME_PRICE_DISCOUNT],
			[IS_NEW_COUPON],
			[IS_PROMOTION],
			[LAST_NAME],
			[MAX_AMOUNT_APPLY],
			[MINIMUM_ORDER_AMOUNT],
			[ORDER_OVER],
			[PROMOTION_APPLY_TYPE],
			[STARTS_AT],
			[STATUS],
			[TIMES_USED],
			[UPDATED_AT],
			[USAGE_LIMIT],
			[VALUE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_IMAGES_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_IMAGES_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_IMAGES_D',
	@V_src_table nvarchar(100) = 'W_HAR_IMAGES_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRY_CAST([CREATED_AT] AS DATETIME) [CREATED_AT],
				[FILENAME],
				CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) [ID],
				CAST(TRY_CAST([POSITION] AS FLOAT) AS INT) [POSITION],
				CAST(TRY_CAST([PRODUCT_ID] AS FLOAT) AS BIGINT) [PRODUCT_ID],
				[SRC],
				TRY_CAST([UPDATED_AT] AS DATETIME) [UPDATED_AT],
				[VARIANT_IDS],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by [CREATED_AT] desc) as ROW_NUM
			FROM [STG].[W_HAR_IMAGES_DS]
		)
		insert into #W_HAR_IMAGES_D_TMP
		select
			[CREATED_AT],
			[FILENAME],
			[ID],
			[POSITION],
			[PRODUCT_ID],
			[SRC],
			[UPDATED_AT],
			[VARIANT_IDS],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_LOCATIONS_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_LOCATIONS_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_LOCATIONS_D',
	@V_src_table nvarchar(100) = 'W_HAR_LOCATIONS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				[ADDRESS1],
				[ADDRESS2],
				[CITY],
				[COUNTRY],
				[COUNTRY_CODE],
				[COUNTRY_NAME],
				TRY_CAST([CREATED_AT] AS DATETIME) [CREATED_AT],
				[DISTRICT],
				[DISTRICT_CODE],
				[EMAIL],
				CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) [ID],
				TRY_CAST([IS_PRIMARY] AS BIT) [IS_PRIMARY],
				TRY_CAST([IS_UNAVAILABLE_QUANTITY] AS BIT) [IS_UNAVAILABLE_QUANTITY],
				[LOCATION_TYPE],
				[NAME],
				[PHONE],
				[PROVINCE],
				[PROVINCE_CODE],
				[TYPE],
				TRY_CAST([UPDATED_AT] AS DATETIME) [UPDATED_AT],
				[WARD],
				[WARD_CODE],
				[ZIP],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by TRY_CAST([CREATED_AT] AS DATETIME) desc) as ROW_NUM
			FROM [STG].[W_HAR_LOCATIONS_DS]
		)
		insert into #W_HAR_LOCATIONS_D_TMP
		select
			[ADDRESS1],
			[ADDRESS2],
			[CITY],
			[COUNTRY],
			[COUNTRY_CODE],
			[COUNTRY_NAME],
			[CREATED_AT],
			[DISTRICT],
			[DISTRICT_CODE],
			[EMAIL],
			[ID],
			[IS_PRIMARY],
			[IS_UNAVAILABLE_QUANTITY],
			[LOCATION_TYPE],
			[NAME],
			[PHONE],
			[PROVINCE],
			[PROVINCE_CODE],
			[TYPE],
			[UPDATED_AT],
			[WARD],
			[WARD_CODE],
			[ZIP],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_ORDERS_DISCOUNT_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_ORDERS_DISCOUNT_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_ORDERS_DISCOUNT_F',
	@V_src_table nvarchar(100) = 'W_HAR_DISCOUNT_CODES_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(OD.ROW_WID,0) ORDER_WID,
				ISNULL(DC.ROW_WID,0) [DISCOUNT_WID],
				TRY_cAST(A.[AMOUNT] AS FLOAT) [AMOUNT],
				TRIM(A.[CODE]) [CODE],
				TRY_cAST(A.[IS_COUPON_CODE] AS BIT) [IS_COUPON_CODE],
				CAST(TRY_cAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) [ORDER_ID],
				TRIM(A.[TYPE]) [TYPE],
			    'N' W_DELETE_FLG,
				CONCAT(TRIM(A.[CODE]),'~',CAST(TRY_cAST(A.[ORDER_ID] AS FLOAT) AS BIGINT),'~',TRIM(A.[TYPE])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(TRIM(A.[CODE]),'~',CAST(TRY_cAST(A.[ORDER_ID] AS FLOAT) AS BIGINT),'~',TRIM(A.[TYPE])) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_HAR_DISCOUNT_CODES_FS]  A 
			LEFT JOIN [DWH].[W_HAR_ORDERS_F] OD ON CAST(TRY_cAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) = OD.ID
			LEFT JOIN [DWH].[W_HAR_DISCOUNT_D] DC ON TRIM(A.[CODE]) = DC.[CODE]
		)
		insert into #W_HAR_ORDERS_DISCOUNT_F_TMP
		select
			ORDER_WID,
			[DISCOUNT_WID],
			[AMOUNT],
			[CODE],
			[IS_COUPON_CODE],
			[ORDER_ID],
			[TYPE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process
		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		
		SET @v_script =
				'DELETE ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' WHERE ORDER_ID IN (SELECT DISTINCT ORDER_ID FROM '+@v_tmp_dwh_table+')' 
				EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_ORDERS_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_ORDERS_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_ORDERS_F',
	@V_src_table nvarchar(100) = 'W_HAR_ORDERS_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				CASE WHEN TRY_CAST(A.[CREATED_AT] AS DATETIME) IS NULL THEN '19000101' ELSE
				FORMAT(DATEADD(HOUR,7,TRY_CAST(A.[CREATED_AT] AS DATETIME)),'yyyyMMdd') END  DATE_WID,
				CASE WHEN TRY_CAST(A.[CREATED_AT] AS DATETIME) IS NULL THEN '1000000' ELSE
				'1'+FORMAT(DATEADD(HOUR,7,TRY_CAST(A.[CREATED_AT] AS DATETIME)),'HHmmss') END  TIME_WID,
				ISNULL(KH.ROW_WID,0) CUSTOMER_WID,
				ISNULL(CH.ROW_WID,0) LOCATION_WID,
				ISNULL(NV.ROW_WID,0) USER_WID,
				ISNULL(CN.ROW_WID,0) CHANNEL_WID,
				A.[BILLING_ADDRESS1],
				A.[BILLING_ADDRESS2],
				A.[BILLING_CITY],
				A.[BILLING_COMPANY],
				A.[BILLING_COUNTRY],
				A.[BILLING_COUNTRY_CODE],
				TRY_CAST(A.[BILLING_DEFAULT] AS BIT) [BILLING_DEFAULT],
				A.[BILLING_DISTRICT],
				A.[BILLING_DISTRICT_CODE],
				A.[BILLING_FIRST_NAME],
				CAST(TRY_CAST(A.[BILLING_ID] AS FLOAT) AS BIGINT) [BILLING_ID],
				A.[BILLING_LAST_NAME],
				A.[BILLING_NAME],
				A.[BILLING_PHONE],
				A.[BILLING_PROVINCE],
				A.[BILLING_PROVINCE_CODE],
				A.[BILLING_WARD],
				A.[BILLING_WARD_CODE],
				A.[BILLING_ZIP],
				A.[BROWSER_IP],
				TRY_CAST(A.[BUYER_ACCEPTS_MARKETING] AS BIT) [BUYER_ACCEPTS_MARKETING],
				A.[CANCEL_REASON],
				dateadd(hour,7,TRY_CAST(A.[CANCELLED_AT] AS DATETIME)) [CANCELLED_AT],
				A.[CANCELLED_STATUS],
				A.[CART_TOKEN],
				A.[CHECKOUT_TOKEN],
				A.[CLIENT_DETAILS],
				dateadd(hour,7,TRY_CAST(A.[CLOSED_AT] AS DATETIME)) [CLOSED_AT],
				A.[CLOSED_STATUS],
				dateadd(hour,7,TRY_CAST(A.[COMPLETE_AT] AS DATETIME)) [COMPLETE_AT],
				dateadd(hour,7,TRY_CAST(A.[CONFIRMED_AT] AS DATETIME)) [CONFIRMED_AT],
				A.[CONFIRMED_STATUS],
				dateadd(hour,7,TRY_CAST(A.[CREATED_AT] AS DATETIME)) [CREATED_AT],
				A.[CURRENCY],
				CAST(TRY_CAST(A.[CUSTOMER_ID] AS FLOAT) AS BIGINT) [CUSTOMER_ID],
				CAST(TRY_CAST(A.[DEVICE_ID] AS FLOAT) AS BIGINT) [DEVICE_ID],
				A.[EMAIL],
				dateadd(hour,7,TRY_CAST(A.[EXPORT_AT] AS DATETIME)) [EXPORT_AT],
				A.[FINANCIAL_STATUS],
				A.[FULFILLMENT_STATUS],
				case when A.[GATEWAY] = 'None' then '' else A.[GATEWAY] end [GATEWAY] ,
				case when A.[GATEWAY_CODE] = 'None' then '' else A.[GATEWAY_CODE] end [GATEWAY_CODE],
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) [ID],
				A.[IN_STOCK_AT],
				A.[LANDING_SITE],
				A.[LANDING_SITE_REF],
				dateadd(hour,7,TRY_CAST(A.[LOCATION_ASSIGNED_AT] AS DATETIME)) [LOCATION_ASSIGNED_AT],
				CAST(TRY_CAST(A.[LOCATION_ID] AS FLOAT) AS BIGINT) [LOCATION_ID],
				A.[NAME],
				A.[NOTE],
				A.[NOTE_ATTRIBUTES],
				A.[NUMBER],
				A.[OMNI_ORDER_STATUS],
				A.[OMNI_ORDER_STATUS_NAME],
				A.[ORDER_NUMBER],
				dateadd(hour,7,TRY_CAST(A.[OUT_OF_STOCK_AT] AS DATETIME)) [OUT_OF_STOCK_AT],
				A.[PROCESSING_METHOD],
				A.[REDEEM_MODEL],
				CAST(TRY_CAST(A.[REF_ORDER_ID] AS FLOAT) AS BIGINT) [REF_ORDER_ID],
				A.[REF_ORDER_NUMBER],
				A.[REFERRING_SITE],
				A.[SHIPPING_ADDRESS1],
				A.[SHIPPING_ADDRESS2],
				A.[SHIPPING_CITY],
				A.[SHIPPING_COMPANY],
				A.[SHIPPING_COUNTRY],
				A.[SHIPPING_COUNTRY_CODE],
				A.[SHIPPING_DISTRICT],
				A.[SHIPPING_DISTRICT_CODE],
				A.[SHIPPING_FIRST_NAME],
				A.[SHIPPING_LAST_NAME],
				TRY_CAST(A.[SHIPPING_LATITUDE] AS FLOAT) [SHIPPING_LATITUDE],
				TRY_CAST(A.[SHIPPING_LONGITUDE] AS FLOAT) [SHIPPING_LONGITUDE],
				A.[SHIPPING_NAME],
				A.[SHIPPING_PHONE],
				A.[SHIPPING_PROVINCE],
				A.[SHIPPING_PROVINCE_CODE],
				A.[SHIPPING_WARD],
				A.[SHIPPING_WARD_CODE],
				A.[SHIPPING_ZIP],
				A.[SOURCE],
				TRIM(A.[SOURCE_NAME]) [SOURCE_NAME],
				TRY_CAST(A.[SUBTOTAL_PRICE] AS FLOAT) [SUBTOTAL_PRICE],
				A.[TAGS],
				A.[TAX_LINES],
				A.[TAXES_INCLUDED],
				A.[TOKEN],
				TRY_CAST(A.[TOTAL_DISCOUNTS] AS FLOAT) [TOTAL_DISCOUNTS],
				TRY_CAST(A.[TOTAL_LINE_ITEMS_PRICE] AS FLOAT) [TOTAL_LINE_ITEMS_PRICE],
				TRY_CAST(A.[TOTAL_PRICE] AS FLOAT) [TOTAL_PRICE],
				TRY_CAST(A.[TOTAL_TAX] AS FLOAT) [TOTAL_TAX],
				TRY_CAST(A.[TOTAL_WEIGHT] AS FLOAT) [TOTAL_WEIGHT],
				dateadd(hour,7,TRY_CAST(A.[UPDATED_AT] AS DATETIME)) [UPDATED_AT],
				CAST(TRY_CAST(A.[USER_ID] AS FLOAT) AS BIGINT) [USER_ID],
				A.[UTM_CAMPAIGN],
				A.[UTM_CONTENT],
				A.[UTM_MEDIUM],
				A.[UTM_SOURCE],
				A.[UTM_TERM],
				ISNULL(TRY_CAST(SP.[PRICE] AS FLOAT),0) [SHIPPING_PRICE],
				SP.[CODE] [SHIPPING_CODE],
				ISNULL(TRY_CAST(RD.[amount] AS FLOAT),0) [REDEEM_AMOUNT],
				RD.[discount_type] [REDEEM_DISCOUNT_TYPE],
				RD.[name] [REDEEM_NAME],
				ISNULL(TRY_CAST(RD.[used_amount] AS FLOAT),0) [REDEEM_USED_AMOUNT],
			    'N' W_DELETE_FLG,
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) ORDER BY TRY_CAST(A.[CREATED_AT] AS DATETIME) DESC) AS ROW_NUM
			FROM [STG].[W_HAR_ORDERS_FS] A 
			LEFT JOIN [DWH].[W_HAR_CUSTOMERS_D] KH ON CAST(TRY_CAST(A.[CUSTOMER_ID] AS FLOAT) AS BIGINT) = KH.ID
			LEFT JOIN [DWH].[W_HAR_LOCATIONS_D] CH ON CAST(TRY_CAST(A.[LOCATION_ID] AS FLOAT) AS BIGINT) = CH.ID
			LEFT JOIN [DWH].[W_HAR_USERS_D] NV ON CAST(TRY_CAST(A.[USER_ID] AS FLOAT) AS BIGINT) = NV.ID
			LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON TRIM(A.[SOURCE_NAME]) = CN.[CHANNEL_CODE] AND ISNULL(CN.[LOCATION_ID],CAST(TRY_CAST(A.[LOCATION_ID] AS FLOAT) AS BIGINT))=CAST(TRY_CAST(A.[LOCATION_ID] AS FLOAT) AS BIGINT)
			LEFT JOIN [STG].[W_HAR_REDEEM_MODEL_FS] RD ON CAST(TRY_CAST(RD.[order_id] AS FLOAT) AS BIGINT) = CAST(TRY_CAST(A.ID AS FLOAT) AS BIGINT)
			LEFT JOIN [STG].[W_HAR_SHIPPING_LINES_FS] SP ON CAST(TRY_CAST(SP.[order_id] AS FLOAT) AS BIGINT) = CAST(TRY_CAST(A.ID AS FLOAT) AS BIGINT)
	
				
		)
		insert into #W_HAR_ORDERS_F_TMP
		select
			DATE_WID,
			TIME_WID,
			CUSTOMER_WID,
			LOCATION_WID,
			USER_WID,
			CHANNEL_WID,
			[BILLING_ADDRESS1],
			[BILLING_ADDRESS2],
			[BILLING_CITY],
			[BILLING_COMPANY],
			[BILLING_COUNTRY],
			[BILLING_COUNTRY_CODE],
			[BILLING_DEFAULT],
			[BILLING_DISTRICT],
			[BILLING_DISTRICT_CODE],
			[BILLING_FIRST_NAME],
			[BILLING_ID],
			[BILLING_LAST_NAME],
			[BILLING_NAME],
			[BILLING_PHONE],
			[BILLING_PROVINCE],
			[BILLING_PROVINCE_CODE],
			[BILLING_WARD],
			[BILLING_WARD_CODE],
			[BILLING_ZIP],
			[BROWSER_IP],
			[BUYER_ACCEPTS_MARKETING],
			[CANCEL_REASON],
			[CANCELLED_AT],
			[CANCELLED_STATUS],
			[CART_TOKEN],
			[CHECKOUT_TOKEN],
			[CLIENT_DETAILS],
			[CLOSED_AT],
			[CLOSED_STATUS],
			[COMPLETE_AT],
			[CONFIRMED_AT],
			[CONFIRMED_STATUS],
			[CREATED_AT],
			[CURRENCY],
			[CUSTOMER_ID],
			[DEVICE_ID],
			[EMAIL],
			[EXPORT_AT],
			[FINANCIAL_STATUS],
			[FULFILLMENT_STATUS],
			[GATEWAY],
			[GATEWAY_CODE],
			[ID],
			[IN_STOCK_AT],
			[LANDING_SITE],
			[LANDING_SITE_REF],
			[LOCATION_ASSIGNED_AT],
			[LOCATION_ID],
			[NAME],
			[NOTE],
			[NOTE_ATTRIBUTES],
			[NUMBER],
			[OMNI_ORDER_STATUS],
			[OMNI_ORDER_STATUS_NAME],
			[ORDER_NUMBER],
			[OUT_OF_STOCK_AT],
			[PROCESSING_METHOD],
			[REDEEM_MODEL],
			[REF_ORDER_ID],
			[REF_ORDER_NUMBER],
			[REFERRING_SITE],
			[SHIPPING_ADDRESS1],
			[SHIPPING_ADDRESS2],
			[SHIPPING_CITY],
			[SHIPPING_COMPANY],
			[SHIPPING_COUNTRY],
			[SHIPPING_COUNTRY_CODE],
			[SHIPPING_DISTRICT],
			[SHIPPING_DISTRICT_CODE],
			[SHIPPING_FIRST_NAME],
			[SHIPPING_LAST_NAME],
			[SHIPPING_LATITUDE],
			[SHIPPING_LONGITUDE],
			[SHIPPING_NAME],
			[SHIPPING_PHONE],
			[SHIPPING_PROVINCE],
			[SHIPPING_PROVINCE_CODE],
			[SHIPPING_WARD],
			[SHIPPING_WARD_CODE],
			[SHIPPING_ZIP],
			[SOURCE],
			[SOURCE_NAME],
			[SUBTOTAL_PRICE],
			[TAGS],
			[TAX_LINES],
			[TAXES_INCLUDED],
			[TOKEN],
			[TOTAL_DISCOUNTS],
			[TOTAL_LINE_ITEMS_PRICE],
			[TOTAL_PRICE],
			[TOTAL_TAX],
			[TOTAL_WEIGHT],
			[UPDATED_AT],
			[USER_ID],
			[UTM_CAMPAIGN],
			[UTM_CONTENT],
			[UTM_MEDIUM],
			[UTM_SOURCE],
			[UTM_TERM],
			[SHIPPING_PRICE],
			[SHIPPING_CODE],
			[REDEEM_AMOUNT],
			[REDEEM_DISCOUNT_TYPE],
			[REDEEM_NAME],
			[REDEEM_USED_AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;
		
		update A 
		set 
		a.channel_wid =isnull(cn.row_wid,0),
		a.CUSTOMER_WID = isnull(kh.row_wid,0),
		a.LOCATION_WID = isnull(ch.row_wid,0),
		a.USER_WID = isnull(nv.row_wid,0)
		FROM [DWH].[W_HAR_ORDERS_F] A 
		LEFT JOIN [DWH].[W_HAR_CUSTOMERS_D] KH ON A.[CUSTOMER_ID] = KH.ID
		LEFT JOIN [DWH].[W_HAR_LOCATIONS_D] CH ON A.[LOCATION_ID] = CH.ID
		LEFT JOIN [DWH].[W_HAR_USERS_D] NV ON A.[USER_ID] = NV.ID
		LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON A.[SOURCE_NAME] = CN.[CHANNEL_CODE] AND ISNULL(CN.[LOCATION_ID],A.[LOCATION_ID])=A.[LOCATION_ID]
		

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_ORDERS_FULFILLMENTS_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_ORDERS_FULFILLMENTS_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_ORDERS_FULFILLMENTS_F',
	@V_src_table nvarchar(100) = 'W_HAR_FULFILLMENTS_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(OD.ROW_WID,0) ORDER_WID,
				A.[ADDRESS],
				A.[BOXME_SERVICECODE],
				TRY_CAST(A.[CANCEL_DATE] AS DATETIME) [CANCEL_DATE],
				A.[CARRIER_COD_STATUS_CODE],
				A.[CARRIER_COD_STATUS_NAME],
				A.[CARRIER_OPTIONS],
				A.[CARRIER_SERVICE_CODE],
				A.[CARRIER_SERVICE_PACKAGE],
				A.[CARRIER_SERVICE_PACKAGE_NAME],
				CAST(TRY_CAST(A.[CARRIER_SHOP_ID] AS FLOAT) AS BIGINT) [CARRIER_SHOP_ID],
				A.[CARRIER_STATUS_CODE],
				A.[CARRIER_STATUS_NAME],
				A.[CITY],
				TRY_CAST(A.[COD_AMOUNT] AS FLOAT) [COD_AMOUNT],
				TRY_CAST(A.[COD_NOT_RECEIPT_DATE] AS DATETIME) [COD_NOT_RECEIPT_DATE],
				TRY_CAST(A.[COD_PAID_DATE] AS DATETIME) [COD_PAID_DATE],
				TRY_CAST(A.[COD_PENDING_DATE] AS DATETIME) [COD_PENDING_DATE],
				TRY_CAST(A.[COD_RECEIPT_DATE] AS DATETIME) [COD_RECEIPT_DATE],
				A.[COUNTRY],
				A.[COUNTRY_CODE],
				A.[COUPON_CODE],
				TRY_CAST(A.[CREATED_AT] AS DATETIME) [CREATED_AT],
				TRY_CAST(A.[DELIVERED_DATE] AS DATETIME) [DELIVERED_DATE],
				TRY_CAST(A.[DELIVERING_DATE] AS DATETIME) [DELIVERING_DATE],
				A.[DISTRICT],
				A.[DISTRICT_CODE],
				A.[FIRST_NAME],
				TRY_CAST(A.[FROM_LATITUDE] AS FLOAT) [FROM_LATITUDE],
				TRY_CAST(A.[FROM_LONGTITUDE] AS FLOAT) [FROM_LONGTITUDE],
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) [ID],
				TRY_CAST(A.[INSURANCE_PRICE] AS FLOAT) [INSURANCE_PRICE],
				TRY_CAST(A.[INSURANCE_PRICE] AS BIT) [IS_DROP_OFF],
				TRY_CAST(A.[INSURANCE_PRICE] AS BIT) [IS_INSURANCE],
				TRY_CAST(A.[INSURANCE_PRICE] AS BIT) [IS_NEW_SERVICE_PACKAGE],
				TRY_CAST(A.[INSURANCE_PRICE] AS BIT) [IS_OPEN_BOX],
				TRY_CAST(A.[INSURANCE_PRICE] AS BIT) [IS_VIEW_BEFORE],
				A.[LAST_NAME],
				CAST(TRY_CAST(A.[LOCATION_ID] AS FLOAT) AS BIGINT) [LOCATION_ID],
				A.[NOT_MEET_CUSTOMER_DATE],
				A.[NOTE],
				A.[NOTE_ATTRIBUTES],
				TRY_CAST(A.[NOTIFY_CUSTOMER] AS BIT) [NOTIFY_CUSTOMER],
				CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) [ORDER_ID],
				TRY_CAST(A.[PACKAGE_HEIGHT] AS FLOAT) [PACKAGE_HEIGHT],
				TRY_CAST(A.[PACKAGE_LENGTH] AS FLOAT) [PACKAGE_LENGTH],
				TRY_CAST(A.[PACKAGE_WIDTH] AS FLOAT) [PACKAGE_WIDTH],
				TRY_CAST(A.[PICKING_DATE] AS DATETIME) [PICKING_DATE],
				A.[PROVINCE],
				A.[PROVINCE_CODE],
				TRY_CAST(A.[READY_TO_PICK_DATE] AS DATETIME) [READY_TO_PICK_DATE],
				TRY_CAST(A.[REAL_SHIPPING_FEE] AS FLOAT) [REAL_SHIPPING_FEE],
				A.[RECEIPT],
				CAST(TRY_CAST(A.[REQUEST_ID] AS FLOAT) AS BIGINT) [REQUEST_ID],
				TRY_CAST(A.[RETURN_DATE] AS DATETIME) [RETURN_DATE],
				A.[SENDER_NAME],
				A.[SENDER_PHONE],
				A.[SHIPPING_ADDRESS],
				A.[SHIPPING_NOTES],
				A.[SHIPPING_PACKAGE],
				A.[SHIPPING_PHONE],
				A.[SORT_CODE],
				A.[STATUS],
				TRY_CAST(A.[TO_LATITUDE] AS FLOAT) [TO_LATITUDE],
				TRY_CAST(A.[TO_LONGTITUDE] AS FLOAT) [TO_LONGTITUDE],
				TRY_CAST(A.[TOTAL_WEIGHT] AS FLOAT) [TOTAL_WEIGHT],
				A.[TRACKING_COMPANY],
				A.[TRACKING_COMPANY_CODE],
				A.[TRACKING_NUMBER],
				A.[TRACKING_URL],
				A.[TRANSPORT_TYPE],
				TRY_CAST(A.[UPDATED_AT] AS DATETIME) [UPDATED_AT],
				TRY_CAST(A.[WAITING_FOR_RETURN_DATE] AS DATETIME) [WAITING_FOR_RETURN_DATE],
				A.[WARD],
				A.[WARD_CODE],
				A.[ZIP_CODE],
			    'N' W_DELETE_FLG,
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) ORDER BY TRY_CAST(A.[CREATED_AT] AS DATETIME) DESC) AS ROW_NUM
			FROM [STG].[W_HAR_FULFILLMENTS_FS]  A 
			LEFT JOIN [DWH].[W_HAR_ORDERS_F] OD ON CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) = OD.ID
		)
		insert into #W_HAR_ORDERS_FULFILLMENTS_F_TMP
		select
			ORDER_WID,
			[ADDRESS],
			[BOXME_SERVICECODE],
			[CANCEL_DATE],
			[CARRIER_COD_STATUS_CODE],
			[CARRIER_COD_STATUS_NAME],
			[CARRIER_OPTIONS],
			[CARRIER_SERVICE_CODE],
			[CARRIER_SERVICE_PACKAGE],
			[CARRIER_SERVICE_PACKAGE_NAME],
			[CARRIER_SHOP_ID],
			[CARRIER_STATUS_CODE],
			[CARRIER_STATUS_NAME],
			[CITY],
			[COD_AMOUNT],
			[COD_NOT_RECEIPT_DATE],
			[COD_PAID_DATE],
			[COD_PENDING_DATE],
			[COD_RECEIPT_DATE],
			[COUNTRY],
			[COUNTRY_CODE],
			[COUPON_CODE],
			[CREATED_AT],
			[DELIVERED_DATE],
			[DELIVERING_DATE],
			[DISTRICT],
			[DISTRICT_CODE],
			[FIRST_NAME],
			[FROM_LATITUDE],
			[FROM_LONGTITUDE],
			[ID],
			[INSURANCE_PRICE],
			[IS_DROP_OFF],
			[IS_INSURANCE],
			[IS_NEW_SERVICE_PACKAGE],
			[IS_OPEN_BOX],
			[IS_VIEW_BEFORE],
			[LAST_NAME],
			[LOCATION_ID],
			[NOT_MEET_CUSTOMER_DATE],
			[NOTE],
			[NOTE_ATTRIBUTES],
			[NOTIFY_CUSTOMER],
			[ORDER_ID],
			[PACKAGE_HEIGHT],
			[PACKAGE_LENGTH],
			[PACKAGE_WIDTH],
			[PICKING_DATE],
			[PROVINCE],
			[PROVINCE_CODE],
			[READY_TO_PICK_DATE],
			[REAL_SHIPPING_FEE],
			[RECEIPT],
			[REQUEST_ID],
			[RETURN_DATE],
			[SENDER_NAME],
			[SENDER_PHONE],
			[SHIPPING_ADDRESS],
			[SHIPPING_NOTES],
			[SHIPPING_PACKAGE],
			[SHIPPING_PHONE],
			[SORT_CODE],
			[STATUS],
			[TO_LATITUDE],
			[TO_LONGTITUDE],
			[TOTAL_WEIGHT],
			[TRACKING_COMPANY],
			[TRACKING_COMPANY_CODE],
			[TRACKING_NUMBER],
			[TRACKING_URL],
			[TRANSPORT_TYPE],
			[UPDATED_AT],
			[WAITING_FOR_RETURN_DATE],
			[WARD],
			[WARD_CODE],
			[ZIP_CODE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process
		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		
		SET @v_script =
				'DELETE ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' WHERE ORDER_ID IN (SELECT DISTINCT ORDER_ID FROM '+@v_tmp_dwh_table+')' 
				EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_ORDERS_LINE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_ORDERS_LINE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_ORDERS_LINE_F',
	@V_src_table nvarchar(100) = 'W_HAR_LINE_ITEMS_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(OD.ROW_WID,0) ORDER_WID,
				ISNULL(VR.ROW_WID,0) VARIANT_WID,
				ISNULL(PM.ROW_WID,0) PROMOTION_WID,
				(case when (case when c1.[APPLIES_TO_RESOURCE] = 'None' then 1
						 when c1.[APPLIES_TO_RESOURCE] = 'product_variant' and vr.id = c1.[APPLIES_TO_ID] then 1
						 when c1.[APPLIES_TO_RESOURCE] = 'collection' and f1.[PRODUCT_WID] = vr.[PRODUCT_WID] then 1
						 when c1.[APPLIES_TO_RESOURCE] = 'product' and c1.[APPLIES_TO_ID] = vr.product_id then 1
						 else 0 end) = 0 then 0 else ISNULL(c1.ROW_WID,0)  end ) [DISCOUNT_WID],
				A.[APPLIED_DISCOUNTS],
				A.[BARCODE],
				CAST(TRY_CAST(A.[FULFILLABLE_QUANTITY] AS FLOAT) AS INT) [FULFILLABLE_QUANTITY],
				A.[FULFILLMENT_SERVICE],
				A.[FULFILLMENT_STATUS],
				TRY_CAST(A.[GIFT_CARD] AS FLOAT) [GIFT_CARD],
				TRY_CAST(A.[GRAMS] AS FLOAT) [GRAMS],
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) [ID],
				TRY_CAST(A.[MA_COST_AMOUNT] AS FLOAT) [MA_COST_AMOUNT],
				A.[NAME],
				TRY_CAST(A.[NOT_ALLOW_PROMOTION] AS BIT) [NOT_ALLOW_PROMOTION],
				CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) [ORDER_ID],
				TRY_CAST(A.[PRICE] AS FLOAT) [PRICE],
				TRY_CAST(A.[PRICE_ORIGINAL] AS FLOAT) [PRICE_ORIGINAL],
				TRY_CAST(A.[PRICE_PROMOTION] AS FLOAT) [PRICE_PROMOTION],
				TRY_CAST(A.[PRODUCT_EXISTS] AS BIT) [PRODUCT_EXISTS],
				CAST(TRY_CAST(A.[PRODUCT_ID] AS FLOAT) AS BIGINT) [PRODUCT_ID],
				CAST(TRY_CAST(PL.[promotion_id] AS FLOAT) AS BIGINT) [PROMOTION_ID],
				CAST(TRY_CAST(A.[QUANTITY] AS FLOAT) AS INT) [QUANTITY],
				ISNULL(CAST(TRY_CAST(RL.[QUANTITY] AS FLOAT) AS INT),0) [RETURN_QUANTITY],
				TRY_CAST(A.[REQUIRES_SHIPPING] AS BIT) [REQUIRES_SHIPPING],
				A.[SKU],
				TRY_CAST(A.[TAXABLE] AS BIT) [TAXABLE],
				A.[TITLE],
				TRY_CAST(A.[TOTAL_DISCOUNT] AS FLOAT) [TOTAL_DISCOUNT],
				A.[TYPE],
				CAST(TRY_CAST(A.[VARIANT_ID] AS FLOAT) AS BIGINT) [VARIANT_ID],
				A.[VARIANT_TITLE],
				A.[VENDOR],
				(case when c1.[APPLIES_TO_RESOURCE] = 'None' then 1
						 when c1.[APPLIES_TO_RESOURCE] = 'product_variant' and vr.id = c1.[APPLIES_TO_ID] then 1
						 when c1.[APPLIES_TO_RESOURCE] = 'collection' and f1.[PRODUCT_WID] = VR.[PRODUCT_WID] then 1
						 when c1.[APPLIES_TO_RESOURCE] = 'product' and c1.[APPLIES_TO_ID] = vr.product_id then 1
						 else 0 end) [DISCOUNT_FLAG],
			    'N' W_DELETE_FLG,
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_HAR_LINE_ITEMS_FS]  A 
			LEFT JOIN [DWH].[W_HAR_ORDERS_F] OD ON CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) = OD.ID
			LEFT JOIN [DWH].[W_HAR_VARIANTS_D] VR ON CAST(TRY_CAST(A.[VARIANT_ID] AS FLOAT) AS BIGINT) = VR.ID or trim(a.sku) = VR.sku or trim(a.sku) = vr.barcode
			LEFT JOIN [STG].[W_HAR_PROMOTION_LINE_FS] PL ON CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) = CAST(TRY_CAST(PL.[order_line_id] AS FLOAT) AS BIGINT)
			LEFT JOIN [DWH].[W_HAR_PROMOTION_D] PM ON ISNULL(CAST(TRY_CAST(PL.[promotion_id] AS FLOAT) AS BIGINT),0) = PM.ID
			LEFT JOIN (SELECT RL.*,RF.[order_id] FROM [STG].[W_HAR_REFUND_LINE_ITEMS_FS] RL JOIN [STG].[W_HAR_REFUNDS_FS] RF ON CAST(TRY_CAST(RL.[refund_id] AS FLOAT) AS BIGINT) = CAST(TRY_CAST(RF.[id] AS FLOAT) AS BIGINT)) RL
			ON  CAST(TRY_CAST(RL.[order_id] AS FLOAT) AS BIGINT) = CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT)
			AND  CAST(TRY_CAST(RL.[variant_id] AS FLOAT) AS BIGINT) = CAST(TRY_CAST(A.[VARIANT_ID] AS FLOAT) AS BIGINT) 

			left join [STG].[W_HAR_DISCOUNT_CODES_FS] b1 on CAST(TRY_cAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) =CAST(TRY_cAST(b1.[ORDER_ID] AS FLOAT) AS BIGINT)
			left join [DWH].[W_HAR_DISCOUNT_D] c1 on TRIM(b1.[CODE]) = c1.[CODE]
			left join [DWH].[W_HAR_COLLECTIONS_D] d1 on c1.[APPLIES_TO_ID] = d1.[ID] and c1.[APPLIES_TO_RESOURCE] = 'collection'
			left join [DWH].[W_HAR_COLLECTS_D] f1 on d1.row_wid = f1.[COLLECTION_WID]  and vr.[PRODUCT_WID] = f1.[PRODUCT_WID]
		)
		insert into #W_HAR_ORDERS_LINE_F_TMP
		select
			ORDER_WID,
			VARIANT_WID,
			PROMOTION_WID,
			[DISCOUNT_WID],
			[APPLIED_DISCOUNTS],
			[BARCODE],
			[FULFILLABLE_QUANTITY],
			[FULFILLMENT_SERVICE],
			[FULFILLMENT_STATUS],
			[GIFT_CARD],
			[GRAMS],
			[ID],
			[MA_COST_AMOUNT],
			[NAME],
			[NOT_ALLOW_PROMOTION],
			[ORDER_ID],
			[PRICE],
			[PRICE_ORIGINAL],
			[PRICE_PROMOTION],
			[PRODUCT_EXISTS],
			[PRODUCT_ID],
			[PROMOTION_ID],
			[QUANTITY],
			[RETURN_QUANTITY],
			[REQUIRES_SHIPPING],
			[SKU],
			[TAXABLE],
			[TITLE],
			[TOTAL_DISCOUNT],
			[TYPE],
			[VARIANT_ID],
			[VARIANT_TITLE],
			[VENDOR],
			[DISCOUNT_FLAG],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process
		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		
		SET @v_script =
				'DELETE ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' WHERE ORDER_ID IN (SELECT DISTINCT ORDER_ID FROM '+@v_tmp_dwh_table+')' 
				EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		update  A
		set
		a.ORDER_WID = ISNULL(OD.ROW_WID,0),
		a.VARIANT_WID = ISNULL(VR.ROW_WID,0),
		a.PROMOTION_WID = ISNULL(PM.ROW_WID,0) 
		from 
					[DWH].[W_HAR_ORDERS_LINE_F] A 
					LEFT JOIN [DWH].[W_HAR_ORDERS_F] OD ON A.[ORDER_ID] = OD.ID
					LEFT JOIN [DWH].[W_HAR_VARIANTS_D] VR ON A.[VARIANT_ID] = VR.ID or a.sku = VR.sku or a.sku = vr.barcode
					LEFT JOIN [DWH].[W_HAR_PROMOTION_D] PM ON a.[PROMOTION_ID] = PM.ID

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		/*
		UPDATE A
		SET

 
		A.[DISCOUNT_FLAG] =(case when [APPLIES_TO_RESOURCE] = 'None' then 1
								 when [APPLIES_TO_RESOURCE] = 'product_variant' and a.variant_id = c.[APPLIES_TO_ID] then 1
								 when [APPLIES_TO_RESOURCE] = 'collection' and f.[PRODUCT_WID] = g.[PRODUCT_WID] then 1
								 when [APPLIES_TO_RESOURCE] = 'product' and c.[APPLIES_TO_ID] = a.product_id then 1
								 else 0 end),
		A.[DISCOUNT_WID] =(case when (case when [APPLIES_TO_RESOURCE] = 'None' then 1
								 when [APPLIES_TO_RESOURCE] = 'product_variant' and a.variant_id = c.[APPLIES_TO_ID] then 1
								 when [APPLIES_TO_RESOURCE] = 'collection' and f.[PRODUCT_WID] = g.[PRODUCT_WID] then 1
								 when [APPLIES_TO_RESOURCE] = 'product' and c.[APPLIES_TO_ID] = a.product_id then 1
								 else 0 end) = 0 then 0 else ISNULL(b.[DISCOUNT_WID],0)  end )

		from [DWH].[W_HAR_ORDERS_LINE_F] a 
		left join [DWH].[W_HAR_ORDERS_DISCOUNT_F] b on a.order_wid = b.order_wid 
		left join [DWH].[W_HAR_VARIANTS_D] g on a.variant_wid = g.[row_WID]
		left join [DWH].[W_HAR_DISCOUNT_D] c on b.[DISCOUNT_WID] = c.row_wid
		left join [DWH].[W_HAR_COLLECTIONS_D] d on c.[APPLIES_TO_ID] = d.[ID] and c.[APPLIES_TO_RESOURCE] = 'collection'
		left join [DWH].[W_HAR_COLLECTS_D] f on d.row_wid = f.[COLLECTION_WID]  and g.[PRODUCT_WID] = f.[PRODUCT_WID]
		*/

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_ORDERS_SHIPPING_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_ORDERS_SHIPPING_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_ORDERS_SHIPPING_F',
	@V_src_table nvarchar(100) = 'W_HAR_SHIPPING_LINES_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(OD.ROW_WID,0) ORDER_WID,
				TRIM(A.[CODE]) [CODE],
				CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) [ORDER_ID],
				TRY_CAST(A.[PRICE] AS FLOAT) [PRICE],
				TRIM(A.[SOURCE]) [SOURCE],
				A.[TITLE],
			    'N' W_DELETE_FLG,
				CONCAT(CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT),'~',TRIM(A.[CODE]),'~',TRY_CAST(A.[PRICE] AS FLOAT),'~',TRIM(A.[SOURCE])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT),'~',TRIM(A.[CODE]),'~',TRY_CAST(A.[PRICE] AS FLOAT),'~',TRIM(A.[SOURCE])) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_HAR_SHIPPING_LINES_FS]  A 
			LEFT JOIN [DWH].[W_HAR_ORDERS_F] OD ON CAST(TRY_CAST([ORDER_ID] AS FLOAT) AS BIGINT) = OD.ID
		)
		insert into #W_HAR_ORDERS_SHIPPING_F_TMP
		select
			ORDER_WID,
			[CODE],
			[ORDER_ID],
			[PRICE],
			[SOURCE],
			[TITLE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process
		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		
		SET @v_script =
				'DELETE ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' WHERE ORDER_ID IN (SELECT DISTINCT ORDER_ID FROM '+@v_tmp_dwh_table+')' 
				EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_ORDERS_TRANSACTIONS_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_ORDERS_TRANSACTIONS_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_ORDERS_TRANSACTIONS_F',
	@V_src_table nvarchar(100) = 'W_HAR_TRANSACTIONS_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(OD.ROW_WID,0) ORDER_WID,
				TRY_CAST(A.[AMOUNT] AS FLOAT) AMOUNT,
				A.[AUTHORIZATION],
				TRY_CAST(A.[CREATED_AT] AS DATETIME) [CREATED_AT],
				A.[CURRENCY],
				A.[DEVICE_ID],
				A.[EXTERNAL_TRANSACTION_ID],
				A.[GATEWAY],
				A.[HARAVAN_TRANSACTION_ID],
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) [ID],
				A.[KIND],
				CAST(TRY_CAST(A.[LOCATION_ID] AS FLOAT) AS BIGINT) [LOCATION_ID],
				CAST(TRY_CAST(A.[ORDER_ID] AS FLOAT) AS BIGINT) [ORDER_ID],
				CAST(TRY_CAST(A.[PARENT_ID] AS FLOAT) AS BIGINT) [PARENT_ID],
				A.[PAYMENT_DETAILS],
				A.[RECEIPT],
				CAST(TRY_CAST(A.[REFUND_ID] AS FLOAT) AS BIGINT) [REFUND_ID],
				TRY_CAST(A.[SEND_EMAIL] AS BIT) [SEND_EMAIL],
				A.[STATUS],
				TRY_CAST(A.[TEST] AS BIT) [TEST],
				CAST(TRY_CAST(A.[USER_ID] AS FLOAT) AS BIGINT) [USER_ID],
			    'N' W_DELETE_FLG,
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) ORDER BY ISNULL(CAST(TRY_CAST(A.[REFUND_ID] AS FLOAT) AS BIGINT),0) DESC) AS ROW_NUM
			FROM [STG].[W_HAR_TRANSACTIONS_FS]  A 
			LEFT JOIN [DWH].[W_HAR_ORDERS_F] OD ON CAST(TRY_CAST([ORDER_ID] AS FLOAT) AS BIGINT) = OD.ID
		)
		insert into #W_HAR_ORDERS_TRANSACTIONS_F_TMP
		select
			ORDER_WID,
			[AMOUNT],
			[AUTHORIZATION],
			[CREATED_AT],
			[CURRENCY],
			[DEVICE_ID],
			[EXTERNAL_TRANSACTION_ID],
			[GATEWAY],
			[HARAVAN_TRANSACTION_ID],
			[ID],
			[KIND],
			[LOCATION_ID],
			[ORDER_ID],
			[PARENT_ID],
			[PAYMENT_DETAILS],
			[RECEIPT],
			[REFUND_ID],
			[SEND_EMAIL],
			[STATUS],
			[TEST],
			[USER_ID],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process
		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		
		SET @v_script =
				'DELETE ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' WHERE ORDER_ID IN (SELECT DISTINCT ORDER_ID FROM '+@v_tmp_dwh_table+')' 
				EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_PRODUCTS_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_PRODUCTS_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_PRODUCTS_D',
	@V_src_table nvarchar(100) = 'W_HAR_PRODUCTS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
			    TRY_CAST([CREATED_AT] AS DATETIME) [CREATED_AT],
			    [HANDLE],
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) [ID],
			    TRY_CAST([NOT_ALLOW_PROMOTION] AS BIT) [NOT_ALLOW_PROMOTION],
			    TRY_CAST([ONLY_HIDE_FROM_LIST] AS BIT)[ONLY_HIDE_FROM_LIST],
			    [OPTIONS],
			    [PRODUCT_TYPE],
			    TRY_CAST([PUBLISHED_AT] AS DATETIME) [PUBLISHED_AT],
			    [PUBLISHED_SCOPE],
			    [TAGS],
			    [TEMPLATE_SUFFIX],
			    [TITLE],
			    TRY_CAST([UPDATED_AT] AS DATETIME) [UPDATED_AT],
			    [VENDOR],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by [CREATED_AT] desc) as ROW_NUM
			FROM [STG].[W_HAR_PRODUCTS_DS]
		)
		insert into #W_HAR_PRODUCTS_D_TMP
		select
			[CREATED_AT],
			[HANDLE],
			[ID],
			[NOT_ALLOW_PROMOTION],
			[ONLY_HIDE_FROM_LIST],
			[OPTIONS],
			[PRODUCT_TYPE],
			[PUBLISHED_AT],
			[PUBLISHED_SCOPE],
			[TAGS],
			[TEMPLATE_SUFFIX],
			[TITLE],
			[UPDATED_AT],
			[VENDOR],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_PROMOTION_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_PROMOTION_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_PROMOTION_D',
	@V_src_table nvarchar(100) = 'W_HAR_PROMOTIONS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				CAST(TRY_CAST([APPLIES_CUSTOMER_GROUP_ID] AS FLOAT) AS BIGINT) [APPLIES_CUSTOMER_GROUP_ID],
				CAST(TRY_CAST([APPLIES_TO_ID] AS FLOAT) AS BIGINT) [APPLIES_TO_ID],
				CAST(TRY_CAST([APPLIES_TO_QUANTITY] AS FLOAT) AS INT) [APPLIES_TO_QUANTITY],
				[APPLIES_TO_RESOURCE],
				CAST(TRY_CAST([CREATE_USER] AS FLOAT) AS BIGINT) [CREATE_USER],
				TRY_CAST([CREATED_AT] AS DATETIME) [CREATED_AT],
				[DISCOUNT_TYPE],
				TRY_CAST([ENDS_AT] AS DATETIME) [ENDS_AT],
				[FIRST_NAME],
				CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) [ID],
				[LAST_NAME],
				[NAME],
				[PROMOTION_APPLY_TYPE],
				TRY_CAST([SET_TIME_ACTIVE] AS BIT) [SET_TIME_ACTIVE],
				TRY_CAST([STARTS_AT] AS DATETIME) [STARTS_AT],
				[STATUS],
				TRY_CAST([UPDATED_AT] AS DATETIME) [UPDATED_AT],
				TRY_CAST([VALUE] AS FLOAT) [VALUE],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by [CREATED_AT] desc) as ROW_NUM
			FROM [STG].[W_HAR_PROMOTIONS_DS]
		)
		insert into #W_HAR_PROMOTION_D_TMP
		select
			[APPLIES_CUSTOMER_GROUP_ID],
			[APPLIES_TO_ID],
			[APPLIES_TO_QUANTITY],
			[APPLIES_TO_RESOURCE],
			[CREATE_USER],
			[CREATED_AT],
			[DISCOUNT_TYPE],
			[ENDS_AT],
			[FIRST_NAME],
			[ID],
			[LAST_NAME],
			[NAME],
			[PROMOTION_APPLY_TYPE],
			[SET_TIME_ACTIVE],
			[STARTS_AT],
			[STATUS],
			[UPDATED_AT],
			[VALUE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_REFUND_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_REFUND_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_REFUND_F',
	@V_src_table nvarchar(100) = 'W_HAR_REFUNDS_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(TRY_CAST(A.[created_at] AS DATETIME),'yyyyMMdd') DATE_WID,
				ISNULL(D.[ROW_WID],0) [ORDER_WID],
				ISNULL(E.[ROW_WID],0) [VARIANT_WID],
				TRY_CAST(A.[created_at] AS DATETIME) [CREATED_AT],
				CAST(TRY_CAST(A.[id] AS FLOAT) AS BIGINT) [ID],
				A.[note] [NOTE],
				CAST(TRY_CAST(A.[order_id] AS FLOAT) AS BIGINT) [ORDER_ID],
				TRY_CAST(A.[restock] AS BIT) [RESTOCK],
				CAST(TRY_CAST(A.[user_id] AS FLOAT) AS BIGINT) [USER_ID],
				CAST(TRY_CAST(B.[VARIANT_ID] AS FLOAT) AS BIGINT) [VARIANT_ID],
				isnull(CAST(TRY_CAST(B.[QUANTITY] AS FLOAT) AS INT),0) [QUANTITY],
				isnull(TRY_CAST(C.[amount] AS FLOAT),0) [TOTAL_AMOUNT],
			    'N' W_DELETE_FLG,
				CONCAT(CAST(TRY_CAST(A.[id] AS FLOAT) AS BIGINT),'~',CAST(TRY_CAST(B.[VARIANT_ID] AS FLOAT) AS BIGINT)) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(CAST(TRY_CAST(A.[id] AS FLOAT) AS BIGINT),'~',CAST(TRY_CAST(B.[VARIANT_ID] AS FLOAT) AS BIGINT)) ORDER BY TRY_CAST(A.[CREATED_AT] AS DATETIME) DESC) AS ROW_NUM
			FROM [STG].[W_HAR_REFUNDS_FS] A LEFT JOIN 
				[STG].[W_HAR_REFUND_LINE_ITEMS_FS] B ON
				CAST(TRY_CAST(A.[id] AS FLOAT) AS BIGINT) = CAST(TRY_CAST(B.[refund_id] AS FLOAT) AS BIGINT)
				LEFT JOIN 
				[STG].[W_HAR_TRANSACTIONS_FS] C ON
				CAST(TRY_CAST(A.[id] AS FLOAT) AS BIGINT) = CAST(TRY_CAST(C.[refund_id] AS FLOAT) AS BIGINT)
				LEFT JOIN
				[DWH].[W_HAR_ORDERS_F] D ON
				CAST(TRY_CAST(A.[order_id] AS FLOAT) AS BIGINT) = D.[ID]
				LEFT JOIN
				[DWH].[W_HAR_VARIANTS_D] E ON
				CAST(TRY_CAST(B.[VARIANT_ID] AS FLOAT) AS BIGINT) = E.[ID]
				WHERE A.ID IS NOT NULL 
	
				
		)
		insert into #W_HAR_REFUND_F_TMP
		select
			[DATE_WID],
			[ORDER_WID],
			[VARIANT_WID],
			[CREATED_AT],
			[ID],
			[NOTE],
			[ORDER_ID],
			[RESTOCK],
			[USER_ID],
			[VARIANT_ID],
			[QUANTITY],
			[TOTAL_AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_RULES_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_RULES_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_RULES_D',
	@V_src_table nvarchar(100) = 'W_HAR_RULES_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(B.[ROW_WID],0) [COLLECTION_WID],
				TRIM(A.[COLUMN]) [COLUMN],
				TRIM(A.[CONDITION]) [CONDITION],
				TRIM(A.[RELATION]) [RELATION],
				CAST(TRY_CAST(A.[SMART_COLLECTION_ID] AS FLOAT) AS BIGINT) [SMART_COLLECTION_ID],
			    'N' as W_DELETE_FLG,
			    CONCAT(TRIM(A.[COLUMN]),'~',TRIM(A.[CONDITION]),'~',TRIM(A.[RELATION]),'~',CAST(TRY_CAST(A.[SMART_COLLECTION_ID] AS FLOAT) AS BIGINT)) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CONCAT(TRIM(A.[COLUMN]),'~',TRIM(A.[CONDITION]),'~',TRIM(A.[RELATION]),'~',CAST(TRY_CAST(A.[SMART_COLLECTION_ID] AS FLOAT) AS BIGINT)) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_HAR_RULES_DS] A 
			LEFT JOIN [DWH].[W_HAR_COLLECTIONS_D] B ON CAST(TRY_CAST(A.[SMART_COLLECTION_ID] AS FLOAT) AS BIGINT) = B.[ID] AND B.[TYPE] = 'SMART'
		)
		insert into #W_HAR_RULES_D_TMP
		select
			[COLLECTION_WID],
			[COLUMN],
			[CONDITION],
			[RELATION],
			[SMART_COLLECTION_ID],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/

		SET @v_script =
		'DELETE ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
		' WHERE [SMART_COLLECTION_ID] IN (SELECT DISTINCT [SMART_COLLECTION_ID] FROM '+@v_tmp_dwh_table+')' 
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_USERS_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_USERS_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_USERS_D',
	@V_src_table nvarchar(100) = 'W_HAR_USERS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRY_cAST([ACCOUNT_OWNER] AS BIT) [ACCOUNT_OWNER],
				[BIO],
				[EMAIL],
				[FIRST_NAME],
				CAST(TRY_cAST([ID] AS FLOAT) AS BIGINT) [ID],
				[IM],
				[LAST_NAME],
				[PERMISSIONS],
				[PHONE],
				[RECEIVE_ANNOUNCEMENTS],
				[URL],
				[USER_TYPE],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_cAST([ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST([ID] AS FLOAT) AS BIGINT) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_HAR_USERS_DS]
		)
		insert into #W_HAR_USERS_D_TMP
		select
			[ACCOUNT_OWNER],
			[BIO],
			[EMAIL],
			[FIRST_NAME],
			[ID],
			[IM],
			[LAST_NAME],
			[PERMISSIONS],
			[PHONE],
			[RECEIVE_ANNOUNCEMENTS],
			[URL],
			[USER_TYPE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_HAR_VARIANTS_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_HAR_VARIANTS_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_HAR_VARIANTS_D',
	@V_src_table nvarchar(100) = 'W_HAR_VARIANTS_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(P.ROW_WID,0) [PRODUCT_WID],
				ISNULL(I.ROW_WID,0) [IMAGE_WID],
				ISNULL(MA.ROW_WID,0) [PRODUCT_MAPPING_WID],
				TRIM(A.[BARCODE]) [BARCODE],
				TRY_CAST(A.[COMPARE_AT_PRICE] AS FLOAT) [COMPARE_AT_PRICE],
				TRY_CAST(A.[CREATED_AT] AS DATETIME) [CREATED_AT],
				A.[FULFILLMENT_SERVICE],
				TRY_CAST(A.[GRAMS] AS FLOAT) [GRAMS],
				CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) [ID],
				CAST(TRY_CAST(A.[IMAGE_ID] AS FLOAT) AS BIGINT) [IMAGE_ID],
				A.[INVENTORY_ADVANCE],
				A.[INVENTORY_MANAGEMENT],
				A.[INVENTORY_POLICY],
				CAST(TRY_CAST(A.[INVENTORY_QUANTITY] AS FLOAT) AS INT) [INVENTORY_QUANTITY],
				A.[OPTION1],
				A.[OPTION2],
				A.[OPTION3],
				CAST(TRY_CAST(A.[POSITION] AS FLOAT) AS INT) [POSITION],
				TRY_CAST(A.[PRICE] AS FLOAT) [PRICE],
				CAST(TRY_CAST(A.[PRODUCT_ID] AS FLOAT) AS BIGINT) [PRODUCT_ID],
				TRY_CAST(A.[REQUIRES_SHIPPING] AS BIT) [REQUIRES_SHIPPING],
				A.[SKU],
				TRY_CAST(A.[TAXABLE] AS BIT) [TAXABLE],
				A.[TITLE],
				TRY_CAST(A.[UPDATED_AT] AS DATETIME) [UPDATED_AT],
			    'N' as W_DELETE_FLG,
			    CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CAST(TRY_CAST(A.[ID] AS FLOAT) AS BIGINT) order by A.[CREATED_AT] desc) as ROW_NUM
			FROM [STG].[W_HAR_VARIANTS_DS] A LEFT JOIN [DWH].[W_HAR_PRODUCTS_D] P ON CAST(TRY_CAST(A.[PRODUCT_ID] AS FLOAT) AS BIGINT) = P.ID
			LEFT JOIN [DWH].[W_HAR_IMAGES_D] I ON CAST(TRY_CAST(A.[IMAGE_ID] AS FLOAT) AS BIGINT) = I.ID
			LEFT JOIN [DWH].[W_MDK_PRODUCT_MAPPING_D] MA ON TRIM(A.[BARCODE]) = MA.[BARCODE]
		)
		insert into #W_HAR_VARIANTS_D_TMP
		select
			[PRODUCT_WID],
			[IMAGE_WID],
			[PRODUCT_MAPPING_WID],
			[BARCODE],
			[COMPARE_AT_PRICE],
			[CREATED_AT],
			[FULFILLMENT_SERVICE],
			[GRAMS],
			[ID],
			[IMAGE_ID],
			[INVENTORY_ADVANCE],
			[INVENTORY_MANAGEMENT],
			[INVENTORY_POLICY],
			[INVENTORY_QUANTITY],
			[OPTION1],
			[OPTION2],
			[OPTION3],
			[POSITION],
			[PRICE],
			[PRODUCT_ID],
			[REQUIRES_SHIPPING],
			[SKU],
			[TAXABLE],
			[TITLE],
			[UPDATED_AT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_AP_BALANCE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_AP_BALANCE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_AP_BALANCE_F',
	@V_src_table nvarchar(100) = 'W_LAC_AP_BALANCE_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				FORMAT(cast(A.[TransDate] as date),'yyyyMMdd') [DATE_WID],
				ISNULL(SU.[ROW_WID],0) [SUPPLIER_WID],
				ISNULL(AC.[ROW_WID],0) [ACCOUNT_WID],
				TRIM(A.[RecID]) [RECID],
				TRIM(A.[Supplier Code]) [SUPPLIER_CODE],
				TRIM(A.[Invoice]) [INVOICE],
				try_cast(A.[Invoice Date] as datetime) [INVOICE_DATE],
				TRIM(A.[Vendor Group]) [VENDOR_GROUP],
				TRIM(A.[AccountID]) [ACCOUNTID],
				TRIM(A.[CurrencyID]) [CURRENCYID],
				A.[ExchangeRate] [EXCHANGERATE],
				TRIM(A.[TransNo]) [TRANSNO],
				try_cast(A.[TransDate] as datetime) [TRANSDATE],
				TRIM(A.[Payment Term]) [PAYMENT_TERM],
				TRIM(A.[Payment Method]) [PAYMENT_METHOD],
				try_cast(A.[Due Date] as datetime) [DUE_DATE],
				A.[AP Amount] [AP_AMOUNT],
				A.[AP Amount2] [AP_AMOUNT2],
				A.[Paid Amount] [PAID_AMOUNT],
				A.[Paid Amount2] [PAID_AMOUNT2],
				A.[Oustanding Amount] [OUSTANDING_AMOUNT],
				A.[Oustanding Amount2] [OUSTANDING_AMOUNT2],
				try_cast(A.[Extract Date] as datetime) [EXTRACT_DATE],
				trim(a.[Source]) [SOURCE],
				A.[LastAdjustedAmt] [LAST_ADJUSTED_AMT],
				try_cast(A.[LastAdjustedDate] as datetime) [LAST_ADJUSTED_DATE],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
			    isnull(try_cast(a.[Delete Flag] as bit),0) W_DELETE_FLG,
				TRIM(A.[RecID]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY TRIM(A.[RecID]) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_LAC_AP_BALANCE_FS] A
		LEFT JOIN [DWH].[W_LAC_SUPPLIER_D] SU ON TRIM(A.[Supplier Code]) = SU.[SUPPLIER_CODE]
		LEFT JOIN [DWH].[W_LAC_GL_ACCOUNT_D] AC ON TRIM(A.[AccountID]) = AC.[ACCOUNT_CODE]
			
		)
		insert into #W_LAC_AP_BALANCE_F_TMP 
		select
			[DATE_WID],
			[SUPPLIER_WID],
			[ACCOUNT_WID],
			[RECID],
			[SUPPLIER_CODE],
			[INVOICE],
			[INVOICE_DATE],
			[VENDOR_GROUP],
			[ACCOUNTID],
			[CURRENCYID],
			[EXCHANGERATE],
			[TRANSNO],
			[TRANSDATE],
			[PAYMENT_TERM],
			[PAYMENT_METHOD],
			[DUE_DATE],
			[AP_AMOUNT],
			[AP_AMOUNT2],
			[PAID_AMOUNT],
			[PAID_AMOUNT2],
			[OUSTANDING_AMOUNT],
			[OUSTANDING_AMOUNT2],
			[EXTRACT_DATE],
			[SOURCE],
			[LAST_ADJUSTED_AMT],
			[LAST_ADJUSTED_DATE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;
		*/
		
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		


		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_AP_BALANCE_FINAL_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_AP_BALANCE_FINAL_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_AP_BALANCE_FINAL_F',
	@V_src_table nvarchar(100) = 'W_LAC_AP_BALANCE_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_tmp_dwh_table2 nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@p_prune_days [bigint] ,
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		set @p_prune_days = (SELECT MAX(cast(FORMAT(DATEADD(DAY,-210,[EXTRACT_DATE]),'yyyyMMdd') as bigint)) FROM [DWH].[W_LAC_AP_BALANCE_F] WHERE [W_DELETE_FLG] ='0') 

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end

		SET @v_tmp_dwh_table2 = N'#INVOICE_NEW_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table2) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table2
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		/****** Script for SelectTopNRows command from SSMS  ******/

            SELECT DISTINCT 
            DATE_FROM_WID
            ,DATE_TO_WID
            ,BALANCE_WID
            ,SUPPLIER_WID
            ,ACCOUNT_WID
            ,INV_RECID
			,[INV_TRANSNO]
            ,SUPPLIER_CODE
            ,INVOICE
            ,INVOICE_DATE
            ,VENDOR_GROUP
            ,ACCOUNTID
            ,CURRENCYID
            ,EXCHANGERATE
            ,PAYMENT_TERM
            ,PAYMENT_METHOD
            ,DUE_DATE
            ,INV_AP_AMOUNT
            ,INV_AP_AMOUNT2
            ,INV_PAID_AMOUNT
            ,INV_PAID_AMOUNT2
            ,INV_OUSTANDING_AMOUNT
            ,INV_OUSTANDING_AMOUNT2
			,[INV_LAST_ADJUSTED_AMT]
			,[LAST_ADJUSTED_DATE]
			INTO #INVOICE_NEW_TMP
            FROM(
            SELECT
                   A.DATE_WID [DATE_FROM_WID]
            	  ,cast(FORMAT(A.[EXTRACT_DATE],'yyyyMMdd') as bigint) [DATE_TO_WID]
            	  ,A.[ROW_WID] [BALANCE_WID]
            	  ,A.[SUPPLIER_WID]
                  ,A.[ACCOUNT_WID]
                  ,A.[RECID] [INV_RECID]
				  ,A.[TRANSNO] [INV_TRANSNO]
                  ,A.[SUPPLIER_CODE]
                  ,A.[INVOICE]
                  ,A.[INVOICE_DATE]
                  ,A.[VENDOR_GROUP]
                  ,A.[ACCOUNTID]
                  ,A.[CURRENCYID]
                  ,A.[EXCHANGERATE]
                  ,A.[PAYMENT_TERM]
                  ,A.[PAYMENT_METHOD]
                  ,A.[DUE_DATE]
            	  ,A.[AP_AMOUNT] [INV_AP_AMOUNT]
            	  ,A.[AP_AMOUNT2] [INV_AP_AMOUNT2]
            	  ,A.[PAID_AMOUNT] [INV_PAID_AMOUNT]
            	  ,A.[PAID_AMOUNT2] [INV_PAID_AMOUNT2]
            	  ,A.[OUSTANDING_AMOUNT] [INV_OUSTANDING_AMOUNT]
            	  ,A.[OUSTANDING_AMOUNT2] [INV_OUSTANDING_AMOUNT2]
				  ,A.[LAST_ADJUSTED_AMT] [INV_LAST_ADJUSTED_AMT]
				  ,A.[LAST_ADJUSTED_DATE]
              FROM [DWH].[W_LAC_AP_BALANCE_F] A
              JOIN [DWH].[W_LAC_AP_PAYMENT_F] PA ON A.ROW_WID = PA.BALANCE_WID AND PA.DATE_WID >= @p_prune_days AND PA.[W_DELETE_FLG] = '0' AND  A.[W_DELETE_FLG] = '0'

            UNION ALL
            SELECT
                   A.DATE_WID [DATE_FROM_WID]
            	  ,cast(FORMAT(A.[EXTRACT_DATE],'yyyyMMdd') as bigint) [DATE_TO_WID]
            	  ,A.[ROW_WID] [BALANCE_WID]
            	  ,A.[SUPPLIER_WID]
                  ,A.[ACCOUNT_WID]
                  ,A.[RECID] [INV_RECID]
				  ,A.[TRANSNO] [INV_TRANSNO]
                  ,A.[SUPPLIER_CODE]
                  ,A.[INVOICE]
                  ,A.[INVOICE_DATE]
                  ,A.[VENDOR_GROUP]
                  ,A.[ACCOUNTID]
                  ,A.[CURRENCYID]
                  ,A.[EXCHANGERATE]
                  ,A.[PAYMENT_TERM]
                  ,A.[PAYMENT_METHOD]
                  ,A.[DUE_DATE]
            	  ,A.[AP_AMOUNT] [INV_AP_AMOUNT]
            	  ,A.[AP_AMOUNT2] [INV_AP_AMOUNT2]
            	  ,A.[PAID_AMOUNT] [INV_PAID_AMOUNT]
            	  ,A.[PAID_AMOUNT2] [INV_PAID_AMOUNT2]
            	  ,A.[OUSTANDING_AMOUNT] [INV_OUSTANDING_AMOUNT]
            	  ,A.[OUSTANDING_AMOUNT2] [INV_OUSTANDING_AMOUNT2]
				  ,A.[LAST_ADJUSTED_AMT] [INV_LAST_ADJUSTED_AMT]
				  ,A.[LAST_ADJUSTED_DATE]
              FROM [DWH].[W_LAC_AP_BALANCE_F] A  WHERE A.[OUSTANDING_AMOUNT] <> 0 AND A.[W_DELETE_FLG] = '0'
            ) A;

            WITH CTE AS
            (
            SELECT

            CL.DATE_WID,
            INV.BALANCE_WID,
            INV.SUPPLIER_WID,
            INV.ACCOUNT_WID,
            INV.INV_RECID,
			INV.[INV_TRANSNO],
            INV.SUPPLIER_CODE,
            INV.INVOICE,
            INV.INVOICE_DATE,
            INV.VENDOR_GROUP,
            INV.ACCOUNTID,
            INV.CURRENCYID,
            INV.EXCHANGERATE,
            INV.PAYMENT_TERM,
            INV.PAYMENT_METHOD,
            INV.DUE_DATE,
            INV.INV_AP_AMOUNT,
            INV.INV_AP_AMOUNT2,
            INV.INV_PAID_AMOUNT,
            INV.INV_PAID_AMOUNT2,
            INV.INV_OUSTANDING_AMOUNT,
            INV.INV_OUSTANDING_AMOUNT2,
			INV.[INV_LAST_ADJUSTED_AMT],
			INV.[LAST_ADJUSTED_DATE],
            TX.TRANSNO,
            TX.TRANSDATE,
            TX.MEMO,
            TX.PM_RECID,
            TX.[TYPE],
            ISNULL(TX.AP_AMOUNT,0) AP_AMOUNT,
            ISNULL(TX.AP_AMOUNT2,0) AP_AMOUNT2,
            SUM(ISNULL(TX.[AP_AMOUNT],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [TOTAL_AP_AMOUNT],
            SUM(ISNULL(TX.[AP_AMOUNT2],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [TOTAL_AP_AMOUNT2],
            ISNULL(TX.PAID_AMOUNT,0) PAID_AMOUNT,
            ISNULL(TX.PAID_AMOUNT2,0) PAID_AMOUNT2,
            SUM(ISNULL(TX.PAID_AMOUNT,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [TOTAL_PAID_AMOUNT],
            SUM(ISNULL(TX.PAID_AMOUNT2,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [TOTAL_PAID_AMOUNT2],
            INV.[INV_OUSTANDING_AMOUNT] + SUM(ISNULL(TX.PAID_AMOUNT,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) - SUM(ISNULL(TX.[AP_AMOUNT],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [OPENING_AMOUNT],
            INV.[INV_OUSTANDING_AMOUNT2]+INV.[INV_LAST_ADJUSTED_AMT]  + SUM(ISNULL(TX.PAID_AMOUNT2,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) - SUM(ISNULL(TX.[AP_AMOUNT2],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [OPENING_AMOUNT2],
            INV.[INV_OUSTANDING_AMOUNT] + SUM(ISNULL(TX.PAID_AMOUNT,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) - SUM(ISNULL(TX.[AP_AMOUNT],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) +sum(ISNULL(TX.AP_AMOUNT,0) - ISNULL(TX.PAID_AMOUNT,0))OVER (PARTITION BY INV.INV_RECID,CL.DATE_WID ) [OUSTANDING_AMOUNT],
            INV.[INV_OUSTANDING_AMOUNT2]+INV.[INV_LAST_ADJUSTED_AMT]  + SUM(ISNULL(TX.PAID_AMOUNT2,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) - SUM(ISNULL(TX.[AP_AMOUNT2],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) +sum(ISNULL(TX.AP_AMOUNT2,0)- ISNULL(TX.PAID_AMOUNT2,0))OVER (PARTITION BY INV.INV_RECID,CL.DATE_WID )  [OUSTANDING_AMOUNT2],
            '0' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
            @v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID,
            1 ROW_NUM


            FROM #INVOICE_NEW_TMP INV
            LEFT JOIN [DWH].[W_CALENDAR_D] CL ON 1 =1
            	AND INV.[DATE_FROM_WID]<= CL.DATE_WID
            	AND INV.[DATE_TO_WID]>= CL.DATE_WID
            	AND CL.DATE_WID >= @p_prune_days
            LEFT JOIN 
            (
            SELECT
            [DATE_WID],
            [ROW_WID] [BALANCE_WID],
            [TRANSNO],
            [TRANSDATE],
            NULL [MEMO],
            NULL [PM_RECID],
            1 [TYPE],
            CASE WHEN [AP_AMOUNT] > 0 THEN [AP_AMOUNT] ELSE 0 END [AP_AMOUNT],
            CASE WHEN [AP_AMOUNT2] > 0 THEN [AP_AMOUNT2] ELSE 0 END [AP_AMOUNT2],
            CASE WHEN [AP_AMOUNT] < 0 THEN -[AP_AMOUNT] ELSE 0 END [PAID_AMOUNT],
            CASE WHEN [AP_AMOUNT2] < 0 THEN -[AP_AMOUNT2] ELSE 0 END [PAID_AMOUNT2]
            FROM
            [DWH].[W_LAC_AP_BALANCE_F] 
            WHERE 1 = 1
			AND [W_DELETE_FLG] = '0'
            AND [DATE_WID] >= @p_prune_days
            UNION ALL
            SELECT
            [DATE_WID],
            [BALANCE_WID],
            [TRANSNO],
            [TRANSDATE],
            [MEMO],
            [RECID] [PM_RECID],
            2 [TYPE],
            0 [AP_AMOUNT],
            0 [AP_AMOUNT2],
            [SETTLEDAMT]  [PAID_AMOUNT],
            [SETTLEDAMT2] [PAID_AMOUNT2]
            FROM 
            [DWH].[W_LAC_AP_PAYMENT_F] WHERE 1 = 1
			AND [W_DELETE_FLG] = '0'
            AND DATE_WID >= @p_prune_days
            ) TX ON 1= 1
            AND TX.[DATE_WID] = CL.[DATE_WID]
            AND TX.[BALANCE_WID] = INV.[BALANCE_WID]
            WHERE 1= 1
            --AND INV.[BALANCE_WID] =78996
            )
		insert into #W_LAC_AP_BALANCE_FINAL_F_TMP 
		select
			[DATE_WID],
			[BALANCE_WID],
			[SUPPLIER_WID],
			[ACCOUNT_WID],
			[INV_RECID],
			[INV_TRANSNO],
			[SUPPLIER_CODE],
			[INVOICE],
			[INVOICE_DATE],
			[VENDOR_GROUP],
			[ACCOUNTID],
			[CURRENCYID],
			[EXCHANGERATE],
			[PAYMENT_TERM],
			[PAYMENT_METHOD],
			[DUE_DATE],
			[INV_AP_AMOUNT],
			[INV_AP_AMOUNT2],
			[INV_PAID_AMOUNT],
			[INV_PAID_AMOUNT2],
			[INV_OUSTANDING_AMOUNT],
			[INV_OUSTANDING_AMOUNT2],
			[INV_LAST_ADJUSTED_AMT],
			[LAST_ADJUSTED_DATE],
			[TRANSNO],
			[TRANSDATE],
			[MEMO],
			[PM_RECID],
			[TYPE],
			[AP_AMOUNT],
			[AP_AMOUNT2],
			[TOTAL_AP_AMOUNT],
			[TOTAL_AP_AMOUNT2],
			[PAID_AMOUNT],
			[PAID_AMOUNT2],
			[TOTAL_PAID_AMOUNT],
			[TOTAL_PAID_AMOUNT2],
			[OPENING_AMOUNT],
			[OPENING_AMOUNT2],
			[OUSTANDING_AMOUNT],
			[OUSTANDING_AMOUNT2],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		SET @v_script = N'DELETE A FROM ' +@v_tgt_table_schema+'.'+ @V_tgt_table + ' A INNER JOIN ' +@v_tmp_dwh_table2 +' B ON A.[BALANCE_WID] = B.[BALANCE_WID] AND  A.[DATE_WID] >= B.[DATE_FROM_WID] AND A.[DATE_WID] <= B.[DATE_TO_WID]'
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_AP_INVOICE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_AP_INVOICE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_AP_INVOICE_F',
	@V_src_table nvarchar(100) = 'W_LAC_AP_INVOICE_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(min(CAST([TRANSDATE] AS DATE)),'yyyyMMdd')	 [DATE_FROM_WID],
				FORMAT(min(CAST([Extract Date] AS DATE)),'yyyyMMdd') [DATE_TO_WID],
				TRIM([Invoice]) [INVOICE],
				min(CAST([TRANSDATE] AS DATE))		[TRANSDATE],
				SUM(ISNULL(TRY_CAST([Oustanding Amount] AS FLOAT),0)) [OUSTANDING_AMOUNT],
				SUM(ISNULL(TRY_CAST([Oustanding Amount2] AS FLOAT),0)) [OUSTANDING_AMOUNT2],
				MAX(CAST([Extract Date] AS DATE)) [EXTRACT_DATE],
			    'N' W_DELETE_FLG,
				TRIM([Invoice]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				max(W_BATCH_ID) W_BATCH_ID,
				row_number() OVER (PARTITION BY TRIM([Invoice]) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_LAC_AP_BALANCE_FS] group by TRIM([Invoice])
			
		)
		insert into #W_LAC_AP_INVOICE_F_TMP 
		select
			[DATE_FROM_WID],
			[DATE_TO_WID],
			[INVOICE],
			[TRANSDATE],
			[OUSTANDING_AMOUNT],
			[OUSTANDING_AMOUNT2],
			[EXTRACT_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;


		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;

		
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_AP_PAYMENT_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_AP_PAYMENT_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_AP_PAYMENT_F',
	@V_src_table nvarchar(100) = 'W_LAC_AP_PAYMENT_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				FORMAT(cast(A.[TransDate] as date),'yyyyMMdd') [DATE_WID],
				ISNULL(BA.[ROW_WID],0) [BALANCE_WID],
				ISNULL(SU.[ROW_WID],0) [SUPPLIER_WID],
				ISNULL(AC.[ROW_WID],0) [ACCOUNT_WID],
				trim(A.[Recid]) [RECID],
				trim(A.[AccountID]) [ACCOUNTID],
				trim(A.[ObjectID]) [OBJECTID],
				TRY_CAST(A.[TransDate] AS DATETIME) [TRANSDATE],
				trim(A.[TransNo]) [TRANSNO],
				trim(A.[Memo]) [MEMO],
				trim(A.[CurrencyID]) [CURRENCYID],
				A.[ExchangeRate] [EXCHANGERATE],
				trim(A.[SettledID]) [SETTLEDID],
				A.[SettledAmt] [SETTLEDAMT],
				A.[SettledAmt2] [SETTLEDAMT2],
				TRY_CAST(A.[ExtractDate] AS DATETIME) [EXTRACT_DATE],
				trim(a.[Source]) [SOURCE],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
			    isnull(try_cast(a.[Delete Flag] as bit),0) W_DELETE_FLG,
				TRIM(A.[RecID]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY TRIM(A.[RecID]) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_LAC_AP_PAYMENT_FS] A
		LEFT JOIN [DWH].[W_LAC_SUPPLIER_D] SU ON trim([ObjectID]) = SU.[SUPPLIER_CODE]
		LEFT JOIN [DWH].[W_LAC_GL_ACCOUNT_D] AC ON TRIM(A.[AccountID]) = AC.[ACCOUNT_CODE]
		LEFT JOIN [DWH].[W_LAC_AP_BALANCE_F] BA ON trim([SettledID]) = BA.[RECID]
		)
		insert into #W_LAC_AP_PAYMENT_F_TMP 
		select
			[DATE_WID],
			[BALANCE_WID],
			[SUPPLIER_WID],
			[ACCOUNT_WID],
			[RECID],
			[ACCOUNTID],
			[OBJECTID],
			[TRANSDATE],
			[TRANSNO],
			[MEMO],
			[CURRENCYID],
			[EXCHANGERATE],
			[SETTLEDID],
			[SETTLEDAMT],
			[SETTLEDAMT2],
			[EXTRACT_DATE],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_AR_BALANCE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_AR_BALANCE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_AR_BALANCE_F',
	@V_src_table nvarchar(100) = 'W_LAC_AR_BALANCE_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				FORMAT(cast(A.[TransDate] as date),'yyyyMMdd') [DATE_WID],
				ISNULL(CU.[ROW_WID],0) [CUSTOMER_WID],
				ISNULL(AC.[ROW_WID],0) [ACCOUNT_WID],
				TRIM(A.[RecID]) [RECID],
				TRIM(A.[Customer Code]) [CUSTOMER_CODE],
				TRIM(A.[Invoice]) [INVOICE],
				try_cast(A.[Invoice Date] as datetime) [INVOICE_DATE],
				TRIM(A.[Customer Group]) [CUSTOMER_GROUP],
				TRIM(A.[AccountID]) [ACCOUNTID],
				TRIM(A.[CurrencyID]) [CURRENCYID],
				A.[ExchangeRate] [EXCHANGERATE],
				TRIM(A.[TransNo]) [TRANSNO],
				try_cast(A.[TransDate] as datetime) [TRANSDATE],
				TRIM(A.[Payment Term]) [PAYMENT_TERM],
				TRIM(A.[Payment Method]) [PAYMENT_METHOD],
				try_cast(A.[Due Date] as datetime) [DUE_DATE],
				A.[AR Amount] [AR_AMOUNT],
				A.[AR Amount2] [AR_AMOUNT2],
				A.[Paid Amount] [PAID_AMOUNT],
				A.[Paid Amount2] [PAID_AMOUNT2],
				A.[Oustanding Amount] [OUSTANDING_AMOUNT],
				A.[Oustanding Amount2] [OUSTANDING_AMOUNT2],
				trim(a.[Source]) [SOURCE],
				A.[LastAdjustedAmt] [LAST_ADJUSTED_AMT],
				try_cast(A.[LastAdjustedDate] as datetime) [LAST_ADJUSTED_DATE],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
				try_cast(A.[Extract Date] as datetime) [EXTRACT_DATE],
			    isnull(try_cast(a.[Delete Flag] as bit),0) W_DELETE_FLG,
				TRIM(A.[RecID]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY TRIM(A.[RecID]) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_LAC_AR_BALANCE_FS] A
		LEFT JOIN [DWH].[W_LAC_CUSTOMER_D] CU ON TRIM(A.[Customer Code]) = CU.[CUSTOMER_CODE]
		LEFT JOIN [DWH].[W_LAC_GL_ACCOUNT_D] AC ON TRIM(A.[AccountID]) = AC.[ACCOUNT_CODE]
			
		)
		insert into #W_LAC_AR_BALANCE_F_TMP 
		select
			[DATE_WID],
			[CUSTOMER_WID],
			[ACCOUNT_WID],
			[RECID],
			[CUSTOMER_CODE],
			[INVOICE],
			[INVOICE_DATE],
			[CUSTOMER_GROUP],
			[ACCOUNTID],
			[CURRENCYID],
			[EXCHANGERATE],
			[TRANSNO],
			[TRANSDATE],
			[PAYMENT_TERM],
			[PAYMENT_METHOD],
			[DUE_DATE],
			[AR_AMOUNT],
			[AR_AMOUNT2],
			[PAID_AMOUNT],
			[PAID_AMOUNT2],
			[OUSTANDING_AMOUNT],
			[OUSTANDING_AMOUNT2],
			[SOURCE],
			[LAST_ADJUSTED_AMT],
			[LAST_ADJUSTED_DATE],
			[CREATED_DATE],
			[EXTRACT_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;
		*/
		
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		


		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_AR_BALANCE_FINAL_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_AR_BALANCE_FINAL_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_AR_BALANCE_FINAL_F',
	@V_src_table nvarchar(100) = 'W_LAC_AR_BALANCE_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_tmp_dwh_table2 nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@p_prune_days [bigint] ,
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		set @p_prune_days = (SELECT MAX(cast(FORMAT(DATEADD(DAY,-210,[EXTRACT_DATE]),'yyyyMMdd') as bigint)) FROM [DWH].[W_LAC_AR_BALANCE_F] WHERE [W_DELETE_FLG] ='0') 

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end

		SET @v_tmp_dwh_table2 = N'#INVOICE_NEW_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table2) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table2
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		/****** Script for SelectTopNRows command from SSMS  ******/

            SELECT DISTINCT 
            DATE_FROM_WID
            ,DATE_TO_WID
            ,BALANCE_WID
            ,[CUSTOMER_WID]
            ,ACCOUNT_WID
            ,INV_RECID
			,[INV_TRANSNO]
            ,[CUSTOMER_CODE]
            ,INVOICE
            ,INVOICE_DATE
            ,[CUSTOMER_GROUP]
            ,ACCOUNTID
            ,CURRENCYID
            ,EXCHANGERATE
            ,PAYMENT_TERM
            ,PAYMENT_METHOD
            ,DUE_DATE
            ,INV_AR_AMOUNT
            ,INV_AR_AMOUNT2
            ,INV_PAID_AMOUNT
            ,INV_PAID_AMOUNT2
            ,INV_OUSTANDING_AMOUNT
            ,INV_OUSTANDING_AMOUNT2
			,[INV_LAST_ADJUSTED_AMT]
			,[LAST_ADJUSTED_DATE]
			INTO #INVOICE_NEW_TMP
            FROM(
            SELECT
                   A.DATE_WID [DATE_FROM_WID]
            	  ,cast(FORMAT(A.[EXTRACT_DATE],'yyyyMMdd') as bigint) [DATE_TO_WID]
            	  ,A.[ROW_WID] [BALANCE_WID]
            	  ,A.[CUSTOMER_WID]
                  ,A.[ACCOUNT_WID]
                  ,A.[RECID] [INV_RECID]
				  ,A.[TRANSNO] [INV_TRANSNO]
                  ,A.[CUSTOMER_CODE]
                  ,A.[INVOICE]
                  ,A.[INVOICE_DATE]
                  ,A.[CUSTOMER_GROUP]
                  ,A.[ACCOUNTID]
                  ,A.[CURRENCYID]
                  ,A.[EXCHANGERATE]
                  ,A.[PAYMENT_TERM]
                  ,A.[PAYMENT_METHOD]
                  ,A.[DUE_DATE]
            	  ,A.[AR_AMOUNT] [INV_AR_AMOUNT]
            	  ,A.[AR_AMOUNT2] [INV_AR_AMOUNT2]
            	  ,A.[PAID_AMOUNT] [INV_PAID_AMOUNT]
            	  ,A.[PAID_AMOUNT2] [INV_PAID_AMOUNT2]
            	  ,A.[OUSTANDING_AMOUNT] [INV_OUSTANDING_AMOUNT]
            	  ,A.[OUSTANDING_AMOUNT2] [INV_OUSTANDING_AMOUNT2]
				  ,A.[LAST_ADJUSTED_AMT] [INV_LAST_ADJUSTED_AMT]
				  ,A.[LAST_ADJUSTED_DATE]
              FROM [DWH].[W_LAC_AR_BALANCE_F] A
              JOIN [DWH].[W_LAC_AR_PAYMENT_F] PA ON A.ROW_WID = PA.BALANCE_WID AND PA.DATE_WID >= @p_prune_days AND PA.[W_DELETE_FLG] = '0' AND  A.[W_DELETE_FLG] = '0'

            UNION ALL
            SELECT
                   A.DATE_WID [DATE_FROM_WID]
            	  ,cast(FORMAT(A.[EXTRACT_DATE],'yyyyMMdd') as bigint) [DATE_TO_WID]
            	  ,A.[ROW_WID] [BALANCE_WID]
            	  ,A.[CUSTOMER_WID]
                  ,A.[ACCOUNT_WID]
                  ,A.[RECID] [INV_RECID]
				  ,A.[TRANSNO] [INV_TRANSNO]
                  ,A.[CUSTOMER_CODE]
                  ,A.[INVOICE]
                  ,A.[INVOICE_DATE]
                  ,A.[CUSTOMER_GROUP]
                  ,A.[ACCOUNTID]
                  ,A.[CURRENCYID]
                  ,A.[EXCHANGERATE]
                  ,A.[PAYMENT_TERM]
                  ,A.[PAYMENT_METHOD]
                  ,A.[DUE_DATE]
            	  ,A.[AR_AMOUNT] [INV_AR_AMOUNT]
            	  ,A.[AR_AMOUNT2] [INV_AR_AMOUNT2]
            	  ,A.[PAID_AMOUNT] [INV_PAID_AMOUNT]
            	  ,A.[PAID_AMOUNT2] [INV_PAID_AMOUNT2]
            	  ,A.[OUSTANDING_AMOUNT] [INV_OUSTANDING_AMOUNT]
            	  ,A.[OUSTANDING_AMOUNT2] [INV_OUSTANDING_AMOUNT2]
				  ,A.[LAST_ADJUSTED_AMT] [INV_LAST_ADJUSTED_AMT]
				  ,A.[LAST_ADJUSTED_DATE]
              FROM [DWH].[W_LAC_AR_BALANCE_F] A  WHERE A.[OUSTANDING_AMOUNT] <> 0 AND A.[W_DELETE_FLG] = '0'
            ) A;

            WITH CTE AS
            (
            SELECT

            CL.DATE_WID,
            INV.BALANCE_WID,
            INV.[CUSTOMER_WID],
            INV.ACCOUNT_WID,
            INV.INV_RECID,
			INV.[INV_TRANSNO],
            INV.[CUSTOMER_CODE],
            INV.INVOICE,
            INV.INVOICE_DATE,
            INV.[CUSTOMER_GROUP],
            INV.ACCOUNTID,
            INV.CURRENCYID,
            INV.EXCHANGERATE,
            INV.PAYMENT_TERM,
            INV.PAYMENT_METHOD,
            INV.DUE_DATE,
            INV.INV_AR_AMOUNT,
            INV.INV_AR_AMOUNT2,
            INV.INV_PAID_AMOUNT,
            INV.INV_PAID_AMOUNT2,
            INV.INV_OUSTANDING_AMOUNT,
            INV.INV_OUSTANDING_AMOUNT2,
			INV.[INV_LAST_ADJUSTED_AMT],
			INV.[LAST_ADJUSTED_DATE],
            TX.TRANSNO,
            TX.TRANSDATE,
            TX.MEMO,
            TX.PM_RECID,
            TX.[TYPE],
            ISNULL(TX.AR_AMOUNT,0) AR_AMOUNT,
            ISNULL(TX.AR_AMOUNT2,0) AR_AMOUNT2,
            SUM(ISNULL(TX.[AR_AMOUNT],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [TOTAL_AR_AMOUNT],
            SUM(ISNULL(TX.[AR_AMOUNT2],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [TOTAL_AR_AMOUNT2],
            ISNULL(TX.PAID_AMOUNT,0) PAID_AMOUNT,
            ISNULL(TX.PAID_AMOUNT2,0) PAID_AMOUNT2,
            SUM(ISNULL(TX.PAID_AMOUNT,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [TOTAL_PAID_AMOUNT],
            SUM(ISNULL(TX.PAID_AMOUNT2,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [TOTAL_PAID_AMOUNT2],
            INV.[INV_OUSTANDING_AMOUNT] + SUM(ISNULL(TX.PAID_AMOUNT,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) - SUM(ISNULL(TX.[AR_AMOUNT],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [OPENING_AMOUNT],
            INV.[INV_OUSTANDING_AMOUNT2]+INV.[INV_LAST_ADJUSTED_AMT] + SUM(ISNULL(TX.PAID_AMOUNT2,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) - SUM(ISNULL(TX.[AR_AMOUNT2],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) [OPENING_AMOUNT2],
            INV.[INV_OUSTANDING_AMOUNT] + SUM(ISNULL(TX.PAID_AMOUNT,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) - SUM(ISNULL(TX.[AR_AMOUNT],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) +sum(ISNULL(TX.AR_AMOUNT,0) - ISNULL(TX.PAID_AMOUNT,0)) over(partition by INV.INV_RECID,CL.DATE_WID) [OUSTANDING_AMOUNT],
            INV.[INV_OUSTANDING_AMOUNT2]+INV.[INV_LAST_ADJUSTED_AMT] + SUM(ISNULL(TX.PAID_AMOUNT2,0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) - SUM(ISNULL(TX.[AR_AMOUNT2],0)) OVER (PARTITION BY INV.INV_RECID ORDER BY CL.DATE_WID DESC/*,TX.[TYPE] DESC, INV.INV_RECID DESC*/) +sum(ISNULL(TX.AR_AMOUNT2,0)- ISNULL(TX.PAID_AMOUNT2,0)) over(partition by INV.INV_RECID,CL.DATE_WID)  [OUSTANDING_AMOUNT2],
            '0' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
            @v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID,
            1 ROW_NUM


            FROM #INVOICE_NEW_TMP INV
            LEFT JOIN [DWH].[W_CALENDAR_D] CL ON 1 =1
            	AND INV.[DATE_FROM_WID]<= CL.DATE_WID
            	AND INV.[DATE_TO_WID]>= CL.DATE_WID
            	AND CL.DATE_WID >= @p_prune_days
            LEFT JOIN 
            (
            SELECT
            [DATE_WID],
            [ROW_WID] [BALANCE_WID],
            [TRANSNO],
            [TRANSDATE],
            NULL [MEMO],
            NULL [PM_RECID],
            1 [TYPE],
            CASE WHEN [AR_AMOUNT] > 0 THEN [AR_AMOUNT] ELSE 0 END [AR_AMOUNT],
            CASE WHEN [AR_AMOUNT2] > 0 THEN [AR_AMOUNT2] ELSE 0 END [AR_AMOUNT2],
            CASE WHEN [AR_AMOUNT] < 0 THEN -[AR_AMOUNT] ELSE 0 END [PAID_AMOUNT],
            CASE WHEN [AR_AMOUNT2] < 0 THEN -[AR_AMOUNT2] ELSE 0 END [PAID_AMOUNT2]
            FROM
            [DWH].[W_LAC_AR_BALANCE_F] 
            WHERE 1 = 1
			AND [W_DELETE_FLG] = '0'
            AND [DATE_WID] >= @p_prune_days
            UNION ALL
            SELECT
            [DATE_WID],
            [BALANCE_WID],
            [TRANSNO],
            [TRANSDATE],
            [MEMO],
            [RECID] [PM_RECID],
            2 [TYPE],
            0 [AR_AMOUNT],
            0 [AR_AMOUNT2],
            [SETTLEDAMT]  [PAID_AMOUNT],
            [SETTLEDAMT2] [PAID_AMOUNT2]
            FROM 
            [DWH].[W_LAC_AR_PAYMENT_F] WHERE 1 = 1
			AND [W_DELETE_FLG] = '0'
            AND DATE_WID >= @p_prune_days
            ) TX ON 1= 1
            AND TX.[DATE_WID] = CL.[DATE_WID]
            AND TX.[BALANCE_WID] = INV.[BALANCE_WID]
            WHERE 1= 1
            --AND INV.[BALANCE_WID] =78996
            )
		insert into #W_LAC_AR_BALANCE_FINAL_F_TMP 
		select
			[DATE_WID],
			[BALANCE_WID],
			[CUSTOMER_WID],
			[ACCOUNT_WID],
			[INV_RECID],
			[INV_TRANSNO],
			[CUSTOMER_CODE],
			[INVOICE],
			[INVOICE_DATE],
			[CUSTOMER_GROUP],
			[ACCOUNTID],
			[CURRENCYID],
			[EXCHANGERATE],
			[PAYMENT_TERM],
			[PAYMENT_METHOD],
			[DUE_DATE],
			[INV_AR_AMOUNT],
			[INV_AR_AMOUNT2],
			[INV_PAID_AMOUNT],
			[INV_PAID_AMOUNT2],
			[INV_OUSTANDING_AMOUNT],
			[INV_OUSTANDING_AMOUNT2],
			[INV_LAST_ADJUSTED_AMT],
			[LAST_ADJUSTED_DATE],
			[TRANSNO],
			[TRANSDATE],
			[MEMO],
			[PM_RECID],
			[TYPE],
			[AR_AMOUNT],
			[AR_AMOUNT2],
			[TOTAL_AR_AMOUNT],
			[TOTAL_AR_AMOUNT2],
			[PAID_AMOUNT],
			[PAID_AMOUNT2],
			[TOTAL_PAID_AMOUNT],
			[TOTAL_PAID_AMOUNT2],
			[OPENING_AMOUNT],
			[OPENING_AMOUNT2],
			[OUSTANDING_AMOUNT],
			[OUSTANDING_AMOUNT2],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		SET @v_script = N'DELETE A FROM ' +@v_tgt_table_schema+'.'+ @V_tgt_table + ' A INNER JOIN ' +@v_tmp_dwh_table2 +' B ON A.[BALANCE_WID] = B.[BALANCE_WID] AND  A.[DATE_WID] >= B.[DATE_FROM_WID] AND A.[DATE_WID] <= B.[DATE_TO_WID]'
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_AR_INVOICE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_AR_INVOICE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_AR_INVOICE_F',
	@V_src_table nvarchar(100) = 'W_LAC_AR_INVOICE_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(min(CAST([TRANSDATE] AS DATE)),'yyyyMMdd')	 [DATE_FROM_WID],
				FORMAT(min(CAST([Extract Date] AS DATE)),'yyyyMMdd') [DATE_TO_WID],
				TRIM([Invoice]) [INVOICE],
				min(CAST([TRANSDATE] AS DATE))		[TRANSDATE],
				SUM(ISNULL(TRY_CAST([Oustanding Amount] AS FLOAT),0)) [OUSTANDING_AMOUNT],
				SUM(ISNULL(TRY_CAST([Oustanding Amount2] AS FLOAT),0)) [OUSTANDING_AMOUNT2],
				MAX(CAST([Extract Date] AS DATE)) [EXTRACT_DATE],
			    'N' W_DELETE_FLG,
				TRIM([Invoice]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				max(W_BATCH_ID) W_BATCH_ID,
				row_number() OVER (PARTITION BY TRIM([Invoice]) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_LAC_AR_BALANCE_FS] group by TRIM([Invoice])
			
		)
		insert into #W_LAC_AR_INVOICE_F_TMP 
		select
			[DATE_FROM_WID],
			[DATE_TO_WID],
			[INVOICE],
			[TRANSDATE],
			[OUSTANDING_AMOUNT],
			[OUSTANDING_AMOUNT2],
			[EXTRACT_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;


		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;

		
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_AR_PAYMENT_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_AR_PAYMENT_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_AR_PAYMENT_F',
	@V_src_table nvarchar(100) = 'W_LAC_AR_PAYMENT_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				FORMAT(cast(A.[TransDate] as date),'yyyyMMdd') [DATE_WID],
				ISNULL(BA.[ROW_WID],0) [BALANCE_WID],
				ISNULL(CU.[ROW_WID],0) [CUSTOMER_WID],
				ISNULL(AC.[ROW_WID],0) [ACCOUNT_WID],
				trim(A.[Recid]) [RECID],
				trim(A.[AccountID]) [ACCOUNTID],
				trim(A.[ObjectID]) [OBJECTID],
				TRY_CAST(A.[TransDate] AS DATETIME) [TRANSDATE],
				trim(A.[TransNo]) [TRANSNO],
				trim(A.[Memo]) [MEMO],
				trim(A.[CurrencyID]) [CURRENCYID],
				A.[ExchangeRate] [EXCHANGERATE],
				trim(A.[SettledID]) [SETTLEDID],
				A.[SettledAmt] [SETTLEDAMT],
				A.[SettledAmt2] [SETTLEDAMT2],
				TRY_CAST(A.[ExtractDate] AS DATETIME) [EXTRACT_DATE],
			    trim(a.[Source]) [SOURCE],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
			    isnull(try_cast(a.[Delete Flag] as bit),0) W_DELETE_FLG,
				TRIM(A.[RecID]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY TRIM(A.[RecID]) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM [STG].[W_LAC_AR_PAYMENT_FS] A
		LEFT JOIN [DWH].[W_LAC_CUSTOMER_D] CU ON trim([ObjectID]) = CU.[CUSTOMER_CODE]
		LEFT JOIN [DWH].[W_LAC_GL_ACCOUNT_D] AC ON TRIM(A.[AccountID]) = AC.[ACCOUNT_CODE]
		LEFT JOIN [DWH].[W_LAC_AR_BALANCE_F] BA ON trim([SettledID]) = BA.[RECID]
		)
		insert into #W_LAC_AR_PAYMENT_F_TMP 
		select
			[DATE_WID],
			[BALANCE_WID],
			[CUSTOMER_WID],
			[ACCOUNT_WID],
			[RECID],
			[ACCOUNTID],
			[OBJECTID],
			[TRANSDATE],
			[TRANSNO],
			[MEMO],
			[CURRENCYID],
			[EXCHANGERATE],
			[SETTLEDID],
			[SETTLEDAMT],
			[SETTLEDAMT2],
			[EXTRACT_DATE],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;
		*/

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;
	
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_D',
	@V_src_table nvarchar(100) = 'W_LAC_CF_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				[STT],
				[Report_View] [REPORT_VIEW],
				[Lv1 Code] [LV1_CODE],
				[Lv1 Name] [LV1_NAME],
				[Lv2 Code] [LV2_CODE],
				[Lv2 Name] [LV2_NAME],
				[Lv3 Code] [LV3_CODE],
				[Lv3 Name] [LV3_NAME],
				[Lv4 Code] [LV4_CODE],
				[Lv4 Name] [LV4_NAME],
				[Lv5 Code] [LV5_CODE],
				[Lv5 Name] [LV5_NAME],
				[AccountID] [ACCOUNTID],
				[OffsetacctID] [OFFSETACCTID],
				[ObjectID] [OBJECTID],
				[Memo] [MEMO],
				[Type] [TYPE],
				[Sign] [SIGN],
				[Formula] [FORMULA],
				[Isshow] [ISSHOW],
				[Manual] [MANUAL],
			    'N' as W_DELETE_FLG,
			    CONCAT([Report_View],'~',[Lv1 Code],'~',[Lv2 Code],'~',[Lv3 Code],'~',[Lv4 Code],'~',[Lv5 Code]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    @v_batch_id W_BATCH_ID,
			    row_number() over (partition by CONCAT([Report_View],'~',[Lv1 Code],'~',[Lv2 Code],'~',[Lv3 Code],'~',[Lv4 Code],'~',[Lv5 Code]) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_LAC_CF_DS]
		)
		insert into #W_LAC_CF_D_TMP
		select
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV1_NAME],
			[LV2_CODE],
			[LV2_NAME],
			[LV3_CODE],
			[LV3_NAME],
			[LV4_CODE],
			[LV4_NAME],
			[LV5_CODE],
			[LV5_NAME],
			[ACCOUNTID],
			[OFFSETACCTID],
			[OBJECTID],
			[MEMO],
			[TYPE],
			[SIGN],
			[FORMULA],
			[ISSHOW],
			[MANUAL],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_D_FORMULA]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_D_FORMULA] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_D_FORMULA',
	@V_src_table nvarchar(100) = 'W_LAC_CF_D',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process

		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		*/
		
		DECLARE @N BIGINT = 1;

		TRUNCATE TABLE [DWH].[W_LAC_CF_D_FORMULA0]
		TRUNCATE TABLE [DWH].[W_LAC_CF_D_FORMULA1]
		TRUNCATE TABLE [DWH].[W_LAC_CF_D_FORMULA2]

		INSERT INTO [DWH].[W_LAC_CF_D_FORMULA0] SELECT *,NULL LINE_CODE,NULL FORMULA_SIGN,'L0' LINE_LEVEL,CONCAT(REPORT_VIEW,'-',COALESCE(LV5_CODE,LV4_CODE,LV3_CODE,LV2_CODE,LV1_CODE))  LINE_SORT FROM [DWH].[W_LAC_CF_D] WHERE FORMULA IS NULL

		INSERT INTO [DWH].[W_LAC_CF_D_FORMULA1]
		SELECT F.*
				, TRIM(VALUE) AS LINE_CODE
				, CASE 
					WHEN charindex('(+)', TRIM(VALUE), 1) > 1
						THEN 1
					WHEN charindex('(-)', TRIM(VALUE), 1) > 1
						THEN - 1
					ELSE 0
					END FORMULA_SIGN
				, LEFT(TRIM(VALUE), CHARINDEX('(', TRIM(VALUE)) - 1) AS LINE_LEVEL
				, SUBSTRING(TRIM(VALUE), CHARINDEX(')', TRIM(VALUE)) + 1, LEN(TRIM(VALUE))) AS LINE_SORT

			FROM [DWH].[W_LAC_CF_D] F
			CROSS APPLY string_split(FORMULA, '|')
			WHERE F.FORMULA IS NOT NULL 

		INSERT INTO [DWH].[W_LAC_CF_D_FORMULA2] SELECT * FROM [DWH].[W_LAC_CF_D_FORMULA1]


		WHILE @N <> 0
		BEGIN
			truncate table [DWH].[W_LAC_CF_D_FORMULA]
			insert into [DWH].[W_LAC_CF_D_FORMULA]
						select 
						F.[ROW_WID],
						F.[STT],
						F.[REPORT_VIEW],
						F.[LV1_CODE],
						F.[LV1_NAME],
						F.[LV2_CODE],
						F.[LV2_NAME],
						F.[LV3_CODE],
						F.[LV3_NAME],
						F.[LV4_CODE],
						F.[LV4_NAME],
						F.[LV5_CODE],
						F.[LV5_NAME],
						F.[ACCOUNTID],
						F.[OFFSETACCTID],
						F.[OBJECTID],
						F.[MEMO],
						F.[TYPE],
						F.[SIGN],
						F.[FORMULA],
						F.[ISSHOW],
						F.[MANUAL],
						F.[W_DELETE_FLG],
						F.[W_INTEGRATION_ID],
						F.[W_VERSION_PERIOD],
						F.[W_EFFECTIVE_FROM_DT],
						F.[W_EFFECTIVE_TO_DT],
						F.[W_CURRENT_FLG],
						F.[W_INSERT_DT],
						F.[W_UPDATE_DT],
						F.[W_DATASOURCE_NUM_ID],
						F.[W_BATCH_ID],
						F.[LINE_CODE],
						CAST(ISNULL(F0.FORMULA_SIGN, 1) AS INT) * CAST(ISNULL(F.FORMULA_SIGN, 1)AS INT) FORMULA_SIGN,
						COALESCE(F0.LINE_LEVEL,F.LINE_LEVEL) LINE_LEVEL,
						COALESCE(F0.CODE, F.CODE) CODE
						from [DWH].[W_LAC_CF_D_FORMULA2] F
						left join (SELECT * FROM [DWH].[W_LAC_CF_D_FORMULA1] UNION ALL SELECT * FROM [DWH].[W_LAC_CF_D_FORMULA0]  ) F0 on 
												   CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV1_CODE)
														WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV2_CODE)
														WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV3_CODE)
														WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV4_CODE)
														WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV5_CODE) END = F.CODE	
						

						

			SET @N = (select count(*)
			from [DWH].[W_LAC_CF_D_FORMULA2] F
			 join [DWH].[W_LAC_CF_D_FORMULA1]   F0 on 
												   CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV1_CODE)
														WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV2_CODE)
														WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV3_CODE)
														WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV4_CODE)
														WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F0.REPORT_VIEW,'-',F0.LV5_CODE) END = F.CODE)

			TRUNCATE TABLE [DWH].[W_LAC_CF_D_FORMULA2]
			INSERT INTO [DWH].[W_LAC_CF_D_FORMULA2] SELECT * FROM [DWH].[W_LAC_CF_D_FORMULA]


		END

	

		-- End process
		
		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		*/

	    /*
		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;
		*/

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_D_FORMULA_bk]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_D_FORMULA_bk] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_D_FORMULA',
	@V_src_table nvarchar(100) = 'W_LAC_CF_D',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process

		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		*/
		
		DECLARE @N BIGINT = 1;

		TRUNCATE TABLE [DWH].[W_LAC_CF_D_FORMULA0]
		TRUNCATE TABLE [DWH].[W_LAC_CF_D_FORMULA1]
		TRUNCATE TABLE [DWH].[W_LAC_CF_D_FORMULA]

		INSERT INTO [DWH].[W_LAC_CF_D_FORMULA0] SELECT *,NULL LINE_CODE,NULL FORMULA_SIGN,NULL LINE_LEVEL,NULL  LINE_SORT FROM [DWH].[W_LAC_CF_D] WHERE FORMULA IS NULL

		INSERT INTO [DWH].[W_LAC_CF_D_FORMULA1]
		SELECT F.*
				, TRIM(VALUE) AS LINE_CODE
				, CASE 
					WHEN charindex('+', TRIM(VALUE), 1) > 1
						THEN 1
					WHEN charindex('-', TRIM(VALUE), 1) > 1
						THEN - 1
					ELSE 0
					END FORMULA_SIGN
				, LEFT(TRIM(VALUE), CHARINDEX('(', TRIM(VALUE)) - 1) AS LINE_LEVEL
				, SUBSTRING(TRIM(VALUE), CHARINDEX(')', TRIM(VALUE)) + 1, LEN(TRIM(VALUE))) AS LINE_SORT

			FROM [DWH].[W_LAC_CF_D] F
			CROSS APPLY string_split(FORMULA, '|')
			WHERE F.FORMULA IS NOT NULL 



		WHILE @N <> 0
		BEGIN
			INSERT INTO  [DWH].[W_LAC_CF_D_FORMULA] select distinct 
			F.[ROW_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV1_NAME],
			F.[LV2_CODE],
			F.[LV2_NAME],
			F.[LV3_CODE],
			F.[LV3_NAME],
			F.[LV4_CODE],
			F.[LV4_NAME],
			F.[LV5_CODE],
			F.[LV5_NAME],
			F.[ACCOUNTID],
			F.[OFFSETACCTID],
			F.[OBJECTID],
			F.[MEMO],
			F.[TYPE],
			F.[SIGN],
			F.[FORMULA],
			F.[ISSHOW],
			F.[MANUAL],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_VERSION_PERIOD],
			F.[W_EFFECTIVE_FROM_DT],
			F.[W_EFFECTIVE_TO_DT],
			F.[W_CURRENT_FLG],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID],
			F.[LINE_CODE],
			CAST(ISNULL(F1.FORMULA_SIGN, 1) AS INT) * CAST(ISNULL(F.FORMULA_SIGN, 1)AS INT) FORMULA_SIGN,
			COALESCE(F1.LINE_LEVEL, F.LINE_LEVEL) LINE_LEVEL,
			COALESCE(F1.CODE, F.CODE) CODE


			from [DWH].[W_LAC_CF_D_FORMULA1] F join (SELECT * FROM  [DWH].[W_LAC_CF_D_FORMULA0] UNION ALL SELECT * FROM  [DWH].[W_LAC_CF_D_FORMULA])  F1 on CASE							  WHEN F.LINE_LEVEL = 'L1' THEN	CONCAT(F1.REPORT_VIEW,'-',F1.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV5_CODE)
									END = F.CODE
									left join [DWH].[W_LAC_CF_D_FORMULA1] F2 
									on CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV5_CODE) END = F.CODE
									where f2.row_wid is null


			DELETE F from [DWH].[W_LAC_CF_D_FORMULA1] F join (SELECT * FROM  [DWH].[W_LAC_CF_D_FORMULA0] UNION ALL SELECT * FROM  [DWH].[W_LAC_CF_D_FORMULA])  F1 on CASE							  WHEN F.LINE_LEVEL = 'L1' THEN	CONCAT(F1.REPORT_VIEW,'-',F1.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV5_CODE)
									END = F.CODE
									left join [DWH].[W_LAC_CF_D_FORMULA1] F2 
									on CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV5_CODE) END = F.CODE
									where f2.row_wid is null

			SET @N = (SELECT COUNT(*) from [DWH].[W_LAC_CF_D_FORMULA1] F join (SELECT * FROM  [DWH].[W_LAC_CF_D_FORMULA0] UNION ALL SELECT * FROM  [DWH].[W_LAC_CF_D_FORMULA])  F1 on CASE							  WHEN F.LINE_LEVEL = 'L1' THEN	CONCAT(F1.REPORT_VIEW,'-',F1.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV5_CODE)
									END = F.CODE
									left join [DWH].[W_LAC_CF_D_FORMULA1] F2 
									on CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F2.REPORT_VIEW,'-',F2.LV5_CODE) END = F.CODE
									where f2.row_wid is null)

		END

	

		-- End process
		
		/*
		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		*/

	    /*
		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;
		*/

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_F',
	@V_src_table nvarchar(100) = 'W_LAC_GL_DATA_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_tmp_dwh_table2 nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@p_prune_days [bigint] ,
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max),
	@N BIGINT,
	@RW BIGINT,
	@AccountID NVARCHAR(500),
	@OffsetacctID NVARCHAR(500),
	@ObjectID NVARCHAR(500),
	@Memo NVARCHAR(500),
	@Type VARCHAR(1),
	@SCRIPT NVARCHAR(MAX),
	@sign nvarchar(5),
	@DATE_WID VARCHAR(8) = '2021%';

begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		--set @p_prune_days = (SELECT MAX(cast(FORMAT(DATEADD(DAY,-210,[EXTRACT_DATE]),'yyyyMMdd') as bigint)) FROM [DWH].[W_LAC_AP_BALANCE_F] WHERE [W_DELETE_FLG] ='N') 

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end


					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;

	


			SET @N = 1
			TRUNCATE TABLE DWH.W_LAC_CF_D_TEMP
			TRUNCATE TABLE DWH.W_LAC_CF_F_TEMP

			INSERT INTO DWH.W_LAC_CF_D_TEMP
			SELECT ROW_WID,ROW_NUMBER() OVER (ORDER BY ROW_WID) RN FROM [DWH].[W_LAC_CF_D] WHERE [MANUAL] IS NULL AND FORMULA IS NULL  and [Type] <> 'O'

			WHILE @N <= (SELECT COUNT(*) FROM DWH.W_LAC_CF_D_TEMP)
			BEGIN
				SET @RW = (SELECT ROW_WID FROM DWH.W_LAC_CF_D_TEMP WHERE RN = @N)
				SELECT 
				 @AccountID			  = AccountID		
				,@OffsetacctID		  = OffsetacctID	
				,@ObjectID			  = ObjectID		
				,@Memo				  = Memo
				,@Type				  = [Type]
				,@sign				  = (case when charindex('-', isnull(TRIM(sign),''), 1) > 0 then '-1' else '1' end)
				FROM [DWH].[W_LAC_CF_D] WHERE ROW_WID = @RW
				PRINT @AccountID		
				PRINT @OffsetacctID	
				PRINT @ObjectID		
				PRINT @Memo			
				PRINT @Type			
				print @sign

				/*
				IF @RW IN (165,373,15,20,24,179,124,13,399,287,170,261,158,321,218,518,578,577)
					BEGIN
						SET @SCRIPT = N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*(CASE WHEN ''' + @Type + ''' = ''C'' THEN -1 ELSE 1 END)*'+@sign+') AMT FROM [DWH].[W_LAC_GL_DATA_F] WHERE 1=1  AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=(CASE WHEN '''+@Type+''' =''C'' THEN 1 ELSE 0 END) AND  DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
						PRINT @SCRIPT
					END
				ELSE
					BEGIN
						SET @SCRIPT = N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*(CASE WHEN ''' + @Type + ''' = ''C'' THEN -1 ELSE 1 END)*'+@sign+') AMT FROM [DWH].[W_LAC_GL_DATA_F] WHERE 1=1 AND [TRANSAMT] <>0 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=(CASE WHEN '''+@Type+''' =''C'' THEN 1 ELSE 0 END) AND  DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
						PRINT @SCRIPT
					END
				*/
				SET @SCRIPT = N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*(CASE WHEN ''' + @Type + ''' = ''C'' THEN -1 ELSE 1 END)*'+@sign+') AMT FROM [DWH].[W_LAC_GL_DATA_F] WHERE 1=1  AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=(CASE WHEN '''+@Type+''' =''C'' THEN 1 ELSE 0 END) AND  DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
						PRINT @SCRIPT

				EXEC sp_executesql @SCRIPT
				SET @N = @N + 1
	

			END;


            WITH CTE AS
            (
            SELECT
			F.[DATE_WID],
			F.[RL_WID],
			B.[STT],
			B.[REPORT_VIEW],
			B.[LV1_CODE],
			B.[LV2_CODE],
			B.[LV3_CODE],
			B.[LV4_CODE],
			B.[LV5_CODE],
			F.[AMT],
            '0' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
            @v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID,
            1 ROW_NUM


            FROM DWH.W_LAC_CF_F_TEMP F JOIN [DWH].[W_LAC_CF_D] B ON F.[RL_WID] = B.ROW_WID

            )
		insert into #W_LAC_CF_F_TMP 
		select
			[DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[AMT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from 
			(
			select *, row_number() over (partition by date_wid,rl_wid order by [W_DATASOURCE_NUM_ID] desc) rn
			from(
			select
				[DATE_WID],
				[RL_WID],
				[STT],
				[REPORT_VIEW],
				[LV1_CODE],
				[LV2_CODE],
				[LV3_CODE],
				[LV4_CODE],
				[LV5_CODE],
				[AMT],
				[W_DELETE_FLG],
				[W_INTEGRATION_ID],
				[W_INSERT_DT],
				[W_UPDATE_DT],
				[W_DATASOURCE_NUM_ID],
				[W_BATCH_ID]
			from CTE
			where ROW_NUM=1
			UNION ALL
			SELECT * FROM [DWH].[W_CF_MONTHLY_ACTUAL_F] WHERE DATE_WID LIKE @DATE_WID and [AMT] IS NOT NULL
			UNION ALL
			select
				[DATE_WID],
				[RL_WID],
				[STT],
				[REPORT_VIEW],
				[LV1_CODE],
				[LV2_CODE],
				[LV3_CODE],
				[LV4_CODE],
				[LV5_CODE],
				[OPENING] [AMT],
				[W_DELETE_FLG],
				[W_INTEGRATION_ID],
				[W_INSERT_DT],
				[W_UPDATE_DT],
				[W_DATASOURCE_NUM_ID],
				[W_BATCH_ID] FROM [DWH].[W_LAC_CF_MONTHLY_BALANCE_F] WHERE DATE_WID LIKE @DATE_WID
			) a 
			
			) a where rn = 1
		;

		/*
		WITH CTE2 AS
		(
		SELECT
		F1.[DATE_WID],
		F.[ROW_WID] [RL_WID],
		F.[STT],
		F.[REPORT_VIEW],
		F.[LV1_CODE],
		F.[LV2_CODE],
		F.[LV3_CODE],
		F.[LV4_CODE],
		F.[LV5_CODE],
		F1.[AMT]*F.[FORMULA_SIGN] [AMT],
		F1.[W_DELETE_FLG],
		F1.[W_INTEGRATION_ID],
		F1.[W_INSERT_DT],
		F1.[W_UPDATE_DT],
		F1.[W_DATASOURCE_NUM_ID],
		F1.[W_BATCH_ID]
		FROM [DWH].[W_LAC_CF_D_FORMULA] F JOIN   #W_LAC_CF_F_TMP   F1 ON CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV5_CODE) END = F.CODE
		)
		*/
		WITH CTE2 AS
		(
		SELECT
		F1.[DATE_WID],
		F.[ROW_WID] [RL_WID],
		F.[STT],
		F.[REPORT_VIEW],
		F.[LV1_CODE],
		F.[LV2_CODE],
		F.[LV3_CODE],
		F.[LV4_CODE],
		F.[LV5_CODE],
		F1.[AMT]*F.[FORMULA_SIGN] [AMT],
		F1.[W_DELETE_FLG],
		F1.[W_INTEGRATION_ID],
		F1.[W_INSERT_DT],
		F1.[W_UPDATE_DT],
		F1.[W_DATASOURCE_NUM_ID],
		F1.[W_BATCH_ID]
		FROM [DWH].[W_LAC_CF_D_FORMULA] F JOIN   #W_LAC_CF_F_TMP   F1 ON CONCAT(F1.REPORT_VIEW,'-',COALESCE(F1.LV5_CODE,F1.LV4_CODE,F1.LV3_CODE,F1.LV2_CODE,F1.LV1_CODE)) = F.CODE
			AND F.LINE_LEVEL = 'L0'
		)
		insert into #W_LAC_CF_F_TMP
		SELECT * FROM CTE2



		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		SET @v_script = N'DELETE A FROM ' +@v_tgt_table_schema+'.'+ @V_tgt_table + ' A WHERE A.DATE_WID LIKE'''+@DATE_WID + ''''
		EXEC sp_executesql @v_script;
		


		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_MONTHLY_BALANCE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_MONTHLY_BALANCE_F] @p_batch_id [bigint] AS  
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_MONTHLY_BALANCE_F',
	@V_src_table nvarchar(100) = 'W_LAC_GL_DATA_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max),
	@N BIGINT,
	@RW BIGINT,
	@AccountID NVARCHAR(500),
	@OffsetacctID NVARCHAR(500),
	@ObjectID NVARCHAR(500),
	@Memo NVARCHAR(500),
	@Type VARCHAR(1),
	@SCRIPT NVARCHAR(MAX),
	@sign nvarchar(5),
	@DATE_WID VARCHAR(8) = '20210501';
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;

		-- INSERT OPENING_BALANCE
		/*
		INSERT INTO [DWH].[W_LAC_CF_MONTHLY_BALANCE_F]
		SELECT 
		   '20210501' [DATE_WID],
		   b.row_wid [RL_WID],
		   b.[STT],
		   b.[REPORT_VIEW],
		   b.[LV1_CODE],
		   b.[LV2_CODE],
		   b.[LV3_CODE],
		   b.[LV4_CODE],
		   b.[LV5_CODE],
		   COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
		   0 [OPENING],
		   0 [DR],
		   0 [CR],
		   TRY_CAST([2021-06-01 00:00:00] AS FLOAT) [CLOSING],
		   '0' W_DELETE_FLG,
		   NULL W_INTEGRATION_ID,
		   DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
		   DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
		   3 W_DATASOURCE_NUM_ID,
		   1 W_BATCH_ID
	  FROM [STG].[W_LAC_CF_MONTHLY_ACTUAL_OPENING_FS] A JOIN  [DWH].[W_LAC_CF_D] B on COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = TRIM([No]) WHERE ISNULL(TRY_CAST([2021-06-01 00:00:00] AS FLOAT),0)<> 0
	  */
			SET @N = 1
			TRUNCATE TABLE DWH.W_LAC_CF_D_TEMP

			INSERT INTO DWH.W_LAC_CF_D_TEMP
			SELECT ROW_WID,ROW_NUMBER() OVER (ORDER BY ROW_WID) RN FROM [DWH].[W_LAC_CF_D] WHERE [MANUAL] IS NULL AND FORMULA IS NULL and [Type] ='O'

			WHILE @N <= (SELECT COUNT(*) FROM DWH.W_LAC_CF_D_TEMP)
			BEGIN
				SET @RW = (SELECT ROW_WID FROM DWH.W_LAC_CF_D_TEMP WHERE RN = @N)
				SELECT 
				 @AccountID			  = AccountID		
				,@OffsetacctID		  = OffsetacctID	
				,@ObjectID			  = ObjectID		
				,@Memo				  = Memo
				,@Type				  = [Type]
				,@sign				  = (case when charindex('-', isnull(TRIM([sign]),''), 1) > 0 then '-1' else '1' end)
				FROM [DWH].[W_LAC_CF_D] WHERE ROW_WID = @RW
				PRINT @AccountID		
				PRINT @OffsetacctID	
				PRINT @ObjectID		
				PRINT @Memo			
				PRINT @Type
				print @sign
				

			
				SET @SCRIPT = N'INSERT INTO #W_LAC_CF_MONTHLY_BALANCE_F_TMP ([DATE_WID],[RL_WID],[DR])
				SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*'+@sign+') AMT FROM [DWH].[W_LAC_GL_DATA_F] 
				WHERE 1=1  AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=0 AND  left(DATE_WID,6) + ''01'' > '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
				PRINT @SCRIPT


				EXEC sp_executesql @SCRIPT

				SET @SCRIPT = N'INSERT INTO #W_LAC_CF_MONTHLY_BALANCE_F_TMP ([DATE_WID],[RL_WID],[CR])
				SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*(-1)*'+@sign+') AMT FROM [DWH].[W_LAC_GL_DATA_F] 
				WHERE 1=1  AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=1 AND  left(DATE_WID,6) + ''01'' > '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
				PRINT @SCRIPT


				EXEC sp_executesql @SCRIPT
				SET @N = @N + 1
	
		

			END;

			delete [DWH].[W_LAC_CF_MONTHLY_BALANCE_F] where [DATE_WID] > @DATE_WID;
			WITH CTE1 as (
				
					SELECT 
					   a.[DATE_WID],
					   a.[RL_WID],
					   b.[STT],
					   b.[REPORT_VIEW],
					   b.[LV1_CODE],
					   b.[LV2_CODE],
					   b.[LV3_CODE],
					   b.[LV4_CODE],
					   b.[LV5_CODE],
					   COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
					   0 [OPENING],
					   a.[DR],
					   a.[CR],
					   0 [CLOSING],
					   '0' W_DELETE_FLG,
					   NULL W_INTEGRATION_ID,
					   DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
					   DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
					   @v_datasource_num_id W_DATASOURCE_NUM_ID,
					   @v_datasource_num_id W_BATCH_ID
					  FROM (SELECT [DATE_WID],[RL_WID],SUM(ISNULL([DR],0)) [DR],SUM(ISNULL([CR],0)) [CR] FROM #W_LAC_CF_MONTHLY_BALANCE_F_TMP GROUP BY [DATE_WID],[RL_WID] )A JOIN  [DWH].[W_LAC_CF_D] B on B.row_wid = A.[RL_WID]

					  union all 
					  SELECT [DATE_WID]
							  ,[RL_WID]
							  ,[STT]
							  ,[REPORT_VIEW]
							  ,[LV1_CODE]
							  ,[LV2_CODE]
							  ,[LV3_CODE]
							  ,[LV4_CODE]
							  ,[LV5_CODE]
							  ,[LV0_CODE]
							  ,[OPENING]
							  ,case when [CLOSING] >= 0 then [CLOSING] else 0 end [DR]
							  ,case when [CLOSING] < 0 then -[CLOSING] else 0 end [CR]
							  ,0 [CLOSING]
							  ,[W_DELETE_FLG]
							  ,[W_INTEGRATION_ID]
							  ,[W_INSERT_DT]
							  ,[W_UPDATE_DT]
							  ,[W_DATASOURCE_NUM_ID]
							  ,[W_BATCH_ID]
						  FROM [DWH].[W_LAC_CF_MONTHLY_BALANCE_F] where [DATE_WID] = @DATE_WID
					) , CTE2 AS(
						SELECT B.[DATE_WID]
							  ,A.[RL_WID]
							  ,A.[STT]
							  ,A.[REPORT_VIEW]
							  ,A.[LV1_CODE]
							  ,A.[LV2_CODE]
							  ,A.[LV3_CODE]
							  ,A.[LV4_CODE]
							  ,A.[LV5_CODE]
							  ,A.[LV0_CODE]
							  ,(SUM(ISNULL(C.[DR],0) - ISNULL(C.[CR],0)) OVER (PARTITION BY A.[RL_WID] ORDER BY B.[DATE_WID])) - (ISNULL(C.[DR],0)-ISNULL(C.[CR],0)) [OPENING]
							  ,ISNULL(C.[DR],0) [DR]
							  ,ISNULL(C.[CR],0) [CR]
							  ,SUM(ISNULL(C.[DR],0) - ISNULL(C.[CR],0)) OVER (PARTITION BY A.[RL_WID] ORDER BY B.[DATE_WID]) [CLOSING]
							  ,'0'[W_DELETE_FLG]
							  ,NULL W_INTEGRATION_ID
							  ,DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT
							  ,DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
							  ,@v_datasource_num_id W_DATASOURCE_NUM_ID
							  ,@v_datasource_num_id W_BATCH_ID
						FROM (SELECT DISTINCT 
							  [RL_WID]
							  ,[STT]
							  ,[REPORT_VIEW]
							  ,[LV1_CODE]
							  ,[LV2_CODE]
							  ,[LV3_CODE]
							  ,[LV4_CODE]
							  ,[LV5_CODE]
							  ,[LV0_CODE] FROM CTE1) A 
						CROSS JOIN (SELECT DISTINCT LEFT([DATE_WID],6) +'01' [DATE_WID] FROM  [DWH].[W_CALENDAR_D] WHERE [DATE_WID] >= @DATE_WID AND [DATE_WID] <= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')) B
						left JOIN CTE1 C ON A.[RL_WID] = C.[RL_WID] AND C.[DATE_WID] = B.[DATE_WID]

					)
					insert into [DWH].[W_LAC_CF_MONTHLY_BALANCE_F]
					select * from cte2 where [DATE_WID] > @DATE_WID


		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''1'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;

		
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		
		

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		*/

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_MONTHLY_FORECAST_F',
	@V_src_table nvarchar(100) = 'W_LAC_CF_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_tmp_dwh_table2 nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@p_prune_days [bigint] ,
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max),
	@n int,
	@n_code int,
	@code nvarchar(1000),
	@year int,
	@script nvarchar(max), 
	@from_date int, 
	@to_date int, 
	@month_run varchar(8)


begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		set @month_run = (select FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd'))
		set @n = month(cast(@month_run as datetime))
		set @year = year(cast(@month_run as datetime))
		set @code = '(''B1.4.2'',''B1.4.3'',''B1.4.4'',''B2.1'',''B2.2.9'',''B2.4.3.2'',''B2.4.3.3'',''B2.4.4'',''B2.7.1'',''B2.7.2'',''B2.7.3'',''B2.7.4'',''B2.7.7'',''B2.7.8'',''B2.7.9'',''B2.7.10'',''B2.7.11'',''B2.7.12'',''B2.7.13'',''B2.7.14'',''B2.7.15'',''B2.7.16'',''B2.7.17'',''B2.7.18'',''B2.8.2.1'',''B2.8.2.2'',''B2.8.2.3'',''B2.8.2.4'',''B2.8.2.5'')'

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		
		delete  [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] where W_VERSION_PERIOD = @month_run

		while @n <= 12
			begin
				set @to_date = format(datefromparts(@year,@n,1),'yyyyMMdd')
				if (@n >=3 and @n <7)
					begin
						set @from_date = format(dateadd(month,-5,datefromparts(@year,@n,1)),'yyyyMMdd')
					end
				else
					begin
						set @from_date = format(dateadd(month,-4,datefromparts(@year,@n,1)),'yyyyMMdd')
					end

				exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_F_GEN_SCRIPT]
							@n = @n,
							@year = @year,
							@code = @code,
							@from_date = @from_date,
							@to_date = @to_date,
							@v_datasource_num_id = @v_datasource_num_id,
							@v_batch_id=@v_batch_id,
							@script = @script OUT;
				print @script
				EXEC sp_executesql @script
		
				set @n = @n + 1
			end

		delete [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] where [W_VERSION_PERIOD]= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd');
		with cte as(
			select a.[PO_ID],a.[CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[DATE],[PAYMENT_SCHEDULE_1ST] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_1ST],[DATE]) [PAYMENT_DATE],[AMOUNT],[PERCENTAGE_OF_PS_1ST] [PERCENTAGE],a.[AMOUNT]*B.[PERCENTAGE_OF_PS_1ST]/100 [PAYMENT_AMOUNT]
			from
			(select [PO_ID],[CUSTOMER_CODE],[DATE],[AMOUNT] from (
			select [PO_ID],[CUSTOMER_CODE],[TPG_DELIVERY_PLAN_DATE] [DATE], [AMOUNT] from [DWH].[W_MRP_TRX_SALES_ORDER_F] where ISNULL([vendor_CODE],'') NOT IN ('','0') and [TPG_DELIVERY_PLAN_DATE] is not null) A where [AMOUNT]<> 0 and [PO_ID] not in (select distinct [PO_ID] from [DWH].[W_MRP_TRX_SALES_INVOICE_F])) a
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[PO_ID] = c.[PO_ID]
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on c.PAYMENT_TERM_WID = B.ROW_WID 
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_1ST]/100 <> 0  AND [PERCENTAGE_OF_PS_1ST] <> 100

			union all
			select a.[PO_ID],a.[CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[DATE],[PAYMENT_SCHEDULE_2ND] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_2ND],[DATE]) [PAYMENT_DATE],[AMOUNT],[PERCENTAGE_OF_PS_2ND] [PERCENTAGE],a.[AMOUNT]*B.[PERCENTAGE_OF_PS_2ND]/100 [PAYMENT_AMOUNT]
			from
			(select [PO_ID],[CUSTOMER_CODE],[DATE],[AMOUNT] from (
			select [PO_ID],[CUSTOMER_CODE],[TPG_DELIVERY_PLAN_DATE] [DATE], [AMOUNT] from [DWH].[W_MRP_TRX_SALES_ORDER_F] where ISNULL([vendor_CODE],'') NOT IN ('','0') and [TPG_DELIVERY_PLAN_DATE] is not null) A where [AMOUNT]<> 0 and [PO_ID] not in (select distinct [PO_ID] from [DWH].[W_MRP_TRX_SALES_INVOICE_F])) a
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[PO_ID] = c.[PO_ID]
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on c.PAYMENT_TERM_WID = B.ROW_WID 
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_2ND]/100 <> 0 

			union all
			select a.[PO_ID],a.[CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[DATE],[PAYMENT_SCHEDULE_3RD] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_3RD],[DATE]) [PAYMENT_DATE],[AMOUNT],[PERCENTAGE_OF_PS_3RD] [PERCENTAGE],a.[AMOUNT]*B.[PERCENTAGE_OF_PS_3RD]/100 [PAYMENT_AMOUNT]
			from
			(select [PO_ID],[CUSTOMER_CODE],[DATE],[AMOUNT] from (
			select [PO_ID],[CUSTOMER_CODE],[TPG_DELIVERY_PLAN_DATE] [DATE], [AMOUNT] from [DWH].[W_MRP_TRX_SALES_ORDER_F] where ISNULL([vendor_CODE],'') NOT IN ('','0') and [TPG_DELIVERY_PLAN_DATE] is not null) A where [AMOUNT]<> 0 and [PO_ID] not in (select distinct [PO_ID] from [DWH].[W_MRP_TRX_SALES_INVOICE_F])) a
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[PO_ID] = c.[PO_ID]
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on c.PAYMENT_TERM_WID = B.ROW_WID 
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_3RD]/100 <> 0 

			union all
			select a.[PO_ID],a.[CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[DATE],[PAYMENT_SCHEDULE_4TH] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_4TH],[DATE]) [PAYMENT_DATE],[AMOUNT],[PERCENTAGE_OF_PS_4TH] [PERCENTAGE],a.[AMOUNT]*B.[PERCENTAGE_OF_PS_4TH]/100 [PAYMENT_AMOUNT]
			from
			(select [PO_ID],[CUSTOMER_CODE],[DATE],[AMOUNT] from (
			select [PO_ID],[CUSTOMER_CODE],[TPG_DELIVERY_PLAN_DATE] [DATE], [AMOUNT] from [DWH].[W_MRP_TRX_SALES_ORDER_F] where ISNULL([vendor_CODE],'') NOT IN ('','0') and [TPG_DELIVERY_PLAN_DATE] is not null) A where [AMOUNT]<> 0 and [PO_ID] not in (select distinct [PO_ID] from [DWH].[W_MRP_TRX_SALES_INVOICE_F])) a
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[PO_ID] = c.[PO_ID]
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on c.PAYMENT_TERM_WID = B.ROW_WID 
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_4TH]/100 <> 0 

			union all
			select a.[PO_ID],a.[CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[DATE],[PAYMENT_SCHEDULE_5TH] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_5TH],[DATE]) [PAYMENT_DATE],[AMOUNT],[PERCENTAGE_OF_PS_5TH] [PERCENTAGE],a.[AMOUNT]*B.[PERCENTAGE_OF_PS_5TH]/100 [PAYMENT_AMOUNT]
			from
			(select [PO_ID],[CUSTOMER_CODE],[DATE],[AMOUNT] from (
			select [PO_ID],[CUSTOMER_CODE],[TPG_DELIVERY_PLAN_DATE] [DATE], [AMOUNT] from [DWH].[W_MRP_TRX_SALES_ORDER_F] where ISNULL([vendor_CODE],'') NOT IN ('','0') and [TPG_DELIVERY_PLAN_DATE] is not null) A where [AMOUNT]<> 0 and [PO_ID] not in (select distinct [PO_ID] from [DWH].[W_MRP_TRX_SALES_INVOICE_F])) a
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[PO_ID] = c.[PO_ID]
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on c.PAYMENT_TERM_WID = B.ROW_WID 
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_5TH]/100 <> 0 

			UNION ALL
			select a.[PO_ID],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],INVOICE_DATE [DATE],[PAYMENT_SCHEDULE_1ST] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_1ST],INVOICE_DATE) [PAYMENT_DATE],DOCUMENT_AMOUNT AMOUNT,[PERCENTAGE_OF_PS_1ST] [PERCENTAGE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_1ST]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_1ST]/100 <> 0 
			UNION ALL
			select a.[PO_ID],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],INVOICE_DATE [DATE],[PAYMENT_SCHEDULE_2ND] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_2ND],INVOICE_DATE) [PAYMENT_DATE],DOCUMENT_AMOUNT AMOUNT,[PERCENTAGE_OF_PS_2ND] [PERCENTAGE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_2ND]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_2ND]/100 <> 0 
			UNION ALL
			select a.[PO_ID],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],INVOICE_DATE [DATE],[PAYMENT_SCHEDULE_3RD] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_3RD],INVOICE_DATE) [PAYMENT_DATE],DOCUMENT_AMOUNT AMOUNT,[PERCENTAGE_OF_PS_3RD] [PERCENTAGE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_3RD]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_3RD]/100 <> 0 
			UNION ALL
			select a.[PO_ID],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],INVOICE_DATE [DATE],[PAYMENT_SCHEDULE_4TH] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_4TH],INVOICE_DATE) [PAYMENT_DATE],DOCUMENT_AMOUNT AMOUNT,[PERCENTAGE_OF_PS_4TH] [PERCENTAGE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_4TH]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_4TH]/100 <> 0 
			UNION ALL
			select a.[PO_ID],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],INVOICE_DATE [DATE],[PAYMENT_SCHEDULE_5TH] [PAYMENT_SCHEDULE],DATEADD(DAY,[PAYMENT_SCHEDULE_5TH],INVOICE_DATE) [PAYMENT_DATE],DOCUMENT_AMOUNT AMOUNT,[PERCENTAGE_OF_PS_5TH] [PERCENTAGE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_5TH]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_5TH]/100 <> 0 
		) insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01]
			select
			format([PAYMENT_DATE],'yyyyMMdd') [DATE_WID],
			[PO_ID],
			[CUSTOMER_CODE],
			[CONTRACT_TYPE_NAME],
			[DATE],
			[PAYMENT_SCHEDULE],
			[PAYMENT_DATE],
			AMOUNT,
			[PERCENTAGE],
			[PAYMENT_AMOUNT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from cte where left(format([PAYMENT_DATE],'yyyyMMdd'),6) >= left(format(dateadd(month,-6,dateadd(hour,7,getdate())),'yyyyMMdd'),6) and left(format([PAYMENT_DATE],'yyyyMMdd'),6) <= left(format(dateadd(month,12,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	
			print 'B1.1.1	Haddad'
			-- B1.1.1	Haddad
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.1'
				and a.[CUSTOMER_CODE] like '%Haddad%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.2	His'
			-- B1.1.2	His
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.2'
				and a.[CUSTOMER_CODE] like '%His%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			print 'B1.1.3	Garan'
			-- B1.1.3	Garan
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.3'
				and a.[CUSTOMER_CODE] like '%Garan%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.4	Target'
			-- B1.1.4	Target
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.4'
				and a.[CUSTOMER_CODE] like '%Target%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.5	Aeo'
			-- B1.1.5	Aeo
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.5'
				and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			print 'B1.1.6	Adidas'
			-- B1.1.6	Adidas
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.6'
				and a.[CUSTOMER_CODE] like '%Adidas%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.7	Lifung'
			-- B1.1.7	Lifung
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.7'
				and a.[CUSTOMER_CODE] like '%Lifung%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.8	Khác (Asia, NW360, GU, Walmart….)'
			-- B1.1.8	Khác (Asia, NW360, GU, Walmart….)
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.8'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.2.1	Gia công May '
			-- B1.2.1	Gia công May 
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.2.1'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng gia công may trong nước'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			print 'B1.2.2	Gia công may xuất khẩu'
			-- B1.2.2	Gia công may xuất khẩu
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([DATE_WID],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.2.1'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng gia công xuất khẩu'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			where left(format([DATE_WID],'yyyyMMdd'),6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY left([DATE_WID],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			print 'input from excel'
			--input from excel
				insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				SELECT a.[DATE_WID]
			  ,a.[RL_WID]
			  ,a.[STT]
			  ,a.[REPORT_VIEW]
			  ,a.[LV1_CODE]
			  ,a.[LV2_CODE]
			  ,a.[LV3_CODE]
			  ,a.[LV4_CODE]
			  ,a.[LV5_CODE]
			  ,a.[LV0_CODE]
			  ,a.[AMT]*[EXCHANGE_RATE] [AMT]
			  ,a.[W_DELETE_FLG]
			  ,a.[W_INTEGRATION_ID]
			  ,a.[W_VERSION_PERIOD]
			  ,a.[W_INSERT_DT]
			  ,a.[W_UPDATE_DT]
			  ,a.[W_DATASOURCE_NUM_ID]
			  ,a.[W_BATCH_ID]
		  FROM [DWH].[W_EXE_CF_MONTHLY_FORECAST_F] a
		  JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
		  WHERE [W_VERSION_PERIOD] = FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') and [AMT] <> 0 ;



		  print 'B1.3	THU TỪ THƯƠNG HIỆU MDK'
			-- B1.3	THU TỪ THƯƠNG HIỆU MDK


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			[DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[Amount] [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from (  SELECT [DATE_WID],
       ( select  sum([Paid Amount])*0.25  [Amount] from  [DWH].[VW_HAR_SALES_Fact]  where left([Date Key],6) = left(format(dateadd(month,-1,dateadd(hour,7,getdate())),'yyyyMMdd'),6) ) + sum([AMOUNT])*0.75 [AMOUNT]
  FROM [DWH].[W_MDK_SALE_TARGET_F] where left([DATE_WID],6) = left(format(dateadd(hour,7,getdate()),'yyyyMMdd'),6) GROUP BY [DATE_WID]) a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.3'


DECLARE @NS BIGINT
		SET @N = 2
		SET @NS = (select count(*) from (select [DATE_WID],row_number() over(order by [DATE_WID]) RN from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from [DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),11)),'yyyyMMdd')) A) a)
 
		WHILE @N <= @NS
			BEGIN
				
				insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				select
				[DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				[Amount1]*0.25+[Amount2]*0.75 [AMT],
				'0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from (  
					 
						SELECT left([DATE_WID],6) + '01' [DATE_WID],
							   (SELECT 
							   sum(isnull([AMOUNT],0)) 
								 FROM [DWH].[W_MDK_SALE_TARGET_F] where left([DATE_WID],6) > left(format(dateadd(month,-1,dateadd(hour,7,getdate())),'yyyyMMdd'),6) 
								 and left([DATE_WID],6)+ '01' = 
								 (select [DATE_WID] from (select [DATE_WID],row_number() over(order by [DATE_WID]) RN from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from[DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),11)),'yyyyMMdd')) A) a where RN=(@N-1))) [AMOUNT1],
							   sum([AMOUNT]) [AMOUNT2]
								 FROM [DWH].[W_MDK_SALE_TARGET_F] where left([DATE_WID],6) > left(format(dateadd(month,-1,dateadd(hour,7,getdate())),'yyyyMMdd'),6) 
								 and left([DATE_WID],6) + '01'= 
								 (select [DATE_WID] from (select [DATE_WID],row_number() over(order by [DATE_WID]) RN from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from[DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),11)),'yyyyMMdd')) A) a where RN=@N)
								 GROUP BY left([DATE_WID],6) + '01'
						
						) a  JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.3'

				
		
				SET @N =@N + 1
			END
;	
		--B1.4.1	Thu hoàn thuế nhập khẩu/ GTGT
		IF OBJECT_ID('tempdb..#cf_monthly_forecast_b141_tmp') IS NOT NULL        
		begin
            drop table #cf_monthly_forecast_b141_tmp
        end
		
		  select * into #cf_monthly_forecast_b141_tmp
		  from(
		  SELECT [DATE_WID]
				,sum([AMT])  [AMT]
			FROM [DWH].[W_LAC_CF_F] where 
			left(date_wid,6) >= format(dateadd(month,-2,dateadd(hour,7,getdate())),'yyyyMM') 
			and left(date_wid,6) < format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM')
			and COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE]) in ('B1.1.1','B1.1.2','B1.1.3','B1.1.4','B1.1.5','B1.1.6','B1.1.7','B1.1.8','B1.2.1','B1.2.2')
			and [W_DELETE_FLG] = '0'
			group by [DATE_WID]
		  union all

		  select 
		  left([DATE_WID],6) +'01' [DATE_WID],
		  sum([AMT]) [AMT] 
		  FROM [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
		  where [W_VERSION_PERIOD] = FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') 
		  and  lv0_code   in ('B1.1.1','B1.1.2','B1.1.3','B1.1.4','B1.1.5','B1.1.6','B1.1.7','B1.1.8','B1.2.1','B1.2.2')
		  and  [W_DELETE_FLG] = '0'
		  and left(date_wid,6) >= format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM')
		  group by left([DATE_WID],6) +'01') a
 
		IF OBJECT_ID('tempdb..#calendar_tmp') IS NOT NULL        
		begin
            drop table #calendar_tmp
        end
		  select [DATE_WID],row_number() over(order by [DATE_WID]) RN into #calendar_tmp from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from [DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-3)),'yyyyMMdd') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),11)),'yyyyMMdd')) A


		SET @N = 3
		SET @NS = (select count(*) from #calendar_tmp)

		WHILE @N <= @NS
			BEGIN
				
				insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				select
				[DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				[AMT],
				'0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from (  select 
						(select [DATE_WID] from #calendar_tmp where rn = @N) [DATE_WID],
						((select AMT from #cf_monthly_forecast_b141_tmp where [DATE_WID] = (select [DATE_WID] from #calendar_tmp where rn = (@N-1)))
						+ (select AMT from #cf_monthly_forecast_b141_tmp where [DATE_WID] = (select [DATE_WID] from #calendar_tmp where rn = (@N-2))))*0.022 [AMT]

						
						
						) a  JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.4.1'

				
		
				SET @N =@N + 1
			END;
--print 'B2.2.1	Haddad B2.2.1.1'
--		-- B2.2.1	Haddad B2.2.1.1	- Nguyên liệu chính
--		 -- HADDAD-LEVIS
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.1.1'
--				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.1.1'
--				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--		 -- HADDAD-NIKE
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.1.1'
--				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.1.1'
--				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--print 'B1.1.1	Haddad'	
--	-- B1.1.1	Haddad B2.2.1.2	- Phụ liệu
--		 -- HADDAD-LEVIS
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.1.2'
--				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.1.2'
--				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--		 -- HADDAD-NIKE
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.1.2'
--				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.1.2'
--				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--
--
--	-- B2.2.2	His B2.2.2.1	- Nguyên liệu chính
--		 -- HIS
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.2.1'
--				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.2.1'
--				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--		--His B2.2.2.2	- Phụ liệu
--		 -- HIS
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.2.2'
--				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.2.2'
--				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--
--	-- B2.2.3	Garan B2.2.3.1	- Nguyên liệu chính
--		 -- GARAN
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.3.1'
--				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT0,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.3.1'
--				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--	-- B2.2.3	Garan B2.2.3.2	- Phụ liệu
--		 -- GARAN
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.3.2'
--				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.3.2'
--				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--
--	-- B2.2.4	Target B2.2.4.1	- Nguyên liệu chính
--		 -- TARGET
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.4.1'
--				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT0,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.4.1'
--				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--	-- B2.2.4	Target B2.2.4.2	- Phụ liệu
--		 -- TARGET
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.4.2'
--				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.4.2'
--				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--
--	-- B2.2.5	Aeo B2.2.5.1	- Nguyên liệu chính
--		 -- AEO
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.5.1'
--				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT0,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.5.1'
--				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--	-- B2.2.5	Aeo B2.2.5.2	- Phụ liệu
--		 -- AEO
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.5.2'
--				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.5.2'
--				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--
--	-- B2.2.6	Adidas B2.2.6.1	- Nguyên liệu chính
--		 -- ADIDAS
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.6.1'
--				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT0,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.6.1'
--				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--	-- B2.2.6	Adidas B2.2.6.2	- Phụ liệu
--		 -- ADIDAS
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.6.2'
--				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.6.2'
--				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--
--	-- B2.2.7	LIFUNG B2.2.7.1	- Nguyên liệu chính
--		 -- LIFUNG01
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.7.1'
--				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT0,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.7.1'
--				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--	-- B2.2.7	LIFUNG B2.2.7.2	- Phụ liệu
--		 -- LIFUNG01
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.7.2'
--				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.7.2'
--				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--	-- B2.2.8	Khác (Asia, NW360, GU, Walmart….) B2.2.8.1	- Nguyên liệu chính
--		 -- Khác (Asia, NW360, GU, Walmart….)
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.8.1'
--				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT0,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.8.1'
--				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--	-- B2.2.8	Khác (Asia, NW360, GU, Walmart….) B2.2.8.2	- Phụ liệu
--		 -- Khác (Asia, NW360, GU, Walmart….)
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.8.2'
--				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
--			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
--			select
--			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
--			b.row_wid [RL_WID],
--			b.[STT],
--			b.[REPORT_VIEW],
--			b.[LV1_CODE],
--			b.[LV2_CODE],
--			b.[LV3_CODE],
--			b.[LV4_CODE],
--			b.[LV5_CODE],
--			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
--			[PAYMENT_AMOUNT]*23000*[PHỤ LIỆU (PL)] [AMT],
--			'0' W_DELETE_FLG,
--			NULL W_INTEGRATION_ID,
--			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
--			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
--			@v_datasource_num_id W_DATASOURCE_NUM_ID,
--			@v_batch_id W_BATCH_ID
--			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
--			JOIN [DWH].[W_LAC_CF_D] B 
--			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.2.8.2'
--				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
--			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
--			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'PHỤ LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
--			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
--				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
--
print 'B2.3.1'	
	-- B2.3.1	- Nguyên liệu chính
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.3.1'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
			where left(format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0), dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT0,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.3.1'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
			where left(format(dateadd(day,cast(d3.[VALUE] as float),dateadd(day,cast(d1.[VALUE] as float),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.3.2	- Phụ liệu
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.3.2'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
			where left(format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*[NGUYÊN LIỆU (NL)] [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT0,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.3.2'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = N'NGUYÊN LIỆU' and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
			where left(format(dateadd(day,isnull(try_cast(d3.[VALUE] as float),0),dateadd(day,isnull(try_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

print 'B2.5.1	Haddad'
	-- B2.5.1	Haddad B2.5.1.1	- Chi phí may
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,isnull(try_cast(d.[GC MAY NGOÀI ] as float),0)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.1'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,isnull(try_cast(d.[GC MAY NGOÀI ] as float),0)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,isnull(try_cast(d.[GC MAY NGOÀI ] as float),0)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.1'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,isnull(try_cast(d.[GC MAY NGOÀI ] as float),0)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.1	Haddad B2.5.1.2	- Chi phí Wash
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,isnull(try_cast(d.[GC WASH NGOÀI ] as float),0)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.2'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,isnull(try_cast(d.[GC WASH NGOÀI ] as float),0)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,isnull(try_cast(d.[GC WASH NGOÀI ] as float),0)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.2'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,isnull(try_cast(d.[GC WASH NGOÀI ] as float),0)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	   -- B2.5.1	Haddad B2.5.1.3	- Chi phí In
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.3'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.3'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.1	Haddad B2.5.1.4	- Chi phí Thêu
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.4'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.4'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- B2.5.1	Haddad B2.5.1.5	- Chi phí khác
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.5'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.5'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

print 'B2.5.2	His'
	-- B2.5.2	His B2.5.2.1	- Chi phí may
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.1'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.2	His B2.5.2.2	- Chi phí Wash
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.2'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.2	His B2.5.2.3	- Chi phí In
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.3'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.2	His B2.5.2.4	- Chi phí Thêu
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.4'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.2	His B2.5.2.5	- Chi phí khác
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.5'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

print 'B2.5.3	Garan'				  
	-- B2.5.3	Garan B2.5.3.1	- Chi phí may
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.1'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.3	Garan B2.5.3.2	- Chi phí Wash
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.2'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.3	Garan B2.5.3.3	- Chi phí In
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.3'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.3	Garan B2.5.3.4	- Chi phí Thêu
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.4'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.3	Garan B2.5.3.5	- Chi phí khác
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.5'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

print 'B2.5.4	Target'	
		-- B2.5.4	Target B2.5.4.1	- Chi phí may
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.1'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.4	Target B2.5.4.2	- Chi phí Wash
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.2'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.4	Target B2.5.4.3	- Chi phí In
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.3'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.4	Target B2.5.4.4	- Chi phí Thêu
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.4'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.4	Target B2.5.4.5	- Chi phí khác
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.5'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

print 'B2.5.5	Aeo'	
	-- B2.5.5	Aeo B2.5.5.1	- Chi phí may
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.1'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.5	Aeo B2.5.5.2	- Chi phí Wash
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.2'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.5	Aeo B2.5.5.3	- Chi phí In
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.3'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.5	Aeo B2.5.5.4	- Chi phí Thêu
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.4'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.5	Aeo B2.5.5.5	- Chi phí khác
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.5'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.5.6	Adidas B2.5.6.1	- Chi phí may
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.1'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.6	Adidas B2.5.6.2	- Chi phí Wash
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.2'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.6	Adidas B2.5.6.3	- Chi phí In
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.3'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.6	Adidas B2.5.6.4	- Chi phí Thêu
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.4'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.6	Adidas B2.5.6.5	- Chi phí khác
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.5'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.5.7	Lifung B2.5.7.1	- Chi phí may
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.1'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.7	Lifung B2.5.7.2	- Chi phí Wash
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.2'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.7	Lifung B2.5.7.3	- Chi phí In
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.3'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.7	Lifung B2.5.7.4	- Chi phí Thêu
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.4'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.7	Lifung B2.5.7.5	- Chi phí khác
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.5'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.1	- Chi phí may
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.1'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.2	- Chi phí Wash
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.2'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.3	- Chi phí In
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.3'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.4	- Chi phí Thêu
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.4'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.5	- Chi phí khác
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.5'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	-- B2.6		CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.1	- Chi phí may
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.1'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC MAY NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.6	CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.2	- Chi phí Wash
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.2'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC WASH NGOÀI ] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.6	CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.3	- Chi phí In
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.3'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC IN] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.6	CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.4	- Chi phí Thêu
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.4'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC THÊU NGOÀI] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.6	CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.5	- Chi phí khác
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.5'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(month,cast(d.[GC KHÁC] as float)/30, cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6);


--B2.8	CHI TRẢ LÃI VAY
	--B2.8.1	Trả lãi vay ngắn hạn
		
		WITH CTE01 AS
		(
		--B2.8.1.1 Saigonbank
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.1' 
				and F1.[LV0_CODE] = 'O1' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'Saigonbank'
				and D.[CURRENCY] = 'VND'
		union
		--B2.8.1.2 Eximbank
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.2' 
				and F1.[LV0_CODE] = 'O2' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'Eximbank'
				and D.[CURRENCY] = 'VND'
		union
		--B2.8.1.3 Vietinbank
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.3' 
				and F1.[LV0_CODE] = 'O2' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'Vietinbank'
				and D.[CURRENCY] = 'VND'

		union
		--B2.8.1.4 MSB
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.4' 
				and F1.[LV0_CODE] = 'O4' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'MSB'
				and D.[CURRENCY] = 'VND'

		union
		--B2.8.1.5 Techcombank
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.5' 
				and F1.[LV0_CODE] = 'O5' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'Techcombank'
				and D.[CURRENCY] = 'VND'
		)
		insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
		SELECT * FROM CTE01;

		




--formula
		
		--SET @N = 1
		--TRUNCATE TABLE DWH.W_LAC_CF_MONTHLY_FORECAST_D_TMP
		--TRUNCATE TABLE [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TMP2]
		--
		--INSERT INTO DWH.W_LAC_CF_MONTHLY_FORECAST_D_TMP
		--SELECT ROW_WID,ROW_NUMBER() OVER (ORDER BY ROW_WID) RN FROM [DWH].[W_LAC_CF_D] WHERE [MANUAL] IS NULL AND FORMULA IS NULL  
		

		--WHILE @N <= (SELECT COUNT(*) FROM DWH.W_LAC_CF_D_TEMP)
		--BEGIN
		--	SET @RW = (SELECT ROW_WID FROM DWH.W_LAC_CF_D_TEMP WHERE RN = @N)
		--	SELECT 
		--	 @AccountID			  = AccountID		
		--	,@OffsetacctID		  = OffsetacctID	
		--	,@ObjectID			  = ObjectID		
		--	,@Memo				  = Memo
		--	,@Type				  = [Type]
		--	FROM [DWH].[W_LAC_CF_D] WHERE ROW_WID = @RW
		--	PRINT @AccountID		
		--	PRINT @OffsetacctID	
		--	PRINT @ObjectID		
		--	PRINT @Memo			
		--	PRINT @Type			
		--
		--	IF @Type IN ('C','D')
		--	BEGIN
		--
		--		SET @SCRIPT = N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*(CASE WHEN ''' + @Type + ''' = ''C'' THEN -1 ELSE 1 END)) AMT FROM [DWH].[W_LAC_GL_DATA_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=(CASE WHEN '''+@Type+''' =''C'' THEN 1 ELSE 0 END) AND  DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
		--		PRINT @SCRIPT
		--	END
		--
		--	IF @Type IN ('O')
		--	BEGIN
		--		SET @SCRIPT =N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT A.DATE_WID,'+CAST(@RW AS VARCHAR(100))+',SUM(B.AMT) FROM [DWH].[W_CALENDAR_D] A JOIN (SELECT  DATE_WID,(CASE WHEN ''' + @Type + ''' = ''O'' THEN [OPENING2] ELSE [CLOSING2] END) AMT FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+')) B ON B.DATE_WID =(SELECT MAX(DATE_WID) FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND DATE_WID <=  A.DATE_WID) WHERE RIGHT(A.DATE_WID,2) = ''01''  AND A.DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY A.DATE_WID'
		--
		--		PRINT @SCRIPT
		--	END 
		--
		--	IF @Type IN ('B')
		--	BEGIN
		--		SET @SCRIPT =N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT A.DATE_WID,'+CAST(@RW AS VARCHAR(100))+',SUM(B.AMT) FROM [DWH].[W_CALENDAR_D] A JOIN (SELECT  DATE_WID,(CASE WHEN ''' + @Type + ''' = ''O'' THEN [OPENING2] ELSE [CLOSING2] END) AMT FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+')) B ON B.DATE_WID =(SELECT MAX(DATE_WID) FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+') AND DATE_WID <= FORMAT(EOMONTH(CONVERT(DATE,cast(A.DATE_WID as varchar(8)))),''yyyyMMdd'') ) WHERE RIGHT(A.DATE_WID,2) = ''01''  AND A.DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY A.DATE_WID'
		--
		--		PRINT @SCRIPT
		--	END 
		--	EXEC sp_executesql @SCRIPT
		--	SET @N = @N + 1
		--
		--
		--END;
		--
		--
        --WITH CTE AS
        --(
        --SELECT
		--F.[DATE_WID],
		--F.[RL_WID],
		--B.[STT],
		--B.[REPORT_VIEW],
		--B.[LV1_CODE],
		--B.[LV2_CODE],
		--B.[LV3_CODE],
		--B.[LV4_CODE],
		--B.[LV5_CODE],
		--F.[AMT],
        --'0' W_DELETE_FLG,
        --NULL W_INTEGRATION_ID,
        --DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
        --DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
        --@v_datasource_num_id W_DATASOURCE_NUM_ID,
        --@v_batch_id W_BATCH_ID,
        --1 ROW_NUM
		--
        --FROM DWH.W_LAC_CF_F_TEMP F JOIN [DWH].[W_LAC_CF_D] B ON F.[RL_WID] = B.ROW_WID
		--
        --)
		--insert into #W_LAC_CF_F_TMP 
		--select
		--	[DATE_WID],
		--	[RL_WID],
		--	[STT],
		--	[REPORT_VIEW],
		--	[LV1_CODE],
		--	[LV2_CODE],
		--	[LV3_CODE],
		--	[LV4_CODE],
		--	[LV5_CODE],
		--	[AMT],
		--	[W_DELETE_FLG],
		--	[W_INTEGRATION_ID],
		--	[W_INSERT_DT],
		--	[W_UPDATE_DT],
		--	[W_DATASOURCE_NUM_ID],
		--	[W_BATCH_ID]
		--from CTE
		--where ROW_NUM=1
		--UNION ALL
		--SELECT * FROM [DWH].[W_CF_MONTHLY_ACTUAL_F] WHERE DATE_WID LIKE @DATE_WID
		--;

		--TRUNCATE TABLE [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TMP2]

		WITH CTE01 AS
		(
		SELECT
		F1.[DATE_WID],
		F.[ROW_WID] [RL_WID],
		F.[STT],
		F.[REPORT_VIEW],
		F.[LV1_CODE],
		F.[LV2_CODE],
		F.[LV3_CODE],
		F.[LV4_CODE],
		F.[LV5_CODE],
		COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
		F1.[AMT]*F.[FORMULA_SIGN] [AMT],
		F1.[W_DELETE_FLG],
		F1.[W_INTEGRATION_ID],
		FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
		F1.[W_INSERT_DT],
		F1.[W_UPDATE_DT],
		F1.[W_DATASOURCE_NUM_ID],
		F1.[W_BATCH_ID]
		FROM [DWH].[W_LAC_CF_D_FORMULA] F JOIN   [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]   F1 ON CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV5_CODE) END = F.CODE
		)
		insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
		SELECT * FROM CTE01


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_F_GEN_SCRIPT]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_F_GEN_SCRIPT] @month_run [nvarchar](8),@code [nvarchar](1000),@from_date [varchar](8),@v_datasource_num_id [varchar](100),@v_batch_id [varchar](100),@script [nvarchar](max) OUT AS
set @script = 
N'with cte as (
		select
		'+@month_run+' [DATE_WID],
		[RL_WID],
		[STT],
		[REPORT_VIEW],
		[LV1_CODE],
		[LV2_CODE],
		[LV3_CODE],
		[LV4_CODE],
		[LV5_CODE],
		[LV0_CODE],
		avg([AMT]) [AMT]

		from (
			select 
			left([DATE_WID],6) + ''01'' [DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			sum([AMT]) [AMT]
			from [DWH].[VW_LAC_CF_F] where date_wid >= '+@from_date+' and date_wid < '+@month_run+' and date_wid <  FORMAT(dateadd(hour,7,getdate()),''yyyyMM01'')  and right(date_wid,4) <> 201 and lv0_code in '+@code+' group by [RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE],left([DATE_WID],6) having sum([AMT]) <> 0

			union all

			select
			left([DATE_WID],6) + ''01'' [DATE_WID],
			[RL_WID],
			[STT],
			[REPORT_VIEW],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			[LV4_CODE],
			[LV5_CODE],
			[LV0_CODE],
			sum([AMT]) [AMT]
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] where date_wid >= '+@from_date+' and date_wid < '+@month_run+' and date_wid >=  FORMAT(dateadd(hour,7,getdate()),''yyyyMM01'')   and [W_VERSION_PERIOD] = FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),''yyyyMMdd'') and right(date_wid,4) <> 201 and lv0_code in '+@code+' group by [RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE],left([DATE_WID],6) having sum([AMT]) <> 0
		
			
		) a group by [RL_WID],[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],[LV0_CODE]
		)
		insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
		select
		[DATE_WID],
		[RL_WID],
		[STT],
		[REPORT_VIEW],
		[LV1_CODE],
		[LV2_CODE],
		[LV3_CODE],
		[LV4_CODE],
		[LV5_CODE],
		[LV0_CODE],
		[AMT],
		''0'' W_DELETE_FLG,
        NULL W_INTEGRATION_ID,
		FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),''yyyyMMdd'') [W_VERSION_PERIOD],
        DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
        DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
        '+@v_datasource_num_id+ ' W_DATASOURCE_NUM_ID,
        '+@v_batch_id+ ' W_BATCH_ID
		from cte'

GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_F_TY]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_F_TY] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_MONTHLY_FORECAST_F',
	@V_src_table nvarchar(100) = 'W_LAC_CF_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_tmp_dwh_table2 nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@p_prune_days [bigint] ,
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max),
	@n int,
	@n_code int,
	@code nvarchar(1000),
	@year int,
	@month int,
	@script nvarchar(max), 
	@from_date int, 
	@to_date int, 
	@month_run varchar(8),
	@NS BIGINT


begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		
		delete  [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] where W_VERSION_PERIOD = FORMAT(dateadd(hour,7,getdate()),'yyyyMM01')

		IF OBJECT_ID('tempdb..#calendar_tmp') IS NOT NULL        
			begin
				drop table #calendar_tmp
			end
			  select [DATE_WID],row_number() over(order by [DATE_WID]) RN into  #calendar_tmp from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from [DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(month,-6,dateadd(hour,7,getdate())),'yyyyMM01') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(month,11,dateadd(hour,7,getdate())),'yyyyMMdd')) A

		set @n = (select rn from #calendar_tmp where date_wid = FORMAT(dateadd(hour,7,getdate()),'yyyyMM01'))
		set @code = '(''B1.4.2'',''B1.4.3'',''B1.4.4'',''B2.1'',''B2.2.9'',''B2.4.3.2'',''B2.4.3.3'',''B2.4.4'',''B2.7.1'',''B2.7.2'',''B2.7.3'',''B2.7.4'',''B2.7.7'',''B2.7.8'',''B2.7.9'',''B2.7.10'',''B2.7.11'',''B2.7.12'',''B2.7.13'',''B2.7.14'',''B2.7.15'',''B2.7.16'',''B2.7.17'',''B2.7.18'',''B2.8.2.1'',''B2.8.2.2'',''B2.8.2.3'',''B2.8.2.4'',''B2.8.2.5'')'


		while @n <= (select max(rn) from #calendar_tmp)
			begin
				set @month_run = (select date_wid from #calendar_tmp where rn =@n)
				set @month = month(cast(str(@month_run) as datetime))
				if (@month >=3 and @month <7)
					begin
						set @from_date = format(dateadd(month,-5,cast(str(@month_run) as datetime)),'yyyyMMdd')
					end
				else
					begin
						set @from_date = format(dateadd(month,-4,cast(str(@month_run) as datetime)),'yyyyMMdd')
					end

				exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_F_GEN_SCRIPT]
							@month_run = @month_run,
							@code = @code,
							@from_date = @from_date,
							@v_datasource_num_id = @v_datasource_num_id,
							@v_batch_id=@v_batch_id,
							@script = @script OUT;
				print @script
				EXEC sp_executesql @script
		
				set @n = @n + 1
			end

		delete [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] where [W_VERSION_PERIOD]= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd');
		with cte as(
			-- ORDER
			select 1 [TYPE],a.[po number] [PO_NUMBER],e.[Customer Code] [CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[Date Key] [DATE],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01') [PAYMENT_DATE],sum(a.[FOB Order Amount]) [PAYMENT_AMOUNT]
			from
			[DWH].[VW_MRP_SALES_ORDER_F_BK] A
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[Contract Type Key] = c.[row_wid] and trim(c.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng FOB xuất khẩu ')
			join [DWH].[VW_MRP_CUSTOMER_D] e on a.[Customer Key] = e.[Customer Key] and (e.[Customer Code] LIKE '%ADIDAS%' OR e.[Customer Code] LIKE '%AEO%' OR e.[Customer Code] LIKE '%GARAN%' OR e.[Customer Code] LIKE '%HADDAD%' OR e.[Customer Code] LIKE '%HIS%' OR e.[Customer Code] LIKE '%LIFUNG%' OR e.[Customer Code] LIKE '%TARGET%')
			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] D ON  e.[Customer Code] LIKE CONCAT('%',D.[CUSTOMER],'%') 
			and d.[LOAI_HINH] = 'FOB'
			and
			(select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and e.[Customer Code] LIKE CONCAT('%',[CUSTOMER],'%')  and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= [Date Key]) =  format(cast(d.[EFFECTIVE_FROM] as datetime),'yyyyMMdd')

			LEFT JOIN (SELECT DISTINCT [DATE_WID] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] where  [TYPE]<>'TH M.D.K') LO ON 
			left([Date Key],6)+'01' = LO.[DATE_WID] 

			WHERE [Date Key] >= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01') and [Vendor Code] = ''
			and LO.[DATE_WID] is null
			group by e.[Customer Code],c.[CONTRACT_TYPE_NAME],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01'),[Date Key],a.[po number]

			union all
			select 1 [TYPE],a.[po number] [PO_NUMBER],e.[Customer Code] [CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[Date Key] [DATE],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01') [PAYMENT_DATE],sum(a.[FOB Order Amount]) [PAYMENT_AMOUNT]
			from
			[DWH].[VW_MRP_SALES_ORDER_F_BK] A
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[Contract Type Key] = c.[row_wid] and trim(c.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng FOB xuất khẩu ')
			join [DWH].[VW_MRP_CUSTOMER_D] e on a.[Customer Key] = e.[Customer Key] and NOT(e.[Customer Code] LIKE '%ADIDAS%' OR e.[Customer Code] LIKE '%AEO%' OR e.[Customer Code] LIKE '%GARAN%' OR e.[Customer Code] LIKE '%HADDAD%' OR e.[Customer Code] LIKE '%HIS%' OR e.[Customer Code] LIKE '%LIFUNG%' OR e.[Customer Code] LIKE '%TARGET%')
			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] D ON d.[CUSTOMER]  LIKE N'%Khác%' 
			and d.[LOAI_HINH] = 'FOB' 
			and (select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'FOB' and [CUSTOMER]  LIKE N'%Khác%' and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= [Date Key]) =  format(cast(d.[EFFECTIVE_FROM] as datetime),'yyyyMMdd')

			LEFT JOIN (SELECT DISTINCT [DATE_WID] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] where  [TYPE]<>'TH M.D.K') LO ON 
			left([Date Key],6)+'01' = LO.[DATE_WID] 

			WHERE [Date Key] >= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01') and [Vendor Code] = ''
			and LO.[DATE_WID] is null
			group by e.[Customer Code],c.[CONTRACT_TYPE_NAME],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01'),[Date Key],a.[po number]

			union all
			select 1 [TYPE],a.[po number] [PO_NUMBER],e.[Customer Code] [CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[Date Key] [DATE],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01') [PAYMENT_DATE],sum(a.[FOB Order Amount]) [PAYMENT_AMOUNT]
			from
			[DWH].[VW_MRP_SALES_ORDER_F_BK] A
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[Contract Type Key] = c.[row_wid] and trim(c.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng gia công trong nước')
			join [DWH].[VW_MRP_CUSTOMER_D] e on a.[Customer Key] = e.[Customer Key]
			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] D ON  e.[Customer Code] LIKE CONCAT('%',D.[CUSTOMER],'%') 
			and d.[LOAI_HINH] = 'GC MAY'
			and
			(select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'GC MAY' and e.[Customer Code] LIKE CONCAT('%',[CUSTOMER],'%')  and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= [Date Key]) =  format(cast(d.[EFFECTIVE_FROM] as datetime),'yyyyMMdd')

			LEFT JOIN (SELECT DISTINCT [DATE_WID] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] where  [TYPE]<>'TH M.D.K') LO ON 
			left([Date Key],6)+'01' = LO.[DATE_WID] 

			WHERE [Date Key] >= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01') and [Vendor Code] = ''
			and LO.[DATE_WID] is null
			group by e.[Customer Code],c.[CONTRACT_TYPE_NAME],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01'),[Date Key],a.[po number]

			union all
			select 1 [TYPE],a.[po number] [PO_NUMBER],e.[Customer Code] [CUSTOMER_CODE],c.[CONTRACT_TYPE_NAME],[Date Key] [DATE],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01') [PAYMENT_DATE],sum(a.[FOB Order Amount]) [PAYMENT_AMOUNT]
			from
			[DWH].[VW_MRP_SALES_ORDER_F_BK] A
			join [DWH].[W_MRP_MD_CONTRACT_F] c on a.[Contract Type Key] = c.[row_wid] and trim(c.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng gia công xuất khẩu')
			join [DWH].[VW_MRP_CUSTOMER_D] e on a.[Customer Key] = e.[Customer Key]
			JOIN [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] D ON  e.[Customer Code] LIKE CONCAT('%',D.[CUSTOMER],'%') 
			and d.[LOAI_HINH] = 'GC MAY XK'  
			and
			(select MAX(format(cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd')) [EFFECTIVE_FROM] from [STG].[W_EXE_CF_MONTHLY_PAYMENT_TERM_FORECAST_DS] where [LOAI_HINH] = 'GC MAY XK' and e.[Customer Code] LIKE CONCAT('%',[CUSTOMER],'%')  and format(try_cast([EFFECTIVE_FROM] as datetime),'yyyyMMdd') <= [Date Key]) =  format(cast(d.[EFFECTIVE_FROM] as datetime),'yyyyMMdd')

			LEFT JOIN (SELECT DISTINCT [DATE_WID] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] where  [TYPE]<>'TH M.D.K') LO ON 
			left([Date Key],6)+'01' = LO.[DATE_WID] 

			WHERE [Date Key] >= FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01') and [Vendor Code] = ''
			and LO.[DATE_WID] is null
			group by e.[Customer Code],c.[CONTRACT_TYPE_NAME],format(DATEADD(DAY,ISNULL(TRY_cast(d.[PAYMENT_TERM] as float),0),cast(str([Date Key]) as datetime)),'yyyyMM01'),[Date Key],a.[po number]

			-- INVOICE
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID] [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_1ST],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_1ST]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_1ST]/100 <> 0  and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID] [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_2ND],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_2ND]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_2ND]/100 <> 0 and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID] [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_3RD],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_3RD]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_3RD]/100 <> 0 and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID] [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_4TH],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_4TH]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_4TH]/100 <> 0 and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			select 2 [TYPE],a.[INVOICE_NUMBER],[CUSTOMER_CODE],[CONTRACT_TYPE_NAME],[DATE_WID] [DATE],format(DATEADD(DAY,[PAYMENT_SCHEDULE_5TH],isnull([ETD],cast(str([DATE_WID]) as datetime))),'yyyyMMdd') [PAYMENT_DATE],DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_5TH]/100 [PAYMENT_AMOUNT] from [DWH].[W_MRP_TRX_SALES_INVOICE_F_BK] a 
			join [DWH].[W_MRP_MD_PAYMENT_TERM_D] b on a.PAYMENT_TERM_WID = B.ROW_WID 
			join (select distinct [PO_ID],[CONTRACT_TYPE_NAME] from [DWH].[W_MRP_MD_CONTRACT_F]) c on a.[PO_ID] = c.[PO_ID]
			WHERE DOCUMENT_AMOUNT*B.[PERCENTAGE_OF_PS_5TH]/100 <> 0 and a.[W_DELETE_FLG] = '0' and [DATE_WID] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
		) insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02]
			select
			[TYPE],
			[PO_NUMBER],
			[CUSTOMER_CODE],
			[CONTRACT_TYPE_NAME],
			[DATE],
			[PAYMENT_DATE],
			[PAYMENT_AMOUNT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from cte where left([DATE],6) >= left(format(dateadd(month,-6,dateadd(hour,7,getdate())),'yyyyMMdd'),6) and left([DATE],6) <= left(format(dateadd(month,12,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	
			print 'B1.1.1	Haddad'
			-- B1.1.1	Haddad
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.1'
				and a.[CUSTOMER_CODE] like '%Haddad%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.1'
				and a.[CUSTOMER_CODE] like '%Haddad%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'

			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


            -- B1.1.2	His
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.2'
				and a.[CUSTOMER_CODE] like '%His%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.2'
				and a.[CUSTOMER_CODE] like '%His%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			print 'B1.1.3	Garan'
            -- B1.1.3	Garan
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.3'
				and a.[CUSTOMER_CODE] like '%Garan%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.3'
				and a.[CUSTOMER_CODE] like '%Garan%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.4	Target'
            -- B1.1.4	Target
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.4'
				and a.[CUSTOMER_CODE] like '%Target%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.4'
				and a.[CUSTOMER_CODE] like '%Target%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.5	Aeo'
            -- B1.1.5	Aeo
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.5'
				and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.5'
				and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			print 'B1.1.6	Adidas'
            -- B1.1.6	Adidas
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.6'
				and a.[CUSTOMER_CODE] like '%Adidas%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.6'
				and a.[CUSTOMER_CODE] like '%Adidas%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.7	Lifung'
            -- B1.1.7	Lifung
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.7'
				and a.[CUSTOMER_CODE] like '%Lifung%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.7'
				and a.[CUSTOMER_CODE] like '%Lifung%' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.1.8	Khác (Asia, NW360, GU, Walmart….)'
            -- B1.1.8	Khác (Asia, NW360, GU, Walmart….)
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.8'
				and NOT(a.[CUSTOMER_CODE] LIKE '%ADIDAS%' OR a.[CUSTOMER_CODE] LIKE '%AEO%' OR a.[CUSTOMER_CODE] LIKE '%GARAN%' OR a.[CUSTOMER_CODE] LIKE '%HADDAD%' OR a.[CUSTOMER_CODE] LIKE '%HIS%' OR a.[CUSTOMER_CODE] LIKE '%LIFUNG%' OR a.[CUSTOMER_CODE] LIKE '%TARGET%') 
                and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.1.8'
				and NOT(a.[CUSTOMER_CODE] LIKE '%ADIDAS%' OR a.[CUSTOMER_CODE] LIKE '%AEO%' OR a.[CUSTOMER_CODE] LIKE '%GARAN%' OR a.[CUSTOMER_CODE] LIKE '%HADDAD%' OR a.[CUSTOMER_CODE] LIKE '%HIS%' OR a.[CUSTOMER_CODE] LIKE '%LIFUNG%' OR a.[CUSTOMER_CODE] LIKE '%TARGET%') and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			print 'B1.2.1	Gia công May '
			-- B1.2.1	Gia công May 
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.2.1'
                and trim(a.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng gia công trong nước')
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.2.1'
				and trim(a.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng gia công trong nước')
			
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			print 'B1.2.2	Gia công may xuất khẩu'
            -- B1.2.2	Gia công may xuất khẩu
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'I' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.2.2'
                and trim(a.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng gia công xuất khẩu')
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 2
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			left([PAYMENT_DATE],6)+'01' [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			SUM([PAYMENT_AMOUNT]*[EXCHANGE_RATE]) [AMT],
			'0' W_DELETE_FLG,
			'O' W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  JOIN [DWH].[W_LAC_CF_D] B 
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] C ON 1=1
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.2.2'
				and trim(a.[CONTRACT_TYPE_NAME]) = trim(N'Hợp đồng gia công xuất khẩu')
			
			where left([PAYMENT_DATE],6) >= left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01'),6) and a.[TYPE] = 1
			GROUP BY left([PAYMENT_DATE],6)+'01',row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			print 'input from excel'
			--input from excel
				insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				SELECT a.[DATE_WID]
			  ,a.[RL_WID]
			  ,a.[STT]
			  ,a.[REPORT_VIEW]
			  ,a.[LV1_CODE]
			  ,a.[LV2_CODE]
			  ,a.[LV3_CODE]
			  ,a.[LV4_CODE]
			  ,a.[LV5_CODE]
			  ,a.[LV0_CODE]
			  ,a.[AMT] [AMT]
			  ,a.[W_DELETE_FLG]
			  ,a.[W_INTEGRATION_ID]
			  ,a.[W_VERSION_PERIOD]
			  ,a.[W_INSERT_DT]
			  ,a.[W_UPDATE_DT]
			  ,a.[W_DATASOURCE_NUM_ID]
			  ,a.[W_BATCH_ID]
		  FROM [DWH].[W_EXE_CF_MONTHLY_FORECAST_F] a
		  WHERE [W_VERSION_PERIOD] = FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') and [AMT] is not null;



		  print 'B1.3	THU TỪ THƯƠNG HIỆU MDK'
			-- B1.3	THU TỪ THƯƠNG HIỆU MDK


			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			[DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[Amount] [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from (  SELECT A.[DATE_WID],
       ( select  sum([Net Amount])*0.25  [Amount] from  [DWH].[VW_HAR_SALES_Fact]  where left([Date Key],6) = left(format(dateadd(month,-1,dateadd(hour,7,getdate())),'yyyyMMdd'),6) AND [Cancelled Status]<>'cancelled' ) + sum([AMOUNT]*isnull(C.[AMT],0))*0.75 [AMOUNT]
  FROM [DWH].[W_MDK_SALE_TARGET_F] A
  left JOIN [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] C ON
	C.[TYPE] = 'TH M.D.K'
	AND left(A.[DATE_WID],6) = left(C.[DATE_WID],6)
  where left(A.[DATE_WID],6) = left(format(dateadd(hour,7,getdate()),'yyyyMMdd'),6) GROUP BY A.[DATE_WID]) a  JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.3'
	



		SET @N = 2
		SET @NS = (select count(*) from (select [DATE_WID],row_number() over(order by [DATE_WID]) RN from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from [DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),11)),'yyyyMMdd')) A) a)
 
		WHILE @N <= @NS
			BEGIN
				
				insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				select
				A.[DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				[Amount1]*C.[AMT]*0.25+[Amount2]*isnull(C.[AMT],0)*0.75 [AMT],
				'0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from (  
					 
						SELECT left([DATE_WID],6) + '01' [DATE_WID],
							   (SELECT 
							   sum(isnull([AMOUNT],0)) 
								 FROM [DWH].[W_MDK_SALE_TARGET_F] where left([DATE_WID],6) > left(format(dateadd(month,-1,dateadd(hour,7,getdate())),'yyyyMMdd'),6) 
								 and left([DATE_WID],6)+ '01' = 
								 (select [DATE_WID] from (select [DATE_WID],row_number() over(order by [DATE_WID]) RN from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from[DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),11)),'yyyyMMdd')) A) a where RN=(@N-1))) [AMOUNT1],
							   sum([AMOUNT]) [AMOUNT2]
								 FROM [DWH].[W_MDK_SALE_TARGET_F] where left([DATE_WID],6) > left(format(dateadd(month,-1,dateadd(hour,7,getdate())),'yyyyMMdd'),6) 
								 and left([DATE_WID],6) + '01'= 
								 (select [DATE_WID] from (select [DATE_WID],row_number() over(order by [DATE_WID]) RN from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from[DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),11)),'yyyyMMdd')) A) a where RN=@N)
								 GROUP BY left([DATE_WID],6) + '01'
						
						) a  JOIN [DWH].[W_LAC_CF_D] B 					
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.3'
				left JOIN [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] C ON
							C.[TYPE] = 'TH M.D.K'
							AND left(A.[DATE_WID],6) = left(C.[DATE_WID],6)

				
		
				SET @N =@N + 1
			END
;	
		--B1.4.1	Thu hoàn thuế nhập khẩu/ GTGT
		IF OBJECT_ID('tempdb..#cf_monthly_forecast_b141_tmp') IS NOT NULL        
		begin
            drop table #cf_monthly_forecast_b141_tmp
        end
		
		  select * into #cf_monthly_forecast_b141_tmp
		  from(
		  SELECT
			 LEFT([DATE],6)+'01' [DATE_WID],
			 SUM([AMT])[AMT]
			FROM
			(
			SELECT [DATE],[PAYMENT_AMOUNT] [AMT] FROM [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] WHERE [TYPE]=1
			UNION ALL
			SELECT [DATE],[PAYMENT_AMOUNT] [AMT] FROM [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] WHERE [TYPE]=2 AND [DATE] < FORMAT(DATEADD(HOUR,7,GETDATE()),'yyyyMM01')
			UNION ALL
			SELECT [DATE_WID],[AMT] FROM [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] WHERE [TYPE] <> 'TH M.D.K'
			) A GROUP BY LEFT([DATE],6)+'01' ) a
 

		IF OBJECT_ID('tempdb..#calendar_tmp') IS NOT NULL        
			begin
				drop table #calendar_tmp
			end
			  select [DATE_WID],row_number() over(order by [DATE_WID]) RN into  #calendar_tmp from (select distinct left([DATE_WID],6) + '01' [DATE_WID] from [DWH].[W_CALENDAR_D] where left([DATE_WID],6) + '01' >= FORMAT(dateadd(month,-6,dateadd(hour,7,getdate())),'yyyyMM01') and left([DATE_WID],6) + '01' <= FORMAT(dateadd(month,11,dateadd(hour,7,getdate())),'yyyyMMdd')) A

		SET @N = (select rn from #calendar_tmp where date_wid = FORMAT(dateadd(hour,7,getdate()),'yyyyMM01'))
		SET @NS = (select count(*) from #calendar_tmp)

		WHILE @N <= @NS
			BEGIN
				
				insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				select
				A.[DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				[AMT]*[EXCHANGE_RATE] [AMT],
				'0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from (  select 
						(select [DATE_WID] from #calendar_tmp where rn = @N) [DATE_WID],
						((select AMT from #cf_monthly_forecast_b141_tmp where [DATE_WID] = (select [DATE_WID] from #calendar_tmp where rn = (@N-1)))
						+ (select AMT from #cf_monthly_forecast_b141_tmp where [DATE_WID] = (select [DATE_WID] from #calendar_tmp where rn = (@N-2))))*0.022 [AMT]

						
						
						) a  JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B1.4.1'
				left join (select distinct [DATE_WID] from [DWH].[W_EXE_CF_MONTHLY_FORECAST_F] where lv0_code = 'B1.4.1') c
				ON C.[DATE_WID] = A.[DATE_WID]
				JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] D ON 1=1
				WHERE C.[DATE_WID] IS NULL

				
		
				SET @N =@N + 1
			END;

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%haddad%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'NGUYÊN LIỆU'
		,@code = 'B2.2.1.1'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%haddad%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'PHỤ LIỆU'
		,@code = 'B2.2.1.2'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%His%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'NGUYÊN LIỆU'
		,@code = 'B2.2.2.1'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%His%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'PHỤ LIỆU'
		,@code = 'B2.2.2.2'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Garan%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'NGUYÊN LIỆU'
		,@code = 'B2.2.3.1'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Garan%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'PHỤ LIỆU'
		,@code = 'B2.2.3.2'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Target%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'NGUYÊN LIỆU'
		,@code = 'B2.2.4.1'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Target%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'PHỤ LIỆU'
		,@code = 'B2.2.4.2'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Aeo%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'NGUYÊN LIỆU'
		,@code = 'B2.2.5.1'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Aeo%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'PHỤ LIỆU'
		,@code = 'B2.2.5.2'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Adidas%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'NGUYÊN LIỆU'
		,@code = 'B2.2.6.1'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Adidas%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'PHỤ LIỆU'
		,@code = 'B2.2.6.2'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Lifung%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'NGUYÊN LIỆU'
		,@code = 'B2.2.7.1'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = '%Lifung%'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'PHỤ LIỆU'
		,@code = 'B2.2.7.2'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = 'khac'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'NGUYÊN LIỆU'
		,@code = 'B2.2.8.1'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id

		exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
		@customer_code = 'khac'
		,@contract_name = N'Hợp đồng FOB xuất khẩu'
		,@adjust_type = 'FOB'
		,@material_type = N'PHỤ LIỆU'
		,@code = 'B2.2.8.2'
		,@v_datasource_num_id =@v_datasource_num_id
		,@v_batch_id = @v_batch_id
		
		


	-- B2.3.1	- Nguyên liệu chính
			exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
			@customer_code = 'mdk'
			,@contract_name = N'Hợp đồng FOB xuất khẩu'
			,@adjust_type = 'FOB'
			,@material_type = N'NGUYÊN LIỆU'
			,@code = 'B2.3.1'
			,@v_datasource_num_id =@v_datasource_num_id
			,@v_batch_id = @v_batch_id




	-- B2.3.2	- Phụ liệu
			exec [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] 
			@customer_code = 'mdk'
			,@contract_name = N'Hợp đồng FOB xuất khẩu'
			,@adjust_type = 'FOB'
			,@material_type = N'PHỤ LIỆU'
			,@code = 'B2.3.2'
			,@v_datasource_num_id =@v_datasource_num_id
			,@v_batch_id = @v_batch_id


	-- B2.5.1	Haddad B2.5.1.1	- Chi phí may
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.1'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.1'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.1	Haddad B2.5.1.2	- Chi phí Wash
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.2'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.2'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	   -- B2.5.1	Haddad B2.5.1.3	- Chi phí In
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.3'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.3'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.1	Haddad B2.5.1.4	- Chi phí Thêu
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.4'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.4'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- B2.5.1	Haddad B2.5.1.5	- Chi phí khác
		 -- HADDAD-NIKE
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.5'
				and a.[CUSTOMER_CODE] like 'HADDAD-NIKE' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		-- HADDAD-LEVIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.1.5'
				and a.[CUSTOMER_CODE] like 'HADDAD-LEVIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.5.2	His B2.5.2.1	- Chi phí may
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.1'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.2	His B2.5.2.2	- Chi phí Wash
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.2'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.2	His B2.5.2.3	- Chi phí In
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.3'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.2	His B2.5.2.4	- Chi phí Thêu
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.4'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.2	His B2.5.2.5	- Chi phí khác
		 -- HIS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.2.5'
				and a.[CUSTOMER_CODE] like 'HIS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

				  
	-- B2.5.3	Garan B2.5.3.1	- Chi phí may
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.1'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.3	Garan B2.5.3.2	- Chi phí Wash
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.2'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.3	Garan B2.5.3.3	- Chi phí In
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.3'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.3	Garan B2.5.3.4	- Chi phí Thêu
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.4'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.3	Garan B2.5.3.5	- Chi phí khác
		 -- GARAN
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.3.5'
				and a.[CUSTOMER_CODE] like 'GARAN' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.4	Target B2.5.4.1	- Chi phí may
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.1'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.4	Target B2.5.4.2	- Chi phí Wash
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.2'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.4	Target B2.5.4.3	- Chi phí In
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.3'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.4	Target B2.5.4.4	- Chi phí Thêu
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.4'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.4	Target B2.5.4.5	- Chi phí khác
		 -- TARGET
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.4.5'
				and a.[CUSTOMER_CODE] like 'TARGET' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.5.5	Aeo B2.5.5.1	- Chi phí may
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.1'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.5	Aeo B2.5.5.2	- Chi phí Wash
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.2'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.5	Aeo B2.5.5.3	- Chi phí In
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.3'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.5	Aeo B2.5.5.4	- Chi phí Thêu
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.4'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.5	Aeo B2.5.5.5	- Chi phí khác
		 -- AEO
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.5.5'
				and a.[CUSTOMER_CODE] like 'AEO' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.5.6	Adidas B2.5.6.1	- Chi phí may
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.1'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.6	Adidas B2.5.6.2	- Chi phí Wash
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.2'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.6	Adidas B2.5.6.3	- Chi phí In
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.3'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.6	Adidas B2.5.6.4	- Chi phí Thêu
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.4'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.6	Adidas B2.5.6.5	- Chi phí khác
		 -- ADIDAS
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.6.5'
				and a.[CUSTOMER_CODE] like 'ADIDAS' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.5.7	Lifung B2.5.7.1	- Chi phí may
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.1'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.7	Lifung B2.5.7.2	- Chi phí Wash
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.2'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.7	Lifung B2.5.7.3	- Chi phí In
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.3'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.7	Lifung B2.5.7.4	- Chi phí Thêu
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.4'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.7	Lifung B2.5.7.5	- Chi phí khác
		 -- LIFUNG01
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.7.5'
				and a.[CUSTOMER_CODE] like 'LIFUNG01' and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


	-- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.1	- Chi phí may
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.1'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.2	- Chi phí Wash
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.2'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.3	- Chi phí In
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.3'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.4	- Chi phí Thêu
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.4'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.5.8	Khác (Asia, NW360, GU, Walmart….) B2.5.8.5	- Chi phí khác
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.5.8.5'
				and not( a.[CUSTOMER_CODE]  like '%Lifung%' and a.[CUSTOMER_CODE]  like '%Adidas%' and a.[CUSTOMER_CODE] like '%Aeo%' and a.[CUSTOMER_CODE] like '%Target%' and a.[CUSTOMER_CODE] like '%Garan%' and a.[CUSTOMER_CODE] like '%His%' and a.[CUSTOMER_CODE] like '%Haddad%') 
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	-- B2.6		CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.1	- Chi phí may
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC MAY NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.1'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC MAY NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.6	CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.2	- Chi phí Wash
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC WASH NGOÀI ], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.2'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC WASH NGOÀI ] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

	   -- B2.6	CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.3	- Chi phí In
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC IN], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.3'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC IN] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)

		
		-- B2.6	CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.4	- Chi phí Thêu
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC THÊU NGOÀI], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.4'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC THÊU NGOÀI] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)


		-- B2.6	CHI GIA CÔNG NGOÀI THƯƠNG HIỆU MDK  B2.6.5	- Chi phí khác
			insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			select
			format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			[PAYMENT_AMOUNT]*23000*1.1*isnull(c.[GC KHÁC], 0) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP01] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = 'B2.6.5'
				and a.[CONTRACT_TYPE_NAME] = N'Hợp đồng FOB xuất khẩu'
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_GIACONGNGOAI_FORECAST_DS] d on a.[CUSTOMER_CODE] = trim(d.[KHÁCH HÀNG])
			where left(format(dateadd(day,cast(d.[GC KHÁC] as float), cast(str([DATE_WID]) as datetime)),'yyyyMMdd'),6) >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6);


--B2.8	CHI TRẢ LÃI VAY
	--B2.8.1	Trả lãi vay ngắn hạn
		
		WITH CTE01 AS
		(
		--B2.8.1.1 Saigonbank
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.1' 
				and F1.[LV0_CODE] = 'O1' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'Saigonbank'
				and D.[CURRENCY] = 'VND'
		union
		--B2.8.1.2 Eximbank
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.2' 
				and F1.[LV0_CODE] = 'O2' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'Eximbank'
				and D.[CURRENCY] = 'VND'
		union
		--B2.8.1.3 Vietinbank
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.3' 
				and F1.[LV0_CODE] = 'O2' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'Vietinbank'
				and D.[CURRENCY] = 'VND'

		union
		--B2.8.1.4 MSB
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.4' 
				and F1.[LV0_CODE] = 'O4' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'MSB'
				and D.[CURRENCY] = 'VND'

		union
		--B2.8.1.5 Techcombank
		SELECT distinct
			F1.[DATE_WID],
			F.[ROW_WID] [RL_WID],
			F.[STT],
			F.[REPORT_VIEW],
			F.[LV1_CODE],
			F.[LV2_CODE],
			F.[LV3_CODE],
			F.[LV4_CODE],
			F.[LV5_CODE],
			COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
			F1.[AMT]*30*D.[VALUE]*365  as [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			FROM [DWH].[W_LAC_CF_D] F, [DWH].[W_LAC_CF_MONTHLY_FORECAST_F] F1, [STG].[W_EXE_CF_MONTHLY_LENDING_RATE_FORECAST_DS] D
			where COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE]) = 'B2.8.1.5' 
				and F1.[LV0_CODE] = 'O5' 
				and D.[RATE] = N'Lãi vay trung hạn dài hạn'
				and D.[BANK_CODE] = 'Techcombank'
				and D.[CURRENCY] = 'VND'
		)
		insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
		SELECT * FROM CTE01;

		




--formula
		
		--SET @N = 1
		--TRUNCATE TABLE DWH.W_LAC_CF_MONTHLY_FORECAST_D_TMP
		--TRUNCATE TABLE [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TMP2]
		--
		--INSERT INTO DWH.W_LAC_CF_MONTHLY_FORECAST_D_TMP
		--SELECT ROW_WID,ROW_NUMBER() OVER (ORDER BY ROW_WID) RN FROM [DWH].[W_LAC_CF_D] WHERE [MANUAL] IS NULL AND FORMULA IS NULL  
		

		--WHILE @N <= (SELECT COUNT(*) FROM DWH.W_LAC_CF_D_TEMP)
		--BEGIN
		--	SET @RW = (SELECT ROW_WID FROM DWH.W_LAC_CF_D_TEMP WHERE RN = @N)
		--	SELECT 
		--	 @AccountID			  = AccountID		
		--	,@OffsetacctID		  = OffsetacctID	
		--	,@ObjectID			  = ObjectID		
		--	,@Memo				  = Memo
		--	,@Type				  = [Type]
		--	FROM [DWH].[W_LAC_CF_D] WHERE ROW_WID = @RW
		--	PRINT @AccountID		
		--	PRINT @OffsetacctID	
		--	PRINT @ObjectID		
		--	PRINT @Memo			
		--	PRINT @Type			
		--
		--	IF @Type IN ('C','D')
		--	BEGIN
		--
		--		SET @SCRIPT = N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*(CASE WHEN ''' + @Type + ''' = ''C'' THEN -1 ELSE 1 END)) AMT FROM [DWH].[W_LAC_GL_DATA_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=(CASE WHEN '''+@Type+''' =''C'' THEN 1 ELSE 0 END) AND  DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
		--		PRINT @SCRIPT
		--	END
		--
		--	IF @Type IN ('O')
		--	BEGIN
		--		SET @SCRIPT =N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT A.DATE_WID,'+CAST(@RW AS VARCHAR(100))+',SUM(B.AMT) FROM [DWH].[W_CALENDAR_D] A JOIN (SELECT  DATE_WID,(CASE WHEN ''' + @Type + ''' = ''O'' THEN [OPENING2] ELSE [CLOSING2] END) AMT FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+')) B ON B.DATE_WID =(SELECT MAX(DATE_WID) FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND DATE_WID <=  A.DATE_WID) WHERE RIGHT(A.DATE_WID,2) = ''01''  AND A.DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY A.DATE_WID'
		--
		--		PRINT @SCRIPT
		--	END 
		--
		--	IF @Type IN ('B')
		--	BEGIN
		--		SET @SCRIPT =N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT A.DATE_WID,'+CAST(@RW AS VARCHAR(100))+',SUM(B.AMT) FROM [DWH].[W_CALENDAR_D] A JOIN (SELECT  DATE_WID,(CASE WHEN ''' + @Type + ''' = ''O'' THEN [OPENING2] ELSE [CLOSING2] END) AMT FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+')) B ON B.DATE_WID =(SELECT MAX(DATE_WID) FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+') AND DATE_WID <= FORMAT(EOMONTH(CONVERT(DATE,cast(A.DATE_WID as varchar(8)))),''yyyyMMdd'') ) WHERE RIGHT(A.DATE_WID,2) = ''01''  AND A.DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY A.DATE_WID'
		--
		--		PRINT @SCRIPT
		--	END 
		--	EXEC sp_executesql @SCRIPT
		--	SET @N = @N + 1
		--
		--
		--END;
		--
		--
        --WITH CTE AS
        --(
        --SELECT
		--F.[DATE_WID],
		--F.[RL_WID],
		--B.[STT],
		--B.[REPORT_VIEW],
		--B.[LV1_CODE],
		--B.[LV2_CODE],
		--B.[LV3_CODE],
		--B.[LV4_CODE],
		--B.[LV5_CODE],
		--F.[AMT],
        --'0' W_DELETE_FLG,
        --NULL W_INTEGRATION_ID,
        --DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
        --DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
        --@v_datasource_num_id W_DATASOURCE_NUM_ID,
        --@v_batch_id W_BATCH_ID,
        --1 ROW_NUM
		--
        --FROM DWH.W_LAC_CF_F_TEMP F JOIN [DWH].[W_LAC_CF_D] B ON F.[RL_WID] = B.ROW_WID
		--
        --)
		--insert into #W_LAC_CF_F_TMP 
		--select
		--	[DATE_WID],
		--	[RL_WID],
		--	[STT],
		--	[REPORT_VIEW],
		--	[LV1_CODE],
		--	[LV2_CODE],
		--	[LV3_CODE],
		--	[LV4_CODE],
		--	[LV5_CODE],
		--	[AMT],
		--	[W_DELETE_FLG],
		--	[W_INTEGRATION_ID],
		--	[W_INSERT_DT],
		--	[W_UPDATE_DT],
		--	[W_DATASOURCE_NUM_ID],
		--	[W_BATCH_ID]
		--from CTE
		--where ROW_NUM=1
		--UNION ALL
		--SELECT * FROM [DWH].[W_CF_MONTHLY_ACTUAL_F] WHERE DATE_WID LIKE @DATE_WID
		--;

		--TRUNCATE TABLE [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TMP2]

		WITH CTE01 AS
		(
		SELECT
		F1.[DATE_WID],
		F.[ROW_WID] [RL_WID],
		F.[STT],
		F.[REPORT_VIEW],
		F.[LV1_CODE],
		F.[LV2_CODE],
		F.[LV3_CODE],
		F.[LV4_CODE],
		F.[LV5_CODE],
		COALESCE(F.[LV5_CODE],F.[LV4_CODE],F.[LV3_CODE],F.[LV2_CODE],F.[LV1_CODE])  [LV0_CODE],
		F1.[AMT]*F.[FORMULA_SIGN] [AMT],
		F1.[W_DELETE_FLG],
		F1.[W_INTEGRATION_ID],
		FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
		F1.[W_INSERT_DT],
		F1.[W_UPDATE_DT],
		F1.[W_DATASOURCE_NUM_ID],
		F1.[W_BATCH_ID]
		FROM [DWH].[W_LAC_CF_D_FORMULA] F JOIN   [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]   F1 ON CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV1_CODE)
											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV2_CODE)
											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV3_CODE)
											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV4_CODE)
											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV5_CODE) END = F.CODE
		)
		insert into [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
		SELECT * FROM CTE01


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_MONTHLY_FORECAST_NPL_F] @customer_code [nvarchar](200),@contract_name [nvarchar](300),@adjust_type [nvarchar](300),@material_type [nvarchar](200),@code [nvarchar](100),@v_datasource_num_id [int],@v_batch_id [bigint] AS

	if @customer_code = 'khac'
		begin
		--LC
			with cte as
			(
			select
			format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			sum([PAYMENT_AMOUNT]*[EXCHANGE_RATE]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)) [AMT],
			'0' W_DELETE_FLG,
			case when a.[type] = 1 then 'O' else 'I' end W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code
				and  NOT(a.[CUSTOMER_CODE] LIKE '%ADIDAS%' OR a.[CUSTOMER_CODE] LIKE '%AEO%' OR a.[CUSTOMER_CODE] LIKE '%GARAN%' OR a.[CUSTOMER_CODE] LIKE '%HADDAD%' OR a.[CUSTOMER_CODE] LIKE '%HIS%' OR a.[CUSTOMER_CODE] LIKE '%LIFUNG%' OR a.[CUSTOMER_CODE] LIKE '%TARGET%') and a.[CONTRACT_TYPE_NAME] =@contract_name
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] =trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = @material_type and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = @material_type and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] e ON 1=1
			where format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01') >=
				  format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01')
			GROUP BY format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE]),(case when a.[type] = 1 then 'O' else 'I' end)
			 



			  union all


			select
			format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			sum([AMT]*[EXCHANGE_RATE]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)/[N1]/[N2]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code
				and NOT(a.[CUSTOMER_CODE] LIKE '%ADIDAS%' OR a.[CUSTOMER_CODE] LIKE '%AEO%' OR a.[CUSTOMER_CODE] LIKE '%GARAN%' OR a.[CUSTOMER_CODE] LIKE '%HADDAD%' OR a.[CUSTOMER_CODE] LIKE '%HIS%' OR a.[CUSTOMER_CODE] LIKE '%LIFUNG%' OR a.[CUSTOMER_CODE] LIKE '%TARGET%') and a.[type] = @adjust_type
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join 
			(
			SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([VALUE] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			UNION
			SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
			CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			) d1 on a.[CUSTOMER_CODE] = d1.[CUSTOMER]
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
			
			join 
			(
			SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([VALUE] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) 
			END [VALUE]
			,
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N2]
			FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời hạn thanh toán (ngày)' and trim([PAYMENT_TYPE]) = 'LC'
			UNION
			SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) [VALUE] 
			,
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N2]
			FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời hạn thanh toán (ngày)' and trim([PAYMENT_TYPE]) = 'LC'
			) d3 on a.[CUSTOMER_CODE] = d3.[CUSTOMER]
			
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] e ON 1=1
			where format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01') >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			)insert into  [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			SELECT a.[DATE_WID]
			  ,a.[RL_WID]
			  ,a.[STT]
			  ,a.[REPORT_VIEW]
			  ,a.[LV1_CODE]
			  ,a.[LV2_CODE]
			  ,a.[LV3_CODE]
			  ,a.[LV4_CODE]
			  ,a.[LV5_CODE]
			  ,a.[LV0_CODE]
			  ,a.[AMT] [AMT]
			  ,a.[W_DELETE_FLG]
			  ,a.[W_INTEGRATION_ID]
			  ,a.[W_VERSION_PERIOD]
			  ,a.[W_INSERT_DT]
			  ,a.[W_UPDATE_DT]
			  ,a.[W_DATASOURCE_NUM_ID]
			  ,a.[W_BATCH_ID]
		  FROM cte a;


		  --TT
			with cte as
			(
			select
			format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			sum([PAYMENT_AMOUNT]*[EXCHANGE_RATE]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)) [AMT],
			'0' W_DELETE_FLG,
			case when a.[type] = 1 then 'O' else 'I' end W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code
				and NOT(a.[CUSTOMER_CODE] LIKE '%ADIDAS%' OR a.[CUSTOMER_CODE] LIKE '%AEO%' OR a.[CUSTOMER_CODE] LIKE '%GARAN%' OR a.[CUSTOMER_CODE] LIKE '%HADDAD%' OR a.[CUSTOMER_CODE] LIKE '%HIS%' OR a.[CUSTOMER_CODE] LIKE '%LIFUNG%' OR a.[CUSTOMER_CODE] LIKE '%TARGET%') and a.[CONTRACT_TYPE_NAME] =@contract_name
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] =trim(c.[KHÁCH HÀNG])
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = @material_type and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = @material_type and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] e ON 1=1
			where format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01') >=
				  format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01')
			GROUP BY format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE]),a.[type]
			 



			  union all


			select
			format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01') [DATE_WID],
			b.row_wid [RL_WID],
			b.[STT],
			b.[REPORT_VIEW],
			b.[LV1_CODE],
			b.[LV2_CODE],
			b.[LV3_CODE],
			b.[LV4_CODE],
			b.[LV5_CODE],
			COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
			sum([AMT]*[EXCHANGE_RATE]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)/[N1]/[N2]) [AMT],
			'0' W_DELETE_FLG,
			NULL W_INTEGRATION_ID,
			FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
			DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
			DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
			@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
			from [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] a  
			JOIN [DWH].[W_LAC_CF_D] B 
			ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code
				and NOT(a.[CUSTOMER_CODE] LIKE '%ADIDAS%' OR a.[CUSTOMER_CODE] LIKE '%AEO%' OR a.[CUSTOMER_CODE] LIKE '%GARAN%' OR a.[CUSTOMER_CODE] LIKE '%HADDAD%' OR a.[CUSTOMER_CODE] LIKE '%HIS%' OR a.[CUSTOMER_CODE] LIKE '%LIFUNG%' OR a.[CUSTOMER_CODE] LIKE '%TARGET%') and a.[type] = @adjust_type
			join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
			join 
			(
			SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([VALUE] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) 
			END [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1]
			FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			UNION
			SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
			CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) [VALUE],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N1] 
			FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
			) d1 on a.[CUSTOMER_CODE] = d1.[CUSTOMER]
			join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
			
			join 
			(
			SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN CAST(ISNULL(TRY_cast([VALUE] as float),0)/30 AS INT) 
			ELSE CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) 
			END [VALUE]
			,
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N2]
			FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời hạn thanh toán (ngày)' and trim([PAYMENT_TYPE]) = 'TT'
			UNION
			SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) [VALUE] 
			,
			CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
			THEN 2 
			ELSE 1 
			END [N2]
			FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời hạn thanh toán (ngày)' and trim([PAYMENT_TYPE]) = 'TT'
			) d3 on a.[CUSTOMER_CODE] = d3.[CUSTOMER]
			
			JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] e ON 1=1
			where format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01') >=
				  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
			GROUP BY format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

			)insert into  [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
			SELECT a.[DATE_WID]
			  ,a.[RL_WID]
			  ,a.[STT]
			  ,a.[REPORT_VIEW]
			  ,a.[LV1_CODE]
			  ,a.[LV2_CODE]
			  ,a.[LV3_CODE]
			  ,a.[LV4_CODE]
			  ,a.[LV5_CODE]
			  ,a.[LV0_CODE]
			  ,a.[AMT] [AMT]
			  ,a.[W_DELETE_FLG]
			  ,a.[W_INTEGRATION_ID]
			  ,a.[W_VERSION_PERIOD]
			  ,a.[W_INSERT_DT]
			  ,a.[W_UPDATE_DT]
			  ,a.[W_DATASOURCE_NUM_ID]
			  ,a.[W_BATCH_ID]
		  FROM cte a;
		end
	else 
		begin 
		if @customer_code = 'mdk'
			begin
			--LC
				with cte as
				(
				select
				format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMM01') [DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				sum([AMT]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)) [AMT],
				'0' W_DELETE_FLG,
				null W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				3 W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from [DWH].[W_EXE_CF_MONTHLY_SX_MDK_FORECAST_F] a  
				JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code					
				join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on TRIM(c.[KHÁCH HÀNG]) =  'MDK'
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on trim(d1.[CUSTOMER]) =  'MDK' and trim(d1.[MATERIAL_TYPE]) = @material_type and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on trim(d2.[CUSTOMER]) =  'MDK' and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on trim(d3.[CUSTOMER]) =  'MDK' and trim(d3.[MATERIAL_TYPE]) = @material_type and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
				where 
				format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMM01') >=
					  format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01')
				and A.[BST] = N'Giá trị SX (theo giá vốn)' 
				and A.[W_VERSION_PERIOD] = format(dateadd(hour,7,getdate()),'yyyyMM01')
				GROUP BY format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])
			 
				)insert into  [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				SELECT a.[DATE_WID]
				  ,a.[RL_WID]
				  ,a.[STT]
				  ,a.[REPORT_VIEW]
				  ,a.[LV1_CODE]
				  ,a.[LV2_CODE]
				  ,a.[LV3_CODE]
				  ,a.[LV4_CODE]
				  ,a.[LV5_CODE]
				  ,a.[LV0_CODE]
				  ,a.[AMT] [AMT]
				  ,a.[W_DELETE_FLG]
				  ,a.[W_INTEGRATION_ID]
				  ,a.[W_VERSION_PERIOD]
				  ,a.[W_INSERT_DT]
				  ,a.[W_UPDATE_DT]
				  ,a.[W_DATASOURCE_NUM_ID]
				  ,a.[W_BATCH_ID]
			  FROM cte a;


			  --TT
				with cte as
				(
				select
				format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMM01') [DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				sum([AMT]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)) [AMT],
				'0' W_DELETE_FLG,
				null W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				3 W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from [DWH].[W_EXE_CF_MONTHLY_SX_MDK_FORECAST_F] a  
				JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code					
				join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on TRIM(c.[KHÁCH HÀNG]) =  'MDK'
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on trim(d1.[CUSTOMER]) =  'MDK' and trim(d1.[MATERIAL_TYPE]) = @material_type and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on trim(d2.[CUSTOMER]) =  'MDK' and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on trim(d3.[CUSTOMER]) =  'MDK' and trim(d3.[MATERIAL_TYPE]) = @material_type and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
				where 
				format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMM01') >=
					  format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01')
				and A.[BST] = N'Giá trị SX (theo giá vốn)' 
				and A.[W_VERSION_PERIOD] = format(dateadd(hour,7,getdate()),'yyyyMM01')
				GROUP BY format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE_WID]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

				)insert into  [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				SELECT a.[DATE_WID]
				  ,a.[RL_WID]
				  ,a.[STT]
				  ,a.[REPORT_VIEW]
				  ,a.[LV1_CODE]
				  ,a.[LV2_CODE]
				  ,a.[LV3_CODE]
				  ,a.[LV4_CODE]
				  ,a.[LV5_CODE]
				  ,a.[LV0_CODE]
				  ,a.[AMT] [AMT]
				  ,a.[W_DELETE_FLG]
				  ,a.[W_INTEGRATION_ID]
				  ,a.[W_VERSION_PERIOD]
				  ,a.[W_INSERT_DT]
				  ,a.[W_UPDATE_DT]
				  ,a.[W_DATASOURCE_NUM_ID]
				  ,a.[W_BATCH_ID]
			  FROM cte a;
			end

		else
			begin
			  --LC
				with cte as
				(
				select
				format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01') [DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				sum([PAYMENT_AMOUNT]*[EXCHANGE_RATE]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)) [AMT],
				'0' W_DELETE_FLG,
				case when a.[type] = 1 then 'O' else 'I' end W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  
				JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code
					and a.[CUSTOMER_CODE] like @customer_code and a.[CONTRACT_TYPE_NAME] =@contract_name
				join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] =trim(c.[KHÁCH HÀNG])
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = @material_type and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = @material_type and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'LC'
				JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] e ON 1=1
				where format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01') >=
					  format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01')
				GROUP BY format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE]),(case when a.[type] = 1 then 'O' else 'I' end)
			 



				  union all


				select
				format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01') [DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				sum([AMT]*[EXCHANGE_RATE]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)/[N1]/[N2]) [AMT],
				'0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] a  
				JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code
					and a.[CUSTOMER_CODE] like @customer_code and a.[type] = @adjust_type
				join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
				join 
				(
				SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN CAST(ISNULL(TRY_cast([VALUE] as float),0)/30 AS INT) 
				ELSE CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) 
				END [VALUE],
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN 2 
				ELSE 1 
				END [N1]
				FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
				UNION
				SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
				CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) [VALUE],
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN 2 
				ELSE 1 
				END [N1] 
				FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
				) d1 on a.[CUSTOMER_CODE] = d1.[CUSTOMER]
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'LC' and cast(d2.[VALUE] as float) <> 0
			
				join 
				(
				SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN CAST(ISNULL(TRY_cast([VALUE] as float),0)/30 AS INT) 
				ELSE CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) 
				END [VALUE]
				,
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN 2 
				ELSE 1 
				END [N2]
				FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời hạn thanh toán (ngày)' and trim([PAYMENT_TYPE]) = 'LC'
				UNION
				SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) [VALUE] 
				,
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN 2 
				ELSE 1 
				END [N2]
				FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời hạn thanh toán (ngày)' and trim([PAYMENT_TYPE]) = 'LC'
				) d3 on a.[CUSTOMER_CODE] = d3.[CUSTOMER]
			
				JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] e ON 1=1
				where format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01') >=
					  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
				GROUP BY format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

				)insert into  [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				SELECT a.[DATE_WID]
				  ,a.[RL_WID]
				  ,a.[STT]
				  ,a.[REPORT_VIEW]
				  ,a.[LV1_CODE]
				  ,a.[LV2_CODE]
				  ,a.[LV3_CODE]
				  ,a.[LV4_CODE]
				  ,a.[LV5_CODE]
				  ,a.[LV0_CODE]
				  ,a.[AMT] [AMT]
				  ,a.[W_DELETE_FLG]
				  ,a.[W_INTEGRATION_ID]
				  ,a.[W_VERSION_PERIOD]
				  ,a.[W_INSERT_DT]
				  ,a.[W_UPDATE_DT]
				  ,a.[W_DATASOURCE_NUM_ID]
				  ,a.[W_BATCH_ID]
			  FROM cte a;


			  --TT
				with cte as
				(
				select
				format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01') [DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				sum([PAYMENT_AMOUNT]*[EXCHANGE_RATE]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)) [AMT],
				'0' W_DELETE_FLG,
				case when a.[type] = 1 then 'O' else 'I' end W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from [DWH].[W_LAC_CF_MONTHLY_FORECAST_F_TEMP02] a  
				JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code
					and a.[CUSTOMER_CODE] like @customer_code and a.[CONTRACT_TYPE_NAME] =@contract_name
				join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] =trim(c.[KHÁCH HÀNG])
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d1 on a.[CUSTOMER_CODE] = trim(d1.[CUSTOMER]) and trim(d1.[MATERIAL_TYPE]) = @material_type and trim(d1.[TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d3 on a.[CUSTOMER_CODE] = trim(d3.[CUSTOMER]) and trim(d3.[MATERIAL_TYPE]) = @material_type and trim(d3.[TITLE]) = N'Thời hạn thanh toán (ngày)' and trim(d3.[PAYMENT_TYPE]) = 'TT'
				JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] e ON 1=1
				where format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01') >=
					  format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMM01')
				GROUP BY format(dateadd(day,ISNULL(TRY_cast(d3.[VALUE] as float),0),dateadd(day,ISNULL(TRY_cast(d1.[VALUE] as float),0),cast(str([DATE]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE]),a.[type]
			 



				  union all


				select
				format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01') [DATE_WID],
				b.row_wid [RL_WID],
				b.[STT],
				b.[REPORT_VIEW],
				b.[LV1_CODE],
				b.[LV2_CODE],
				b.[LV3_CODE],
				b.[LV4_CODE],
				b.[LV5_CODE],
				COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])  [LV0_CODE],
				sum([AMT]*[EXCHANGE_RATE]*(case when @material_type = N'NGUYÊN LIỆU' then  [NGUYÊN LIỆU (NL)] else [PHỤ LIỆU (PL)] end)/[N1]/[N2]) [AMT],
				'0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				FORMAT(dateadd(day,1,eomonth(dateadd(hour,7,getdate()),-1)),'yyyyMMdd') [W_VERSION_PERIOD],
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID
				from [DWH].[W_EXE_CF_MONTHLY_ADJUSTED_REVENUE_FORECAST_F] a  
				JOIN [DWH].[W_LAC_CF_D] B 
				ON  COALESCE(B.[LV5_CODE],B.[LV4_CODE],B.[LV3_CODE],B.[LV2_CODE],B.[LV1_CODE]) = @code
					and a.[CUSTOMER_CODE] like @customer_code and a.[type] = @adjust_type
				join [STG].[W_EXE_CF_MONTHLY_QUOTA_FORECAST_DS] c on a.[CUSTOMER_CODE] = trim(c.[KHÁCH HÀNG])
				join 
				(
				SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN CAST(ISNULL(TRY_cast([VALUE] as float),0)/30 AS INT) 
				ELSE CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) 
				END [VALUE],
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN 2 
				ELSE 1 
				END [N1]
				FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
				UNION
				SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
				CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) [VALUE],
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN 2 
				ELSE 1 
				END [N1] 
				FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời gian chuẩn bị hàng (ngày)'
				) d1 on a.[CUSTOMER_CODE] = d1.[CUSTOMER]
				join [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] d2 on a.[CUSTOMER_CODE] = trim(d2.[CUSTOMER]) and trim(d2.[MATERIAL_TYPE]) = @material_type and trim(d2.[TITLE]) = N'Hình thức thanh toán' and trim(d2.[PAYMENT_TYPE]) = 'TT' and cast(d2.[VALUE] as float) <> 0
			
				join 
				(
				SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN CAST(ISNULL(TRY_cast([VALUE] as float),0)/30 AS INT) 
				ELSE CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) 
				END [VALUE]
				,
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN 2 
				ELSE 1 
				END [N2]
				FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời hạn thanh toán (ngày)' and trim([PAYMENT_TYPE]) = 'TT'
				UNION
				SELECT DISTINCT trim([CUSTOMER]) [CUSTOMER],CAST(ROUND(ISNULL(TRY_cast([VALUE] as float),0)/30,0) AS INT) [VALUE] 
				,
				CASE WHEN ABS(CAST(ISNULL(TRY_cast([VALUE] as float),0) AS INT)%30) = 15 
				THEN 2 
				ELSE 1 
				END [N2]
				FROM [STG].[W_EXE_CF_MONTHLY_NPL_THANHTOAN_FORECAST_DS] WHERE trim([MATERIAL_TYPE]) = @material_type and trim([TITLE]) = N'Thời hạn thanh toán (ngày)' and trim([PAYMENT_TYPE]) = 'TT'
				) d3 on a.[CUSTOMER_CODE] = d3.[CUSTOMER]
			
				JOIN [STG].[W_EXE_CF_MONTHLY_EXCHANGE_RATE_FORECAST_DS] e ON 1=1
				where format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01') >=
					  left(format(dateadd(month,0,dateadd(hour,7,getdate())),'yyyyMMdd'),6)
				GROUP BY format(dateadd(MONTH,d3.[VALUE],dateadd(MONTH,d1.[VALUE],cast(str([DATE_WID]) as datetime))),'yyyyMM01'),row_wid,[STT],[REPORT_VIEW],[LV1_CODE],[LV2_CODE],[LV3_CODE],[LV4_CODE],[LV5_CODE],COALESCE([LV5_CODE],[LV4_CODE],[LV3_CODE],[LV2_CODE],[LV1_CODE])

				)insert into  [DWH].[W_LAC_CF_MONTHLY_FORECAST_F]
				SELECT a.[DATE_WID]
				  ,a.[RL_WID]
				  ,a.[STT]
				  ,a.[REPORT_VIEW]
				  ,a.[LV1_CODE]
				  ,a.[LV2_CODE]
				  ,a.[LV3_CODE]
				  ,a.[LV4_CODE]
				  ,a.[LV5_CODE]
				  ,a.[LV0_CODE]
				  ,a.[AMT] [AMT]
				  ,a.[W_DELETE_FLG]
				  ,a.[W_INTEGRATION_ID]
				  ,a.[W_VERSION_PERIOD]
				  ,a.[W_INSERT_DT]
				  ,a.[W_UPDATE_DT]
				  ,a.[W_DATASOURCE_NUM_ID]
				  ,a.[W_BATCH_ID]
			  FROM cte a;
			end
		end
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_MONTHLY_PLAN_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_MONTHLY_PLAN_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_MONTHLY_PLAN_F',
	@V_src_table nvarchar(100) = 'W_LAC_CF_MONTHLY_PLAN_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_tmp_dwh_table2 nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@p_prune_days [bigint] ,
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max),
	@N BIGINT,
	@RW BIGINT,
	@AccountID NVARCHAR(500),
	@OffsetacctID NVARCHAR(500),
	@ObjectID NVARCHAR(500),
	@Memo NVARCHAR(500),
	@Type VARCHAR(1),
	@SCRIPT NVARCHAR(MAX),
	@DATE_WID VARCHAR(8) = '2021%';

begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		--set @p_prune_days = (SELECT MAX(cast(FORMAT(DATEADD(DAY,-210,[EXTRACT_DATE]),'yyyyMMdd') as bigint)) FROM [DWH].[W_LAC_AP_BALANCE_F] WHERE [W_DELETE_FLG] ='N') 

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end


					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;

	

	

			--SET @N = 1
			--TRUNCATE TABLE DWH.W_LAC_CF_D_TEMP
			--TRUNCATE TABLE DWH.W_LAC_CF_F_TEMP

			--INSERT INTO DWH.W_LAC_CF_D_TEMP
			--SELECT ROW_WID,ROW_NUMBER() OVER (ORDER BY ROW_WID) RN FROM [DWH].[W_LAC_CF_D] WHERE [MANUAL] IS NULL AND FORMULA IS NULL  
			--
			--WHILE @N <= (SELECT COUNT(*) FROM DWH.W_LAC_CF_D_TEMP)
			--BEGIN
			--	SET @RW = (SELECT ROW_WID FROM DWH.W_LAC_CF_D_TEMP WHERE RN = @N)
			--	SELECT 
			--	 @AccountID			  = AccountID		
			--	,@OffsetacctID		  = OffsetacctID	
			--	,@ObjectID			  = ObjectID		
			--	,@Memo				  = Memo
			--	,@Type				  = [Type]
			--	FROM [DWH].[W_LAC_CF_D] WHERE ROW_WID = @RW
			--	PRINT @AccountID		
			--	PRINT @OffsetacctID	
			--	PRINT @ObjectID		
			--	PRINT @Memo			
			--	PRINT @Type			
			--
			--	IF @Type IN ('C','D')
			--	BEGIN
			--
			--		SET @SCRIPT = N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*(CASE WHEN ''' + @Type + ''' = ''C'' THEN -1 ELSE 1 END)) AMT FROM [DWH].[W_LAC_GL_DATA_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=(CASE WHEN '''+@Type+''' =''C'' THEN 1 ELSE 0 END) AND  DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
			--		PRINT @SCRIPT
			--	END
			--
			--	IF @Type IN ('O')
			--	BEGIN
			--		SET @SCRIPT =N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT A.DATE_WID,'+CAST(@RW AS VARCHAR(100))+',SUM(B.AMT) FROM [DWH].[W_CALENDAR_D] A JOIN (SELECT  DATE_WID,(CASE WHEN ''' + @Type + ''' = ''O'' THEN [OPENING2] ELSE [CLOSING2] END) AMT FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+')) B ON B.DATE_WID =(SELECT MAX(DATE_WID) FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+') AND DATE_WID <=  A.DATE_WID) WHERE RIGHT(A.DATE_WID,2) = ''01''  AND A.DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY A.DATE_WID'
			--
			--		PRINT @SCRIPT
			--	END 
			--
			--	IF @Type IN ('B')
			--	BEGIN
			--		SET @SCRIPT =N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT A.DATE_WID,'+CAST(@RW AS VARCHAR(100))+',SUM(B.AMT) FROM [DWH].[W_CALENDAR_D] A JOIN (SELECT  DATE_WID,(CASE WHEN ''' + @Type + ''' = ''O'' THEN [OPENING2] ELSE [CLOSING2] END) AMT FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+')) B ON B.DATE_WID =(SELECT MAX(DATE_WID) FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+') AND DATE_WID <= FORMAT(EOMONTH(CONVERT(DATE,cast(A.DATE_WID as varchar(8)))),''yyyyMMdd'') ) WHERE RIGHT(A.DATE_WID,2) = ''01''  AND A.DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY A.DATE_WID'
			--
			--		PRINT @SCRIPT
			--	END 
			--	EXEC sp_executesql @SCRIPT
			--	SET @N = @N + 1
			--
			--
			--END;
			--

            --WITH CTE AS
            --(
            --SELECT
			--F.[DATE_WID],
			--F.[RL_WID],
			--B.[STT],
			--B.[REPORT_VIEW],
			--B.[LV1_CODE],
			--B.[LV2_CODE],
			--B.[LV3_CODE],
			--B.[LV4_CODE],
			--B.[LV5_CODE],
			--F.[AMT],
            --'N' W_DELETE_FLG,
            --NULL W_INTEGRATION_ID,
            --DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            --DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
            --@v_datasource_num_id W_DATASOURCE_NUM_ID,
            --@v_batch_id W_BATCH_ID,
            --1 ROW_NUM
            --FROM DWH.W_LAC_CF_F_TEMP F JOIN [DWH].[W_LAC_CF_D] B ON F.[RL_WID] = B.ROW_WID
			--
            --)
		--insert into #W_LAC_CF_MONTHLY_PLAN_F_TMP 
		--select
		--	[DATE_WID],
		--	[RL_WID],
		--	[STT],
		--	[REPORT_VIEW],
		--	[LV1_CODE],
		--	[LV2_CODE],
		--	[LV3_CODE],
		--	[LV4_CODE],
		--	[LV5_CODE],
		--	[AMT],
		--	[W_DELETE_FLG],
		--	[W_INTEGRATION_ID],
		--	[W_INSERT_DT],
		--	[W_UPDATE_DT],
		--	[W_DATASOURCE_NUM_ID],
		--	[W_BATCH_ID]
		--from CTE
		--where ROW_NUM=1
		--UNION ALL
		--SELECT * FROM [DWH].[W_CF_MONTHLY_ACTUAL_F] WHERE DATE_WID LIKE @DATE_WID
		--;


		--WITH CTE2 AS
		--(
		--SELECT
		--F1.[DATE_WID],
		--F.[ROW_WID] [RL_WID],
		--F.[STT],
		--F.[REPORT_VIEW],
		--F.[LV1_CODE],
		--F.[LV2_CODE],
		--F.[LV3_CODE],
		--F.[LV4_CODE],
		--F.[LV5_CODE],
		--F1.[AMT]*F.[FORMULA_SIGN] [AMT],
		--F1.[W_DELETE_FLG],
		--F1.[W_INTEGRATION_ID],
		--F1.[W_INSERT_DT],
		--F1.[W_UPDATE_DT],
		--F1.[W_DATASOURCE_NUM_ID],
		--F1.[W_BATCH_ID]
		--FROM [DWH].[W_LAC_CF_D_FORMULA] F JOIN   #W_LAC_CF_F_TMP   F1 ON CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV1_CODE)
		--									WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV2_CODE)
		--									WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV3_CODE)
		--									WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV4_CODE)
		--									WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV5_CODE) END = F.CODE
		--)
		--insert into #W_LAC_CF_F_TMP
		--SELECT * FROM CTE2

		
		WITH CTE2 as (
		SELECT a.[CUSTOMER_WID]
			  ,a.[DATE_WID]
			  ,b.[CUSTOMER_CODE]
			  ,a.[PAYMENT_TERM_WID]
			  ,dateadd(day, c.[PAYMENT_SCHEDULE_2ND], CONVERT(CHAR(8),dateadd(day, c.[PAYMENT_SCHEDULE_1ST], CONVERT(CHAR(8),a.[DATE_WID])))) as [PAYMENT_DATE]
		      ,sum(a.[PRICE_FOB]) as [PRICE_FOB]
		  FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] a join [DWH].[W_MRP_MD_CUSTOMER_D] b on a.[CUSTOMER_WID]  = b.[ROW_WID]
		  join [DWH].[W_MRP_MD_PAYMENT_TERM_D] c on a.[PAYMENT_TERM_WID] = c.[ROW_WID]
		  group by a.[CUSTOMER_WID], b.[CUSTOMER_CODE], a.[PAYMENT_TERM_WID], a.[DATE_WID], c.[PAYMENT_SCHEDULE_1ST], c.[PAYMENT_SCHEDULE_2ND]
		)
		insert into [DWH].[W_LAC_CF_MONTHLY_PLAN_F]
		select convert(varchar(200), [PAYMENT_DATE], 112) AS [DATE_WID]
			  ,[CUSTOMER_WID]
			  ,[CUSTOMER_CODE]
			  ,[PAYMENT_TERM_WID]
			  ,[PAYMENT_DATE]
		      ,[PRICE_FOB]
			  ,'N' W_DELETE_FLG
              ,NULL W_INTEGRATION_ID
              ,DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT
              ,DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
              ,@v_datasource_num_id W_DATASOURCE_NUM_ID
              ,@v_batch_id W_BATCH_ID
		from CTE2 --where CONVERT(varchar, [PAYMENT_DATE], 112) like '202109%' 
		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		--SET @v_script = N'DELETE A FROM ' +@v_tgt_table_schema+'.'+ @V_tgt_table + ' A WHERE A.DATE_WID LIKE'''+@DATE_WID + ''''
		--EXEC sp_executesql @v_script;
		


		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		--SET @v_script =
		--		'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
		--		' SELECT * FROM '+@v_tmp_dwh_table
		--		EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D',
	@V_src_table nvarchar(100) = 'W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			 SELECT
			[Ngân hàng] as [BANK],
			[WEEK_WID],
			[RATE],
            'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
            @v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID,
            1 ROW_NUM
            FROM [STG].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_DS]
			unpivot ([RATE] for [WEEK_WID] in ([W01], [W02], [W03], [W04], [W05], [W06], [W07], [W08], [W09], [W10], [W11], [W12],
			[W13], [W14], [W15], [W16], [W17], [W18], [W19], [W20], [W21], [W22], [W23], [W24], [W25], [W26], [W27], [W28], [W29],
			[W30], [W31], [W32], [W33], [W34], [W35], [W36], [W37], [W38], [W39], [W40], [W41], [W42], [W43], [W44], [W45], [W46],
			[W47], [W48], [W49], [W50], [W51], [W52], [W53]))  as UnPVT
		)
		insert into #W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D_TMP
		select
			[BANK],
			[WEEK_WID],
			cast([RATE] as float) as [RATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_WEEKLY_PLAN_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_WEEKLY_PLAN_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_WEEKLY_PLAN_F',
	@V_src_table nvarchar(100) = 'W_LAC_CF_WEEKLY_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_tmp_dwh_table2 nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@p_prune_days [bigint] ,
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max),
	@v_script_truncate nvarchar(max),
	@N BIGINT,
	@RW BIGINT,
	@AccountID NVARCHAR(500),
	@OffsetacctID NVARCHAR(500),
	@ObjectID NVARCHAR(500),
	@Memo NVARCHAR(500),
	@Type VARCHAR(1),
	@SCRIPT NVARCHAR(MAX),
	@DATE_WID VARCHAR(8) = '2021%';

begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		--set @p_prune_days = (SELECT MAX(cast(FORMAT(DATEADD(DAY,-210,[EXTRACT_DATE]),'yyyyMMdd') as bigint)) FROM [DWH].[W_LAC_AP_BALANCE_F] WHERE [W_DELETE_FLG] ='N') 

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end


					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;

	
		SET @v_script_truncate = N'TRUNCATE TABLE ' + @v_tgt_table_schema+'.'+ @V_tgt_table
		EXEC sp_executesql @v_script_truncate; 
	

--			SET @N = 1
--			TRUNCATE TABLE DWH.W_LAC_CF_D_TEMP
--			TRUNCATE TABLE DWH.W_LAC_CF_F_TEMP
--
--			INSERT INTO DWH.W_LAC_CF_D_TEMP
--			SELECT ROW_WID,ROW_NUMBER() OVER (ORDER BY ROW_WID) RN FROM [DWH].[W_LAC_CF_D] WHERE [MANUAL] IS NULL AND FORMULA IS NULL  
--
--			WHILE @N <= (SELECT COUNT(*) FROM DWH.W_LAC_CF_D_TEMP)
--			BEGIN
--				SET @RW = (SELECT ROW_WID FROM DWH.W_LAC_CF_D_TEMP WHERE RN = @N)
--				SELECT 
--				 @AccountID			  = AccountID		
--				,@OffsetacctID		  = OffsetacctID	
--				,@ObjectID			  = ObjectID		
--				,@Memo				  = Memo
--				,@Type				  = [Type]
--				FROM [DWH].[W_LAC_CF_D] WHERE ROW_WID = @RW
--				PRINT @AccountID		
--				PRINT @OffsetacctID	
--				PRINT @ObjectID		
--				PRINT @Memo			
--				PRINT @Type			
--
--				IF @Type IN ('C','D')
--				BEGIN
--
--					SET @SCRIPT = N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT (LEFT(DATE_WID,6)+''01''),'+CAST(@RW AS VARCHAR(100))+',SUM([TRANSAMT2]*(CASE WHEN ''' + @Type + ''' = ''C'' THEN -1 ELSE 1 END)) AMT FROM [DWH].[W_LAC_GL_DATA_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND ('+ISNULL(@OffsetacctID,'1=1')+') AND ('+ISNULL(@ObjectID,'1=1')+') AND ('+ISNULL(@Memo,'1=1')+') AND [CREDITING]=(CASE WHEN '''+@Type+''' =''C'' THEN 1 ELSE 0 END) AND  DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY (LEFT(DATE_WID,6)+''01'')'
--					PRINT @SCRIPT
--				END
--	
--				IF @Type IN ('O')
--				BEGIN
--					SET @SCRIPT =N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT A.DATE_WID,'+CAST(@RW AS VARCHAR(100))+',SUM(B.AMT) FROM [DWH].[W_CALENDAR_D] A JOIN (SELECT  DATE_WID,(CASE WHEN ''' + @Type + ''' = ''O'' THEN [OPENING2] ELSE [CLOSING2] END) AMT FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+')) B ON B.DATE_WID =(SELECT MAX(DATE_WID) FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND [W_DELETE_FLG] = ''0'' AND ('+ ISNULL(@AccountID,'1=1')+') AND DATE_WID <=  A.DATE_WID) WHERE RIGHT(A.DATE_WID,2) = ''01''  AND A.DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY A.DATE_WID'
--	
--					PRINT @SCRIPT
--				END 
--
--				IF @Type IN ('B')
--				BEGIN
--					SET @SCRIPT =N'INSERT INTO DWH.W_LAC_CF_F_TEMP SELECT A.DATE_WID,'+CAST(@RW AS VARCHAR(100))+',SUM(B.AMT) FROM [DWH].[W_CALENDAR_D] A JOIN (SELECT  DATE_WID,(CASE WHEN ''' + @Type + ''' = ''O'' THEN [OPENING2] ELSE [CLOSING2] END) AMT FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+')) B ON B.DATE_WID =(SELECT MAX(DATE_WID) FROM [DWH].[W_LAC_GL_BALANCE_F] WHERE 1=1 AND ('+ ISNULL(@AccountID,'1=1')+') AND DATE_WID <= FORMAT(EOMONTH(CONVERT(DATE,cast(A.DATE_WID as varchar(8)))),''yyyyMMdd'') ) WHERE RIGHT(A.DATE_WID,2) = ''01''  AND A.DATE_WID LIKE '''+@DATE_WID + ''' GROUP BY A.DATE_WID'
--	
--					PRINT @SCRIPT
--				END 
--				EXEC sp_executesql @SCRIPT
--				SET @N = @N + 1
--	
--
--			END;
		WITH CTE AS (
            SELECT
			[No] as [NO],
			[Line Name] as [LINE_NAME],
			ISNULL(CAST([W01] AS VarChar), '0') as [W01],
			ISNULL(CAST([W02] AS VarChar), '0') as [W02],
			ISNULL(CAST([W03] AS VarChar), '0') as [W03],
			ISNULL(CAST([W04] AS VarChar), '0') as [W04],
			ISNULL(CAST([W05] AS VarChar), '0') as [W05],
			ISNULL(CAST([W06] AS VarChar), '0') as [W06],
			ISNULL(CAST([W07] AS VarChar), '0') as [W07],
			ISNULL(CAST([W08] AS VarChar), '0') as [W08],
			ISNULL(CAST([W09] AS VarChar), '0') as [W09],
			ISNULL(CAST([W10] AS VarChar), '0') as [W10],
			ISNULL(CAST([W11] AS VarChar), '0') as [W11],
			ISNULL(CAST([W12] AS VarChar), '0') as [W12],
			ISNULL(CAST([W13] AS VarChar), '0') as [W13],
			ISNULL(CAST([W14] AS VarChar), '0') as [W14],
			ISNULL(CAST([W15] AS VarChar), '0') as [W15],
			ISNULL(CAST([W16] AS VarChar), '0') as [W16],
			ISNULL(CAST([W17] AS VarChar), '0') as [W17],
			ISNULL(CAST([W18] AS VarChar), '0') as [W18],
			ISNULL(CAST([W19] AS VarChar), '0') as [W19],
			ISNULL(CAST([W20] AS VarChar), '0') as [W20],
			ISNULL(CAST([W21] AS VarChar), '0') as [W21],
			ISNULL(CAST([W22] AS VarChar), '0') as [W22],
			ISNULL(CAST([W23] AS VarChar), '0') as [W23],
			ISNULL(CAST([W24] AS VarChar), '0') as [W24],
			ISNULL(CAST([W25] AS VarChar), '0') as [W25],
			ISNULL(CAST([W26] AS VarChar), '0') as [W26],
			ISNULL(CAST([W27] AS VarChar), '0') as [W27],
			ISNULL(CAST([W28] AS VarChar), '0') as [W28],
			ISNULL(CAST([W29] AS VarChar), '0') as [W29],
			ISNULL(CAST([W30] AS VarChar), '0') as [W30],
			ISNULL(CAST([W31] AS VarChar), '0') as [W31],
			ISNULL(CAST([W32] AS VarChar), '0') as [W32],
			ISNULL(CAST([W33] AS VarChar), '0') as [W33],
			ISNULL(CAST([W34] AS VarChar), '0') as [W34],
			ISNULL(CAST([W35] AS VarChar), '0') as [W35],
			ISNULL(CAST([W36] AS VarChar), '0') as [W36],
			ISNULL(CAST([W37] AS VarChar), '0') as [W37],
			ISNULL(CAST([W38] AS VarChar), '0') as [W38],
			ISNULL(CAST([W39] AS VarChar), '0') as [W39],
			ISNULL(CAST([W40] AS VarChar), '0') as [W40],
			ISNULL(CAST([W41] AS VarChar), '0') as [W41],
			ISNULL(CAST([W42] AS VarChar), '0') as [W42],
			ISNULL(CAST([W43] AS VarChar), '0') as [W43],
			ISNULL(CAST([W44] AS VarChar), '0') as [W44],
			ISNULL(CAST([W45] AS VarChar), '0') as [W45],
			ISNULL(CAST([W46] AS VarChar), '0') as [W46],
			ISNULL(CAST([W47] AS VarChar), '0') as [W47],
			ISNULL(CAST([W48] AS VarChar), '0') as [W48],
			ISNULL(CAST([W49] AS VarChar), '0') as [W49],
			ISNULL(CAST([W50] AS VarChar), '0') as [W50],
			ISNULL(CAST([W51] AS VarChar), '0') as [W51],
			ISNULL(CAST([W52] AS VarChar), '0') as [W52],
			ISNULL(CAST([W53] AS VarChar), '0') as [W53]
            FROM  [STG].[W_LAC_CF_WEEKLY_FS] 
			where [No] is not null
		), 
		CTE2 AS (
            SELECT
			DATEADD(DAY, ((cast(SUBSTRING([DATE_WID], 2, 3) as bigint)-1) * 7 ), DATEADD(Day, 0,'20210104')) AS [DATE_WID],
			[NO],
			[LINE_NAME],
			case when [AMT] = 'none' then 0
				else cast([AMT] as float)
				end as [AMT],
            'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID,
            1 ROW_NUM
            FROM CTE 
			unpivot ([AMT] for [DATE_WID] in ([W01], [W02], [W03], [W04], [W05], [W06], [W07], [W08], [W09], [W10], [W11], [W12],
			[W13], [W14], [W15], [W16], [W17], [W18], [W19], [W20], [W21], [W22], [W23], [W24], [W25], [W26], [W27], [W28], [W29],
			[W30], [W31], [W32], [W33], [W34], [W35], [W36], [W37], [W38], [W39], [W40], [W41], [W42], [W43], [W44], [W45], [W46],
			[W47], [W48], [W49], [W50], [W51], [W52], [W53]))  as UnPVT
			where [No] is not null
         ),
		 CTE3 AS (
		 select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as DATE_WID,
			B.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			cast(datepart(week, F.[DATE_WID]) -1 as varchar(10)) as WEEK_WID,
			F.[NO],
			B.[STT],
			B.[LV1_CODE],
			B.[LV2_CODE],
			B.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT]
			,F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from CTE2 F left JOIN [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] B 
			ON F.[NO] = B.[LV3_CODE]
		)

		insert into #W_LAC_CF_WEEKLY_PLAN_F_TMP 
		select 
			[DATE_WID],
			[WEEKLY_REPORTING_LINE_KEY],
			[WEEK_WID],
			[NO],
			[STT],
			[LV1_CODE],
			[LV2_CODE],
			[LV3_CODE],
			isnull([AMT],0) as [AMT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT]
			,[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE3

		union
		--II.1.1	Thu từ các LC/TTR đã chiết khấu (Phần dư ra sau khi trả nợ vay chiết khấu) | 1.1+1.4+1.7+1.11 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
          ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
          @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(
		--Haddad + Đã chiết khấu (LC)
			--Dựa vào ngày CK để xác định tuần, lên số tiền = Cột Số tiền đã CK
			SELECT [DISCOUNT_DATE] as [DATE_WID], cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DISCOUNT_AMOUNT]), 0) as AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			where [PAYMENT_METHOD] in ('L/C', 'TTR', 'OA') and [DISCOUNT_STATUS] in ('Paid', N'Đã chiết khấu') and [DISCOUNT_DATE] is not null
			group by [DISCOUNT_DATE]
			union 
			--Dựa vào ngày đến hạn TT để xác định tuần, số tiền = Nếu tình trạng CT = "Paid" thì lấy cột "Số tiền thu còn lại", ngược lại cột "Số tiền dự kiến thu"
			SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum(case when [DISCOUNT_STATUS] = 'Paid' then [AMOUNT_DUE]
													else [ESTIMATED_AMOUNT_DUE]
													END),0) AS AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			where [PAYMENT_METHOD] in ('L/C', 'TTR', 'OA') and [DISCOUNT_STATUS] in ('Paid', N'Đã chiết khấu') and [DUE_DATE] is not null
			group by [DUE_DATE]
			
			--1.11(Trên CRQ)
			--Sum từ mục 3.2		Từ file Import excel
			union 
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.2' group by [STT]) F
			where F.[STT] = '3.2'
			--SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 500000000 AS AMT
			--FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--where [DUE_DATE] is not null
			--group by [DUE_DATE]
			) F
		where D.[LV3_CODE] = 'II.1.1'

		union --II.1.2	Dòng thu từ LC đã xuất hàng và không định chiết khấu | 1.3 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(
			--2.1.3 Dựa vào Ngày đến hạn TT để xác định tuần = Tiền invoice * 100%
			SELECT [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [PAYMENT_METHOD] in ('L/C') and [DISCOUNT_STATUS] in (N'Chưa chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
			group by [ESTIMATED_DATE_OF_DISCOUNT]
			) F
		where D.[LV3_CODE] = 'II.1.2'

		union --II.1.3	Dòng thu từ TTR đã xuất hàng và không định chiết khấu | 1.6 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(
			--2.1.6 Chưa thanh toán (TTR)
			SELECT [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]),0) as AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [PAYMENT_METHOD] in ('TTR') and [DISCOUNT_STATUS] in (N'Chưa chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
			group by [ESTIMATED_DATE_OF_DISCOUNT]
			) F
		where D.[LV3_CODE] = 'II.1.3'

		union --II.1.4	Dòng thu từ OA đã xuất hàng và không định BTT | 1.9 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
			@v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(
			--2.1.9 Chưa thanh toán (OA)
			SELECT [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]),0) as AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [PAYMENT_METHOD] in ('OA') and [DISCOUNT_STATUS] in (N'Chưa chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
			group by [ESTIMATED_DATE_OF_DISCOUNT]
			) F
		where D.[LV3_CODE] = 'II.1.4'
		
		union --II.5.1	Thu vay CK/ BTT từ doanh thu đã xuất hóa đơn 
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(
			--Dựa vào Ngày dự kiến CK để xác định tuần = Tiền invoice * 90%
			SELECT [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]),0) * 0.9 as AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [PAYMENT_METHOD] in ('L/C', 'TTR', 'OA') and [DISCOUNT_STATUS] in (N'Dự kiến chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
			group by [ESTIMATED_DATE_OF_DISCOUNT]
			) F
		where D.[LV3_CODE] = 'II.5.1'

		union --II.5.2	Thu vay CK/ BTT từ doanh thu dự kiến xuất hàng 
		select 0 as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			null as [WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[AMT] as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(
			--Dòng thu CK/ BTT từ doanh thu xuất hàng dự kiến 
			--excel
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.2' group by [STT]) F
			where F.[STT] = '3.2'
			--SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--where [DUE_DATE] is not null
			--group by [DUE_DATE]
			) F
		where D.[LV3_CODE] = 'II.5.2'

		union --III.2	THANH TOÁN NHÀ CUNG CẤP TRONG NƯỚC
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(
			--Lấy từ Lạc Việt, tài khoản 331%, trong đó loại bỏ 2 tài khoản 3315 và 3317 (2 tài khoản này được chuyển cho chi đầu tư) - Currency ID = VND
			SELECT [INVOICE_DATE] as [DATE_WID], cast(datepart(week, [INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([INV_AP_AMOUNT2]), 0) as AMT
			FROM [DWH].[W_LAC_AP_BALANCE_FINAL_F]
			where [ACCOUNTID] like '331%' and [ACCOUNTID] not in ('3315', '3317')and [INVOICE_DATE] is not null
			and [INVOICE_DATE] >'20210101' and [CURRENCYID] = 'VND'
			group by [INVOICE_DATE]

			--union
			----Phần dự phòng PO từ phần mềm sản xuất (lấy phần không có số phiếu nhập hàng) và loại trừ hình thức thanh toán LC và cột "loaitien" lấy VND
			--SELECT [DATE_WID] as [DATE_WID], cast(datepart(week, [DATE_WID]) -1 as varchar(10)) as WEEK_WID, isnull(sum([INV_AP_AMOUNT2]), 0) as AMT
			--FROM [DWH].[W_MRP_TRX_PURCHASE_ORDER_F]
			--where [DATE_WID] is not null and PAYMENT_METHOD not in ('L/C')
			--and [DATE_WID] >'20210101' and [CURRENCY] = 'VND'
			--group by [DATE_WID]
			) F
		where D.[LV3_CODE] = 'III.2'

		union --III.3	THANH TOÁN NHÀ CUNG CẤP NƯỚC NGOÀI NPL (PHƯƠNG THỨC TT)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(
			--Lấy từ Lạc Việt, tài khoản 331%, trong đó loại bỏ 2 tài khoản 3315 và 3317 (2 tài khoản này được chuyển cho chi đầu tư) - Currency ID = VND
			SELECT [INVOICE_DATE] as [DATE_WID], cast(datepart(week, [INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([INV_AP_AMOUNT2]), 0) as AMT
			FROM [DWH].[W_LAC_AP_BALANCE_FINAL_F]
			where [ACCOUNTID] like '331%' and [ACCOUNTID] not in ('3315', '3317')and [INVOICE_DATE] is not null
			and [INVOICE_DATE] >'20210101' and [CURRENCYID] = 'USD'
			group by [INVOICE_DATE]

			--Phần dự phòng PO từ phần mềm sản xuất (lấy phần không có số phiếu nhập hàng) và loại trừ hình thức thanh toán LC và cột "loaitien" lấy VND
			--union
			----Phần dự phòng PO từ phần mềm sản xuất (lấy phần không có số phiếu nhập hàng) và loại trừ hình thức thanh toán LC và cột "loaitien" lấy VND
			--SELECT [DATE_WID] as [DATE_WID], cast(datepart(week, [DATE_WID]) -1 as varchar(10)) as WEEK_WID, isnull(sum([INV_AP_AMOUNT2]), 0) as AMT
			--FROM [DWH].[W_MRP_TRX_PURCHASE_ORDER_F]
			--where [DATE_WID] is not null and PAYMENT_METHOD not in ('L/C')
			--and [DATE_WID] >'20210101' and [CURRENCY] = 'USD'
			--group by [DATE_WID]
			) F
		where D.[LV3_CODE] = 'III.3'


--		union --III.3.1	USD
--		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
--			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
--			F.[WEEK_WID],
--			D.[LV3_CODE],
--			D.[STT] as [STT],
--			D.[LV1_CODE],
--			D.[LV2_CODE],
--			D.[LV3_CODE],
--			23000 as AMT,
--			'N' W_DELETE_FLG,
--            NULL W_INTEGRATION_ID,
--            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
--            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
--            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
--            @v_batch_id W_BATCH_ID
--		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
--		where D.[LV3_CODE] = 'III.3.1'


		union --V.1		CHI MUA SẮM MMTB & XÂY DỰNG
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--Lấy từ Lạc Việt, tài khoản 331%, trong đó lấy 2 tài khoản 3315 và 3317
			SELECT [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([INV_AP_AMOUNT2]), 0) as AMT
			FROM [DWH].[W_LAC_AP_BALANCE_FINAL_F]
			where [ACCOUNTID] like '331%' and [DUE_DATE] is not null
			and [DUE_DATE] >= '20210101'
			group by [DUE_DATE]
			) F
		where D.[LV3_CODE] = 'V.1'

		union --VIII.3.1	Saigonbank	~~ 7.4.1 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--7.1.1 Thu chiết khấu - Đã CK
			select [DISCOUNT_DATE] as [DATE_WID], cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]),0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
			group by [DISCOUNT_DATE]
			
			union--7.2.1 Thu chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE], 0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--(Mục 1.2 + 1.5)
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DOCUMENT_AMOUNT]) * 0.9, 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [PAYMENT_METHOD] in ('L/C', 'TTR') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
				group by  [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Saigonbank'

			union --7.3.1 Thu chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT],[PAYMENT_METHOD], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.2' group by [STT], [PAYMENT_METHOD]) F
			where D.[BANK] = 'Saigonbank' and F.[STT] = '3.2' and F.[PAYMENT_METHOD] in ('L/C', 'TTR')
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.2 (chỉ lấy LC & TT))
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null and [PAYMENT_METHOD] in ('L/C', 'TTR')
			--	and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--			when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--			end
			--where D.[BANK] = 'Saigonbank'

			) F
		where D.[LV3_CODE] = 'VIII.3.1'

		union --VIII.3.2	Eximbank	~~ 7.4.2 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
           ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
           @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--7.1.2 Thu chiết khấu - Đã CK
			select [DISCOUNT_DATE] as [DATE_WID], cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]),0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
			group by [DISCOUNT_DATE]
			
			union--7.2.2 Thu chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE],0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--(Mục 1.2 + 1.5)
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DOCUMENT_AMOUNT]),0) * 0.9 as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [PAYMENT_METHOD] in ('L/C', 'TTR') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
				group by  [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Eximbank'

			union --7.3.2 Thu chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT],[PAYMENT_METHOD], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.2' group by [STT], [PAYMENT_METHOD]) F
			where D.[BANK] = 'Eximbank' and F.[STT] = '3.2' and F.[PAYMENT_METHOD] in ('L/C', 'TTR')
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.2 (chỉ lấy LC & TT))
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null and [PAYMENT_METHOD] in ('L/C', 'TTR')
			--	and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--			when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--			end
			--where D.[BANK] = 'Eximbank'
			) F
		where D.[LV3_CODE] = 'VIII.3.2'

		union --VIII.3.3	Vietinbank	~~ 7.4.3 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--7.1.3 Thu chiết khấu - Đã CK
			select [DISCOUNT_DATE] as [DATE_WID], cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]),0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
			group by [DISCOUNT_DATE]
			
			union --7.2.3 Thu chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE], 0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--(Mục 1.2 + 1.5)
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DOCUMENT_AMOUNT]) * 0.9, 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [PAYMENT_METHOD] in ('L/C', 'TTR') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
				group by  [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Vietinbank'

			
			union --7.3.3 Thu chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT],[PAYMENT_METHOD], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.2' group by [STT], [PAYMENT_METHOD]) F
			where D.[BANK] = 'Vietinbank' and F.[STT] = '3.2' and F.[PAYMENT_METHOD] in ('L/C', 'TTR')
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.2 (chỉ lấy LC & TT))
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null and [PAYMENT_METHOD] in ('L/C', 'TTR')
			--	and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--			when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--			end
			--where D.[BANK] = 'Vietinbank'
			) F
		where D.[LV3_CODE] = 'VIII.3.3'

		union --VIII.3.4	Maritimebank	~~ 7.4.4 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--7.1.4 Thu chiết khấu - Đã CK
			select [DISCOUNT_DATE] as [DATE_WID], cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]),0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
			group by [DISCOUNT_DATE]
			
			union --7.2.4 Thu chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE], 0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--(Mục 1.2 + 1.5)
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DOCUMENT_AMOUNT]) * 0.9, 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [PAYMENT_METHOD] in ('L/C', 'TTR') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
				group by  [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Maritimebank'

			
			union --7.3.4 Thu chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT],[PAYMENT_METHOD], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.2' group by [STT], [PAYMENT_METHOD]) F
			where D.[BANK] = 'Eximbank' and F.[STT] = '3.2' and F.[PAYMENT_METHOD] in ('L/C', 'TTR')
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.2 (chỉ lấy LC & TT))
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null and [PAYMENT_METHOD] in ('L/C', 'TTR')
			--	and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--			when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--			end
			--where D.[BANK] = 'Maritimebank'
			) F
		where D.[LV3_CODE] = 'VIII.3.4'

		union --VIII.3.5	Techcombank	~~ 7.4.5 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--7.1.5 Thu chiết khấu - Đã CK
			select [DISCOUNT_DATE] as [DATE_WID], cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
			group by [DISCOUNT_DATE]
			
			union --7.2.5 Thu chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE],0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--(Mục 1.2 + 1.5)
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DOCUMENT_AMOUNT]) * 0.9, 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [PAYMENT_METHOD] in ('L/C', 'TTR') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
				group by  [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Techcombank'

			union --7.3.5 Thu chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT],[PAYMENT_METHOD], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.2' group by [STT], [PAYMENT_METHOD]) F
			where D.[BANK] = 'Techcombank' and F.[STT] = '3.2' and F.[PAYMENT_METHOD] in ('L/C', 'TTR')
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.2 (chỉ lấy LC & TT))
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null and [PAYMENT_METHOD] in ('L/C', 'TTR')
			--	and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--				when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--				end
			--where D.[BANK] = 'Techcombank'
			) F
		where D.[LV3_CODE] = 'VIII.3.5'

		union --VIII.4.1	Saigonbank	~~ 6.4.1 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT], 0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--6.1.1 Trả nợ chiết khấu - Đã CK
			select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in (N'Đã chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
			group by [DUE_DATE]

			union --6.2.1 Trả nợ chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE], 0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([ESTIMATED_DISCOUNT_AMOUNT]), 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in (N'Dự kiến chiết khấu') and [DUE_DATE] is not null
				and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
				group by [DUE_DATE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Saigonbank'

			union --6.3.1 Trả nợ chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.4' group by [STT]) F	
			where D.[BANK] = 'Saigonbank' and F.[STT] = '3.4'
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.4 Trả nợ CK từ doanh thu dự kiến xuất hàng)
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null
			--	and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--				when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--				end
			--where D.[BANK] = 'Saigonbank'
			) F
		where D.[LV3_CODE] = 'VIII.4.1'

		union --VIII.4.2	Eximbank	~~ 6.4.2 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT], 0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--6.1.2 Trả nợ chiết khấu - Đã CK
			select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in (N'Đã chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
			group by [DUE_DATE]

			union --6.2.2 Trả nợ chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE],0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([ESTIMATED_DISCOUNT_AMOUNT]), 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in (N'Dự kiến chiết khấu') and [DUE_DATE] is not null
				and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
				group by [DUE_DATE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Eximbank'

			union --6.3.2 Trả nợ chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.4' group by [STT]) F
				--(--(Mục 3.4 Trả nợ CK từ doanh thu dự kiến xuất hàng)
				--SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
				--FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
				--where [DUE_DATE] is not null
				--and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
				--group by [DUE_DATE]) F 
			--on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
						--when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
						--end
			where D.[BANK] = 'Eximbank' and F.[STT] = '3.4'
		) F
		where D.[LV3_CODE] = 'VIII.4.2'

		union --VIII.4.3	Vietinbank	~~ 6.4.3 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT], 0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--6.1.3 Trả nợ chiết khấu - Đã CK
			select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]),0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in (N'Đã chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
			group by [DUE_DATE]

			union --6.2.3 Trả nợ chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE],0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([ESTIMATED_DISCOUNT_AMOUNT]),0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in (N'Dự kiến chiết khấu') and [DUE_DATE] is not null
				and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
				group by [DUE_DATE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Vietinbank'

			union --6.3.3 Trả nợ chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.4' group by [STT]) F	
			where D.[BANK] = 'Vietinbank' and F.[STT] = '3.4'
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.4 Trả nợ CK từ doanh thu dự kiến xuất hàng)
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null
			--	and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--			when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--			end
			) F
		where D.[LV3_CODE] = 'VIII.4.3'

		union --VIII.4.4	Maritimebank	~~ 6.4.4 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--6.1.4 Trả nợ chiết khấu - Đã CK
			select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]),0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in (N'Đã chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
			group by [DUE_DATE]

			union --6.2.4 Trả nợ chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE],0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([ESTIMATED_DISCOUNT_AMOUNT]),0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in (N'Dự kiến chiết khấu') and [DUE_DATE] is not null
				and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
				group by [DUE_DATE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Maritimebank'

			union --6.3.4 Trả nợ chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.4' group by [STT]) F
			where D.[BANK] = 'Maritimebank' and F.[STT] = '3.4'
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.4 Trả nợ CK từ doanh thu dự kiến xuất hàng)
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null
			--	and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--			when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--			end
			--where D.[BANK] = 'Maritimebank'
			) F
		where D.[LV3_CODE] = 'VIII.4.4'

		union --VIII.4.5	Techcombank	~~ 6.4.5 (Trên CRQ)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			(--6.1.5 Trả nợ chiết khấu - Đã CK
			select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID,  isnull(sum([DISCOUNT_AMOUNT]),0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in (N'Đã chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
			group by [DUE_DATE]

			union --6.2.5 Trả nợ chiết khấu - Dự kiến CK theo doanh thu đã xuất hàng
			select F.[DATE_WID], F.[WEEK_WID], isnull(F.[AMT] * D.[RATE],0) as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [DUE_DATE] as [DATE_WID], cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([ESTIMATED_DISCOUNT_AMOUNT]),0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in (N'Dự kiến chiết khấu') and [DUE_DATE] is not null
				and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
				group by [DUE_DATE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
							when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
							end
			where D.[BANK] = 'Techcombank'

			union --6.3.5 Trả nợ chiết khấu - Dự kiến CK theo doanh thu dự kiến xuất hàng
			select distinct 0 as [DATE_WID], D.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D, (select [STT], isnull(sum([AMOUNT]), 0) as [AMT] from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS] where [STT] = '3.4' group by [STT]) F	
			where D.[BANK] = 'Techcombank' and F.[STT] = '3.4'
			--select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			--from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			--	(--(Mục 3.4 Trả nợ CK từ doanh thu dự kiến xuất hàng)
			--	SELECT [DUE_DATE] as [DATE_WID],  cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, 100000000 AS AMT
			--	FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] 
			--	where [DUE_DATE] is not null
			--	and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
			--	group by [DUE_DATE]) F 
			--	on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
			--			when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
			--			end
			--where D.[BANK] = 'Techcombank'
			) F
		where D.[LV3_CODE] = 'VIII.4.5';

--IX
	--IX.2
		--5.1 Tổng tiền thu từ TT/OA
		with CT1 as (
		select F.[DATE_WID], F.[WEEK_WID], F.[RECEIVE_CUSTOMER_CODE], isnull(F.[AMT] * D.[RATE], 0) as AMT
		from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			(-- Lấy tổng tiền thu sum theo KH có invoice TT/OA ở mục 1 * tỷ lệ phân bổ theo từng ngân hàng
			SELECT [INVOICE_DATE] as [DATE_WID],  cast(datepart(week, [INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, [RECEIVE_CUSTOMER_CODE], isnull(sum([DOCUMENT_AMOUNT]),0) AS AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [INVOICE_DATE] is not null and [PAYMENT_METHOD] in ('OA', 'TTR')
			and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
					when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
					end
		where D.[BANK] = 'Saigonbank'
		),

		--5.2 Tiền về trực tiếp từ TT/ OA
		CT2 as (
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMT]) as AMT
		from CT1 F join (
			select F.[INVOICE_DATE] as [DATE_WID],  cast(datepart(week, F.[INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, F.[RECEIVE_CUSTOMER_CODE], isnull(sum(F.[DOCUMENT_AMOUNT]),0) AS AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F] F join [DWH].[W_MRP_MD_PAYMENT_TYPE_D] D on F.[RECEIVE_CUSTOMER_CODE] = D.[CUSTUMER_CODE]
			where D.[BANK_CODE] in ('SGB', 'SGBANK')
				and F.[INVOICE_DATE] is not null and F.[PAYMENT_METHOD] in ('OA', 'TTR')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]
			) D on D.[DATE_WID] =  F.[DATE_WID]
		where F.[DATE_WID] is not null
		),
		
		--5.3 Tiền về trực tiếp từ LC (USD)
		CT3 as (
		----Tình trạng CT = "Đã CK/BTT"
		--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
		--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMOUNT]) as [AMT]
		from (select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Đã chiết khấu') and [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
			group by [DISCOUNT_DATE]

			----Tình trạng CT = "Dự kiến CK/BTT"
			union
			select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], 'W' + cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in ('Dự kiến chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
				group by [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = F.[WEEK_WID]
			where D.[BANK] = 'Saigonbank'
			
			union----Tình trạng CT = "chưa CK/BTT"
			select [DUE_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Chưa chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
			group by [DUE_DATE]

			union----Tình trạng CT = "Paid"
			select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Paid') and [DISCOUNT_DATE] is not null and [DOCUMENT_AMOUNT] > 0
			and [BANK_DISCOUNT] in ('SGB', 'SGBANK')
			group by [DISCOUNT_DATE]
		) F,
		 ----Cộng thêm Dự kiến xuất hàng: ( cộng thêm 3.6 - HTTT= "LC")
			(select [STT], [PAYMENT_METHOD], sum([AMOUNT]) as [AMOUNT]
			from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS]
			where [PAYMENT_METHOD] = 'L/C' and [STT] = '3.6'
			group by [PAYMENT_METHOD],[STT]
		)  D
		
		),
		--5.4 Tổng tiền về trực tiếp (USD)
		CT4 as (
		select *
		from CT2
		union
		select *
		from CT3
		),
		--5.5 Tổng tiền về trực tiếp (VND)
		CT5 as (
		select [DATE_WID], [WEEK_WID], [AMT]
		from CT4
		)
		--IX.1	Saigonbank ~~ 5.5.1 (Trên CRQ)
		insert into #W_LAC_CF_WEEKLY_PLAN_F_TMP 
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[AMT] as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			CT5 F
		where D.[LV3_CODE] = 'IX.1';

	--IX.2
		--5.1 Tổng tiền thu từ TT/OA
		with CT1 as (
		select F.[DATE_WID], F.[WEEK_WID], F.[RECEIVE_CUSTOMER_CODE], isnull(F.[AMT] * D.[RATE], 0) as AMT
		from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			(-- Lấy tổng tiền thu sum theo KH có invoice TT/OA ở mục 1 * tỷ lệ phân bổ theo từng ngân hàng
			SELECT [INVOICE_DATE] as [DATE_WID],  cast(datepart(week, [INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, [RECEIVE_CUSTOMER_CODE], isnull(sum([DOCUMENT_AMOUNT]),0) AS AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [INVOICE_DATE] is not null and [PAYMENT_METHOD] in ('OA', 'TTR')
			and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
					when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
					end
		where D.[BANK] = 'Eximbank'
		),

		--5.2 Tiền về trực tiếp từ TT/ OA
		CT2 as (
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMT]) as AMT
		from CT1 F join (
			select F.[INVOICE_DATE] as [DATE_WID],  cast(datepart(week, F.[INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, F.[RECEIVE_CUSTOMER_CODE], isnull(sum(F.[DOCUMENT_AMOUNT]),0) AS AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F] F join [DWH].[W_MRP_MD_PAYMENT_TYPE_D] D on F.[RECEIVE_CUSTOMER_CODE] = D.[CUSTUMER_CODE]
			where D.[BANK_CODE] in ('EXIMBANK', 'EIB')
				and F.[INVOICE_DATE] is not null and F.[PAYMENT_METHOD] in ('OA', 'TTR')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]
			) D on D.[DATE_WID] =  F.[DATE_WID]
		where F.[DATE_WID] is not null
		),
		
		--5.3 Tiền về trực tiếp từ LC (USD)
		CT3 as (
		----Tình trạng CT = "Đã CK/BTT"
		--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
		--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMOUNT]) as [AMT]
		from (select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Đã chiết khấu') and [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
			group by [DISCOUNT_DATE]

			----Tình trạng CT = "Dự kiến CK/BTT"
			union
			select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], 'W' + cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in ('Dự kiến chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
				group by [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = F.[WEEK_WID]
			where D.[BANK] = 'Eximbank'
			
			union----Tình trạng CT = "chưa CK/BTT"
			select [DUE_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Chưa chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
			group by [DUE_DATE]

			union----Tình trạng CT = "Paid"
			select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Paid') and [DISCOUNT_DATE] is not null and [DOCUMENT_AMOUNT] > 0
			and [BANK_DISCOUNT] in ('EXIMBANK', 'EIB')
			group by [DISCOUNT_DATE]
		) F,
		 ----Cộng thêm Dự kiến xuất hàng: ( cộng thêm 3.6 - HTTT= "LC")
			(select [STT], [PAYMENT_METHOD], sum([AMOUNT]) as [AMOUNT]
			from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS]
			where [PAYMENT_METHOD] = 'L/C' and [STT] = '3.6'
			group by [PAYMENT_METHOD],[STT]
		)  D
		
		),
		--5.4 Tổng tiền về trực tiếp (USD)
		CT4 as (
		select *
		from CT2
		union
		select *
		from CT3
		),
		--5.5 Tổng tiền về trực tiếp (VND)
		CT5 as (
		select [DATE_WID], [WEEK_WID], [AMT]
		from CT4
		)
		--IX.2	Eximbank	~~ 5.5.2 (Trên CRQ)
		insert into #W_LAC_CF_WEEKLY_PLAN_F_TMP 
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[AMT] as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
           @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			CT5 F
		where D.[LV3_CODE] = 'IX.2';

	--IX.3
		--5.1 Tổng tiền thu từ TT/OA
		with CT1 as (
		select F.[DATE_WID], F.[WEEK_WID], F.[RECEIVE_CUSTOMER_CODE], isnull(F.[AMT] * D.[RATE], 0) as AMT
		from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			(-- Lấy tổng tiền thu sum theo KH có invoice TT/OA ở mục 1 * tỷ lệ phân bổ theo từng ngân hàng
			SELECT [INVOICE_DATE] as [DATE_WID],  cast(datepart(week, [INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, [RECEIVE_CUSTOMER_CODE], isnull(sum([DOCUMENT_AMOUNT]),0) AS AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [INVOICE_DATE] is not null and [PAYMENT_METHOD] in ('OA', 'TTR')
			and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
					when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
					end
		where D.[BANK] = 'Vietinbank'
		),

		--5.2 Tiền về trực tiếp từ TT/ OA
		CT2 as (
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMT]) as AMT
		from CT1 F join (
			select F.[INVOICE_DATE] as [DATE_WID],  cast(datepart(week, F.[INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, F.[RECEIVE_CUSTOMER_CODE], isnull(sum(F.[DOCUMENT_AMOUNT]),0) AS AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F] F join [DWH].[W_MRP_MD_PAYMENT_TYPE_D] D on F.[RECEIVE_CUSTOMER_CODE] = D.[CUSTUMER_CODE]
			where D.[BANK_CODE] in ('VIETINBANK', 'VTB')
				and F.[INVOICE_DATE] is not null and F.[PAYMENT_METHOD] in ('OA', 'TTR')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]
			) D on D.[DATE_WID] =  F.[DATE_WID]
		where F.[DATE_WID] is not null
		),
		
		--5.3 Tiền về trực tiếp từ LC (USD)
		CT3 as (
		----Tình trạng CT = "Đã CK/BTT"
		--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
		--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMOUNT]) as [AMT]
		from (select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Đã chiết khấu') and [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
			group by [DISCOUNT_DATE]

			----Tình trạng CT = "Dự kiến CK/BTT"
			union
			select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], 'W' + cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in ('Dự kiến chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
				group by [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = F.[WEEK_WID]
			where D.[BANK] = 'Vietinbank'
			
			union----Tình trạng CT = "chưa CK/BTT"
			select [DUE_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Chưa chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
			group by [DUE_DATE]

			union----Tình trạng CT = "Paid"
			select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Paid') and [DISCOUNT_DATE] is not null and [DOCUMENT_AMOUNT] > 0
			and [BANK_DISCOUNT] in ('VIETINBANK', 'VTB')
			group by [DISCOUNT_DATE]
		) F,
		 ----Cộng thêm Dự kiến xuất hàng: ( cộng thêm 3.6 - HTTT= "LC")
			(select [STT], [PAYMENT_METHOD], sum([AMOUNT]) as [AMOUNT]
			from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS]
			where [PAYMENT_METHOD] = 'L/C' and [STT] = '3.6'
			group by [PAYMENT_METHOD],[STT]
		)  D
		
		),
		--5.4 Tổng tiền về trực tiếp (USD)
		CT4 as (
		select *
		from CT2
		union
		select *
		from CT3
		),
		--5.5 Tổng tiền về trực tiếp (VND)
		CT5 as (
		select [DATE_WID], [WEEK_WID], [AMT]
		from CT4
		)
		--IX.3	Vietinbank	~~ 5.5.3 (Trên CRQ)
		insert into #W_LAC_CF_WEEKLY_PLAN_F_TMP 
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[AMT] as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			CT5 F
		where D.[LV3_CODE] = 'IX.3';

	--IX.4
		--5.1 Tổng tiền thu từ TT/OA
		with CT1 as (
		select F.[DATE_WID], F.[WEEK_WID], F.[RECEIVE_CUSTOMER_CODE], isnull(F.[AMT] * D.[RATE], 0) as AMT
		from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			(-- Lấy tổng tiền thu sum theo KH có invoice TT/OA ở mục 1 * tỷ lệ phân bổ theo từng ngân hàng
			SELECT [INVOICE_DATE] as [DATE_WID],  cast(datepart(week, [INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, [RECEIVE_CUSTOMER_CODE], isnull(sum([DOCUMENT_AMOUNT]),0) AS AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [INVOICE_DATE] is not null and [PAYMENT_METHOD] in ('OA', 'TTR')
			and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
					when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
					end
		where D.[BANK] = 'Maritimebank'
		),

		--5.2 Tiền về trực tiếp từ TT/ OA
		CT2 as (
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMT]) as AMT
		from CT1 F join (
			select F.[INVOICE_DATE] as [DATE_WID],  cast(datepart(week, F.[INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, F.[RECEIVE_CUSTOMER_CODE], isnull(sum(F.[DOCUMENT_AMOUNT]),0) AS AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F] F join [DWH].[W_MRP_MD_PAYMENT_TYPE_D] D on F.[RECEIVE_CUSTOMER_CODE] = D.[CUSTUMER_CODE]
			where D.[BANK_CODE] in ('MRTBANK', 'MRT')
				and F.[INVOICE_DATE] is not null and F.[PAYMENT_METHOD] in ('OA', 'TTR')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]
			) D on D.[DATE_WID] =  F.[DATE_WID]
		where F.[DATE_WID] is not null
		),
		
		--5.3 Tiền về trực tiếp từ LC (USD)
		CT3 as (
		----Tình trạng CT = "Đã CK/BTT"
		--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
		--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMOUNT]) as [AMT]
		from (select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Đã chiết khấu') and [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
			group by [DISCOUNT_DATE]

			----Tình trạng CT = "Dự kiến CK/BTT"
			union
			select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], 'W' + cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in ('Dự kiến chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
				group by [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = F.[WEEK_WID]
			where D.[BANK] = 'Maritimebank'
			
			union----Tình trạng CT = "chưa CK/BTT"
			select [DUE_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Chưa chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
			group by [DUE_DATE]

			union----Tình trạng CT = "Paid"
			select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Paid') and [DISCOUNT_DATE] is not null and [DOCUMENT_AMOUNT] > 0
			and [BANK_DISCOUNT] in ('MRTBANK', 'MRT')
			group by [DISCOUNT_DATE]
		) F,
		 ----Cộng thêm Dự kiến xuất hàng: ( cộng thêm 3.6 - HTTT= "LC")
			(select [STT], [PAYMENT_METHOD], sum([AMOUNT]) as [AMOUNT]
			from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS]
			where [PAYMENT_METHOD] = 'L/C' and [STT] = '3.6'
			group by [PAYMENT_METHOD],[STT]
		)  D
		
		),
		--5.4 Tổng tiền về trực tiếp (USD)
		CT4 as (
		select *
		from CT2
		union
		select *
		from CT3
		),
		--5.5 Tổng tiền về trực tiếp (VND)
		CT5 as (
		select [DATE_WID], [WEEK_WID], [AMT]
		from CT4
		)
		--IX.4	Maritimebank	~~ 5.5.4 (Trên CRQ)
		insert into #W_LAC_CF_WEEKLY_PLAN_F_TMP 
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[AMT] as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			CT5 F
		where D.[LV3_CODE] = 'IX.4';

	--IX.5
		--5.1 Tổng tiền thu từ TT/OA
		with CT1 as (
		select F.[DATE_WID], F.[WEEK_WID], F.[RECEIVE_CUSTOMER_CODE], isnull(F.[AMT] * D.[RATE], 0) as AMT
		from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
			(-- Lấy tổng tiền thu sum theo KH có invoice TT/OA ở mục 1 * tỷ lệ phân bổ theo từng ngân hàng
			SELECT [INVOICE_DATE] as [DATE_WID],  cast(datepart(week, [INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, [RECEIVE_CUSTOMER_CODE], isnull(sum([DOCUMENT_AMOUNT]),0) AS AMT
			FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [INVOICE_DATE] is not null and [PAYMENT_METHOD] in ('OA', 'TTR')
			and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]) F 
			on D.[WEEK_WID] = case when cast(F.[WEEK_WID] as bigint) > 0 and cast(F.[WEEK_WID] as bigint) < 10 then ('W0' + cast(F.[WEEK_WID] as varchar(10)))
					when cast(F.[WEEK_WID] as bigint) >= 10 then ('W' + cast(F.[WEEK_WID] as varchar(10)))
					end
		where D.[BANK] = 'Techcombank'
		),

		--5.2 Tiền về trực tiếp từ TT/ OA
		CT2 as (
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMT]) as AMT
		from CT1 F join (
			select F.[INVOICE_DATE] as [DATE_WID],  cast(datepart(week, F.[INVOICE_DATE]) -1 as varchar(10)) as WEEK_WID, F.[RECEIVE_CUSTOMER_CODE], isnull(sum(F.[DOCUMENT_AMOUNT]),0) AS AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F] F join [DWH].[W_MRP_MD_PAYMENT_TYPE_D] D on F.[RECEIVE_CUSTOMER_CODE] = D.[CUSTUMER_CODE]
			where D.[BANK_CODE] in ('TECHCOMBANK', 'TEC')
				and F.[INVOICE_DATE] is not null and F.[PAYMENT_METHOD] in ('OA', 'TTR')
			group by [INVOICE_DATE], [RECEIVE_CUSTOMER_CODE]
			) D on D.[DATE_WID] =  F.[DATE_WID]
		where F.[DATE_WID] is not null
		),
		
		--5.3 Tiền về trực tiếp từ LC (USD)
		CT3 as (
		----Tình trạng CT = "Đã CK/BTT"
		--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
		--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
		select F.[DATE_WID], F.[WEEK_WID], (F.[AMT] + D.[AMOUNT]) as [AMT]
		from (select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Đã chiết khấu') and [DISCOUNT_DATE] is not null
			and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
			group by [DISCOUNT_DATE]

			----Tình trạng CT = "Dự kiến CK/BTT"
			union
			select F.[DATE_WID], F.[WEEK_WID], F.[AMT] * D.[RATE] as AMT
			from [DWH].[W_LAC_CF_WEEKLY_BANK_DISCOUNT_RATE_CONFIG_D] D join
				(--Số tiền CK dự kiến * Hệ số setup theo tuần&ngân hàng (master data hệ số tuần theo từng NH) tại tuần dự kiến CK  
				--Dựa vào ngày đến hạn thanh toán để xác định tuần + Tình trạng = "Dự kiến CK"
				select [ESTIMATED_DATE_OF_DISCOUNT] as [DATE_WID], 'W' + cast(datepart(week, [ESTIMATED_DATE_OF_DISCOUNT]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
				from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
				where [DISCOUNT_STATUS] in ('Dự kiến chiết khấu') and [ESTIMATED_DATE_OF_DISCOUNT] is not null
				and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
				group by [ESTIMATED_DATE_OF_DISCOUNT]) F 
			on D.[WEEK_WID] = F.[WEEK_WID]
			where D.[BANK] = 'Techcombank'
			
			union----Tình trạng CT = "chưa CK/BTT"
			select [DUE_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DUE_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Chưa chiết khấu') and [DUE_DATE] is not null
			and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
			group by [DUE_DATE]

			union----Tình trạng CT = "Paid"
			select [DISCOUNT_DATE] as [DATE_WID], 'W' + cast(datepart(week, [DISCOUNT_DATE]) -1 as varchar(10)) as WEEK_WID, isnull(sum([DOCUMENT_AMOUNT]), 0) as AMT
			from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			where [DISCOUNT_STATUS] in ('Paid') and [DISCOUNT_DATE] is not null and [DOCUMENT_AMOUNT] > 0
			and [BANK_DISCOUNT] in ('TECHCOMBANK', 'TEC')
			group by [DISCOUNT_DATE]
		) F,
		 ----Cộng thêm Dự kiến xuất hàng: ( cộng thêm 3.6 - HTTT= "LC")
			(select [STT], [PAYMENT_METHOD], sum([AMOUNT]) as [AMOUNT]
			from [STG].[W_EXE_CF_WEEKLY_EXPECTED_CASH_FLOW_FS]
			where [PAYMENT_METHOD] = 'L/C' and [STT] = '3.6'
			group by [PAYMENT_METHOD],[STT]
		)  D
		
		),
		--5.4 Tổng tiền về trực tiếp (USD)
		CT4 as (
		select *
		from CT2
		union
		select *
		from CT3
		),
		--5.5 Tổng tiền về trực tiếp (VND)
		CT5 as (
		select [DATE_WID], [WEEK_WID], [AMT]
		from CT4
		)
		--IX.5	Techcombank	~~ 5.5.5 (Trên CRQ)
		insert into #W_LAC_CF_WEEKLY_PLAN_F_TMP 
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[AMT] as AMT,
			'N' W_DELETE_FLG,
            NULL W_INTEGRATION_ID,
            DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
            DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT
            ,@v_datasource_num_id W_DATASOURCE_NUM_ID,
            @v_batch_id W_BATCH_ID
		from [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D, 
			CT5 F
		where D.[LV3_CODE] = 'IX.5';

		--UNION ALL
		--SELECT * FROM [DWH].[W_CF_MONTHLY_ACTUAL_F] WHERE DATE_WID LIKE @DATE_WID
		
--FORMULA
		insert into #W_LAC_CF_WEEKLY_PLAN_F_TMP 
		--I		TIỀN VÀ TƯƠNG ĐƯƠNG TIỀN ĐẦU KỲ
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('I.1','I.2','I.3') and D.[LV3_CODE] = 'I'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		
		union --II.7		THU VAY DÀI HẠN
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]) * 0.8, 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('V.2') and D.[LV3_CODE] = 'II.7'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --II.6	THU VAY NGẮN HẠN
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('VII.3') and D.[LV3_CODE] = 'II.6'
		group by [DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --II	THU VAY DÀI HẠN
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('II.1', 'II.2', 'II.3', 'II.4', 'II.5', 'II.6', 'II.7') and D.[LV3_CODE] = 'II'
		group by [DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		
		union --III	CHI HOẠT ĐỘNG KINH DOANH VÀ CHI KHÁC
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('III.1', 'III.2', 'III.3', 'III.4', 'III.5', 'III.6') and D.[LV3_CODE] = 'III'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

--IV
	--IV.1
		union --IV.1.1.1	Saigonbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.4.1') and D.[LV3_CODE] = 'IV.1.1.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --IV.1.1.2	Eximbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.4.2') and D.[LV3_CODE] = 'IV.1.1.2'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --IV.1.1.3	Vietinbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.4.3') and D.[LV3_CODE] = 'IV.1.1.3'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --IV.1.1.4	Maritimebank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.4.4') and D.[LV3_CODE] = 'IV.1.1.4'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --IV.1.1.5	Techcombank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.4.5') and D.[LV3_CODE] = 'IV.1.1.5'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --IV	CHI HOẠT ĐỘNG TÀI CHÍNH
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('IV.1', 'IV.2') and D.[LV3_CODE] = 'IV'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

--V
		union --IV	CHI HOẠT ĐỘNG ĐẦU TƯ
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('V.1', 'V.2') and D.[LV3_CODE] = 'IV'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

--V'
		union --V'	Tổng chi trong kỳ
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('III', 'IV', 'V') and D.[LV3_CODE] = 'V'''
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

--VI.1
		union --VI.1	SỐ DƯ TIỀN GỬI THANH TOÁN CUỐI KỲ
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('I.3', 'II', 'V''') and D.[LV3_CODE] = 'VI.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
--VII
		union --VII.3.6	Tổng các khoản vay
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] = 'III.5' then F.[AMT] * 0.5
						else F.[AMT] end), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('III.1', 'III.2', 'III.3', 'III.4', 'III.5') and D.[LV3_CODE] = 'VII.3.6'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]


		union --VII.4.6	Tổng thu (Trả nợ tối đa)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] = 'II' then F.[AMT]
						else F.[AMT] * (-1) end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('II', 'II.6', 'II.7') and D.[LV3_CODE] = 'VII.4.6'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
	
		union --VII.4.7	Thu từ chiết khấu (trả nợ tối thiểu)
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(F.[AMT],0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('II.5') and D.[LV3_CODE] = 'VII.4.7'

		union --VII.5.1	Saigonbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] = 'VII.4.1' then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.2.1', 'VII.3.1', 'VII.4.1') and D.[LV3_CODE] = 'VII.5.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.5.2	Eximbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] = 'VII.4.2' then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.2.2', 'VII.3.2', 'VII.4.2') and D.[LV3_CODE] = 'VII.5.2'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.5.3	Vietinbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] = 'VII.4.3' then F.[AMT] * (-1)
						else F.[AMT] end), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.2.3', 'VII.3.3', 'VII.4.3') and D.[LV3_CODE] = 'VII.5.3'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.5.4	Maritimebank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] = 'VII.4.4' then F.[AMT] * (-1)
						else F.[AMT] end), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.2.4', 'VII.3.4', 'VII.4.4') and D.[LV3_CODE] = 'VII.5.4'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.5.5	Techcombank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] = 'VII.4.5' then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.2.5', 'VII.3.5', 'VII.4.5') and D.[LV3_CODE] = 'VII.5.5'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.7.1	Saigonbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VII.5.1', 'VII.6.1') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.1.1', 'VII.5.1', 'VII.6.1') and D.[LV3_CODE] = 'VII.7.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.7.2	Eximbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VII.5.2', 'VII.6.2') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.1.2', 'VII.5.2', 'VII.6.2') and D.[LV3_CODE] = 'VII.7.2'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.7.3	Vietinbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VII.5.3', 'VII.6.3') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.1.3', 'VII.5.3', 'VII.6.3') and D.[LV3_CODE] = 'VII.7.3'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.7.4	Maritimebank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VII.5.4', 'VII.6.4') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.1.4', 'VII.5.4', 'VII.6.4') and D.[LV3_CODE] = 'VII.7.4'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII.7.5	Techcombank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VII.5.5', 'VII.6.5') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VII.1.5', 'VII.5.5', 'VII.6.5') and D.[LV3_CODE] = 'VII.7.5'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VII		Vay ngắn hạn
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('VII.1', 'VII.2', 'VII.3', 'VII.4', 'VII.5', 'VII.6', 'VII.7') and D.[LV3_CODE] = 'VII'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
--VIII
	--VIII.5
		union --VIII.5.1	Saigonbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.4.1') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.2.1', 'VIII.3.1', 'VIII.4.1') and D.[LV3_CODE] = 'VIII.5.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII.5.2	Eximbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.4.2') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.2.2', 'VIII.3.2', 'VIII.4.2') and D.[LV3_CODE] = 'VIII.5.2'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII.5.3	Vietinbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.4.3') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.2.3', 'VIII.3.3', 'VIII.4.3') and D.[LV3_CODE] = 'VIII.5.3'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII.5.4	Maritimebank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.4.4') then F.[AMT] * (-1)
						else F.[AMT] end), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.2.4', 'VIII.3.4', 'VIII.4.4') and D.[LV3_CODE] = 'VIII.5.4'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII.5.5	Techcombank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.4.5') then F.[AMT] * (-1)
						else F.[AMT] end), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.2.5', 'VIII.3.5', 'VIII.4.5') and D.[LV3_CODE] = 'VIII.5.5'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

--VIII.6	
		union --VIII.6.1	Saigonbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.5.1') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.1.1', 'VIII.5.1') and D.[LV3_CODE] = 'VIII.6.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII.6.2	Eximbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.5.2') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.1.2', 'VIII.5.2') and D.[LV3_CODE] = 'VIII.6.2'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII.6.3	Vietinbank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.5.3') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.1.3', 'VIII.5.3') and D.[LV3_CODE] = 'VIII.6.3'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII.6.4	Maritimebank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.5.4') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.1.4', 'VIII.5.4') and D.[LV3_CODE] = 'VIII.6.4'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII.6.5	Techcombank
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(case when F.[NO] in ('VIII.5.5') then F.[AMT] * (-1)
						else F.[AMT] end),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('VIII.1.5', 'VIII.5.5') and D.[LV3_CODE] = 'VIII.6.5'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		union --VIII		Vay chiết khấu
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('VIII.1', 'VIII.2', 'VIII.3', 'VIII.4', 'VIII.5', 'VIII.6') and D.[LV3_CODE] = 'VIII'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

----IX	
		union --IX		Doanh số chuyển tiền về trực tiếp
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('IX.1', 'IX.2', 'IX.3', 'IX.4', 'IX.5') and D.[LV3_CODE] = 'IX'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

--X
	--X.1
		union --X.1.1		Doanh số chuyển tiền về trực tiếp trong tháng
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('IX.1') and D.[LV3_CODE] = 'X.1.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

	--X.2
		union --X.2.1		Doanh số chuyển tiền về trực tiếp trong tháng
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('IX.2') and D.[LV3_CODE] = 'X.2.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

		--X.3
		union --X.3.1		Doanh số chuyển tiền về trực tiếp trong tháng
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('IX.3') and D.[LV3_CODE] = 'X.3.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

	--X.4
		union --X.4.1		Doanh số chuyển tiền về trực tiếp trong tháng
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]), 0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('IX.4') and D.[LV3_CODE] = 'X.4.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

	--X.5
		union --X.5.1		Doanh số chuyển tiền về trực tiếp trong tháng
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[NO] in ('IX.5') and D.[LV3_CODE] = 'X.5.1'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]

--X	
		union --X		Điều kiện tín dụng - tháng
		select convert(bigint, convert(varchar, F.[DATE_WID], 112)) as [DATE_WID],
			D.[ROW_WID] as [WEEKLY_REPORTING_LINE_KEY],
			F.[WEEK_WID],
			D.[LV3_CODE] as [NO],
			D.[STT] as [STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			isnull(sum(F.[AMT]),0) as [AMT],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		from #W_LAC_CF_WEEKLY_PLAN_F_TMP F, [DWH].[W_LAC_CF_WEEKLY_REPORTING_LINE_D] D
		where F.[LV1_CODE] in ('X.1', 'X.2', 'X.3', 'X.4', 'X.5') and D.[LV3_CODE] = 'X'
		group by F.[DATE_WID],
			D.[ROW_WID],
			F.[WEEK_WID],
			D.[LV3_CODE],
			D.[STT],
			D.[LV1_CODE],
			D.[LV2_CODE],
			D.[LV3_CODE],
			F.[W_DELETE_FLG],
			F.[W_INTEGRATION_ID],
			F.[W_INSERT_DT],
			F.[W_UPDATE_DT],
			F.[W_DATASOURCE_NUM_ID],
			F.[W_BATCH_ID]
		;
--format week_wid
		update #W_LAC_CF_WEEKLY_PLAN_F_TMP 
		set [WEEK_WID]= case when cast([WEEK_WID] as bigint) > 0 and cast([WEEK_WID] as bigint) < 10 then ('W0' + cast([WEEK_WID] as varchar(10)))
						when cast([WEEK_WID] as bigint) >= 10 then ('W' + cast([WEEK_WID] as varchar(10)))
						end 
		where [WEEK_WID] <> '0' and [WEEK_WID] not like 'W%'


--		WITH CTE2 AS
--		(
--		SELECT
--		F1.[DATE_WID],
--		F.[ROW_WID] [RL_WID],
--		F.[STT],
--		F.[REPORT_VIEW],
--		F.[LV1_CODE],
--		F.[LV2_CODE],
--		F.[LV3_CODE],
--		F.[LV4_CODE],
--		F.[LV5_CODE],
--		F1.[AMT]*F.[FORMULA_SIGN] [AMT],
--		F1.[W_DELETE_FLG],
--		F1.[W_INTEGRATION_ID],
--		F1.[W_INSERT_DT],
--		F1.[W_UPDATE_DT],
--		F1.[W_DATASOURCE_NUM_ID],
--		F1.[W_BATCH_ID]
--		FROM [DWH].[W_LAC_CF_D_FORMULA] F JOIN   #W_LAC_CF_F_TMP   F1 ON CASE WHEN F.LINE_LEVEL = 'L1' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV1_CODE)
--											WHEN F.LINE_LEVEL = 'L2' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV2_CODE)
--											WHEN F.LINE_LEVEL = 'L3' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV3_CODE)
--											WHEN F.LINE_LEVEL = 'L4' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV4_CODE)
--											WHEN F.LINE_LEVEL = 'L5' THEN CONCAT(F1.REPORT_VIEW,'-',F1.LV5_CODE) END = F.CODE
--		)
--		insert into #W_LAC_CF_F_TMP
--		SELECT * FROM CTE2



		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		SET @v_script = N'DELETE A FROM ' +@v_tgt_table_schema+'.'+ @V_tgt_table + ' A WHERE A.DATE_WID LIKE'''+@DATE_WID + ''''
		EXEC sp_executesql @v_script;
		


		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CF_WEEKLY_REPORTING_LINE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CF_WEEKLY_REPORTING_LINE_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CF_WEEKLY_REPORTING_LINE_D',
	@V_src_table nvarchar(100) = 'W_LAC_CF_WEEKLY_REPORTING_LINE_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				[STT],
				[LV1_CODE],
				[LV1_NAME],
				[LV2_CODE],
				[LV2_NAME],
				[LV3_CODE],
				[LV3_NAME],
				[FORMULA],
			    'N' as W_DELETE_FLG,
			    CONCAT([LV1_CODE],'~',[LV2_CODE],'~',[LV3_CODE]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    @v_batch_id W_BATCH_ID,
			    row_number() over (partition by CONCAT([LV1_CODE],'~',[LV2_CODE],'~',[LV3_CODE]) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_LAC_CF_WEEKLY_REPORTING_LINE_DS]
		)
		insert into #W_LAC_CF_WEEKLY_REPORTING_LINE_D_TMP
		select
			[STT],
			[LV1_CODE],
			[LV1_NAME],
			[LV2_CODE],
			[LV2_NAME],
			[LV3_CODE],
			[LV3_NAME],
			[FORMULA],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_CUSTOMER_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_CUSTOMER_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_CUSTOMER_D',
	@V_src_table nvarchar(100) = 'W_LAC_CUSTOMER_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRIM([Customer Code]) [CUSTOMER_CODE],
				trim([Customer Name]) [CUSTOMER_NAME],
				TRIM([Customer Group]) [CUSTOMER_GROUP],
				[Created Date] [CREATED_DATE],
				trim([Source]) [SOURCE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    TRIM([Customer Code]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by TRIM([Customer Code]) order by [Created Date] desc) as ROW_NUM
			FROM [STG].[W_LAC_CUSTOMER_DS]
		)
		insert into #W_LAC_CUSTOMER_D_TMP
		select
			[CUSTOMER_CODE],
			[CUSTOMER_NAME],
			[CUSTOMER_GROUP],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_GL_ACCOUNT_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_GL_ACCOUNT_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_GL_ACCOUNT_D',
	@V_src_table nvarchar(100) = 'W_LAC_GL_ACCOUNT_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				trim([Account Code]) [ACCOUNT_CODE],
				trim([Account Name]) [ACCOUNT_NAME],
				trim([Account Description]) [ACCOUNT_DESCRIPTION],
				trim([Account Type]) [ACCOUNT_TYPE],
				trim([Parent Account]) [PARENT_ACCOUNT],
				[Created Date] [CREATED_DATE],
				trim([SOURCE]) [SOURCE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    TRIM([Account Code]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by TRIM([Account Code]) order by [Created Date] desc) as ROW_NUM
			FROM [STG].[W_LAC_GL_ACCOUNT_DS]
		)
		insert into #W_LAC_GL_ACCOUNT_D_TMP
		select
			[ACCOUNT_CODE],
			[ACCOUNT_NAME],
			[ACCOUNT_DESCRIPTION],
			[ACCOUNT_TYPE],
			[PARENT_ACCOUNT],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_GL_BALANCE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_GL_BALANCE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_GL_BALANCE_F',
	@V_src_table nvarchar(100) = 'W_LAC_GL_DATA_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				[DATE_WID],
				[ACCOUNTID],
				[OFFSETACCTID],
				[OBJECTID],
				SUM(DR) DR,
				SUM(DR2) DR2, 
				SUM(CR) CR, 
				SUM(CR2) CR2,
				SUM(SUM(DR)-SUM(CR)) OVER(PARTITION BY [ACCOUNTID],[OFFSETACCTID],[OBJECTID] ORDER BY [DATE_WID]) - (SUM(DR)-SUM(CR)) OPENING,
				SUM(SUM(DR2)-SUM(CR2)) OVER(PARTITION BY [ACCOUNTID],[OFFSETACCTID],[OBJECTID] ORDER BY [DATE_WID]) - (SUM(DR2)-SUM(CR2)) OPENING2,
				SUM(SUM(DR)-SUM(CR)) OVER(PARTITION BY [ACCOUNTID],[OFFSETACCTID],[OBJECTID] ORDER BY [DATE_WID]) CLOSING,
				SUM(SUM(DR2)-SUM(CR2)) OVER(PARTITION BY [ACCOUNTID],[OFFSETACCTID],[OBJECTID] ORDER BY [DATE_WID]) CLOSING2,
			    '0' W_DELETE_FLG,
				CONCAT([DATE_WID],'~',[ACCOUNTID],'~',[OFFSETACCTID],'~',[OBJECTID]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT([DATE_WID],'~',[ACCOUNTID],'~',[OFFSETACCTID],'~',[OBJECTID]) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM (
				  SELECT [DATE_WID],[ACCOUNTID],[OFFSETACCTID],[OBJECTID],SUM([TRANSAMT]) DR
					  ,SUM([TRANSAMT2]) DR2,0 CR, 0 CR2 FROM  [DWH].[W_LAC_GL_DATA_F] WHERE [CREDITING] = 0 and W_DELETE_FLG ='0'  GROUP BY [DATE_WID],[ACCOUNTID],[OFFSETACCTID],[OBJECTID]
				  UNION ALL
				  SELECT [DATE_WID],[ACCOUNTID],[OFFSETACCTID],[OBJECTID],0 DR
					  ,0 DR2,-SUM([TRANSAMT]) CR,-SUM([TRANSAMT2])  CR2 FROM  [DWH].[W_LAC_GL_DATA_F] WHERE [CREDITING] = 1 and W_DELETE_FLG ='0' GROUP BY [DATE_WID],[ACCOUNTID],[OFFSETACCTID],[OBJECTID]
				) A 
				GROUP BY [DATE_WID],[ACCOUNTID],[OFFSETACCTID],[OBJECTID] 
			
		)
		insert into #W_LAC_GL_BALANCE_F_TMP 
		select
			DATE_WID,
			ACCOUNTID,
			OFFSETACCTID,
			OBJECTID,
			DR,
			DR2,
			CR,
			CR2,
			OPENING,
			OPENING2,
			CLOSING,
			CLOSING2,
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''1'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;

		
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		


		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_GL_DATA_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_GL_DATA_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_GL_DATA_F',
	@V_src_table nvarchar(100) = 'W_LAC_GL_DATA_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT 
				FORMAT(cast(A.[TransDate] as date),'yyyyMMdd') [DATE_WID],
				TRIM(A.[RecID]) [RECID],
				TRIM(A.[AccountID]) [ACCOUNTID],
				try_cast(A.[PostedOn] as datetime) [POSTEDON],
				try_cast(A.[TransDate] as datetime) [TRANSDATE],
				TRIM(A.[TransType]) [TRANSTYPE],
				TRIM(A.[TransNo]) [TRANSNO],
				TRIM(A.[Memo]) [MEMO],
				TRIM(A.[CurrencyID]) [CURRENCYID],
				try_cast(A.[ExchangeRate] as float) [EXCHANGERATE],
				try_cast(A.[Crediting] as bit) [CREDITING],
				TRIM(A.[OffsetAcctID]) [OFFSETACCTID],
				TRIM(A.[DIM1]) [DIM1],
				TRIM(A.[DIM2]) [DIM2],
				TRIM(A.[DIM3]) [DIM3],
				try_cast(A.[TransAmt]  as float) [TRANSAMT],
				try_cast(A.[TransAmt2] as float)  [TRANSAMT2],
				CASE WHEN TRIM(A.[ObjectID]) = 'NULL' THEN NULL ELSE  TRIM(A.[ObjectID]) END [OBJECTID],
				TRIM(A.[ObjectType]) [OBJECTTYPE],
				TRIM(A.[ProjectID]) [PROJECTID],
				TRIM(A.[ObjectName]) [OBJECTNAME],
			    trim(a.[Source]) [SOURCE],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
			    isnull(try_cast(a.[Delete Flag] as bit),0) W_DELETE_FLG,
				TRIM(A.[RecID]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY TRIM(A.[RecID]) ORDER BY a.[w_file_name] DESC) AS ROW_NUM
			FROM [STG].[W_LAC_GL_DATA_FS] A
		)
		insert into #W_LAC_GL_DATA_F_TMP 
		select
			[DATE_WID],
			[RECID],
			[ACCOUNTID],
			[POSTEDON],
			[TRANSDATE],
			[TRANSTYPE],
			[TRANSNO],
			[MEMO],
			[CURRENCYID],
			[EXCHANGERATE],
			[CREDITING],
			[OFFSETACCTID],
			[DIM1],
			[DIM2],
			[DIM3],
			[TRANSAMT],
			[TRANSAMT2],
			[OBJECTID],
			[OBJECTTYPE],
			[PROJECTID],
			[OBJECTNAME],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from ' + @v_tgt_table_schema+'.'+ @V_tgt_table +' tar'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_LAC_SUPPLIER_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_LAC_SUPPLIER_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_LAC_SUPPLIER_D',
	@V_src_table nvarchar(100) = 'W_LAC_SUPPLIER_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='LAC',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRIM([Supplier Code]) [SUPPLIER_CODE],
				trim([Supplier Name]) SUPPLIER_NAME,
				TRIM([Supplier Group]) [SUPPLIER_GROUP],
				[Created Date] [CREATED_DATE],
				trim([SOURCE]) [SOURCE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    TRIM([Supplier Code]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by TRIM([Supplier Code]) order by [Created Date] desc) as ROW_NUM
			FROM [STG].[W_LAC_SUPPLIER_DS]
		)
		insert into #W_LAC_SUPPLIER_D_TMP
		select
			[SUPPLIER_CODE],
			SUPPLIER_NAME,
			[SUPPLIER_GROUP],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MDK_AMAZON_SALE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MDK_AMAZON_SALE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MDK_AMAZON_SALE_F',
	@V_src_table nvarchar(100) = 'W_MDK_AMAZON_SALE_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MDE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				A.[DATE_WID],
				ISNULL(CN.ROW_WID,0) [CHANNEL_WID],
				ISNULL(VR.ROW_WID,0) [VARIANT_WID],
				A.[STORE_CODE],
				A.[STORE_NAME],
				A.[POSTED_DATE],
				A.[PERIOD],
				A.[ORDER_ID],
				A.[SKU_AMZ],
				A.[SKU_MDK],
				A.[AMT],
				A.[QTY],
				A.[POS_HRV],
				A.[REFUND_QTY],
				A.[REFUND_AMT],
				A.[ACT_QTY],
				A.[ACT_AMOUNT],
			    'N' W_DELETE_FLG,
				CONCAT(A.[DATE_WID],'~',A.[STORE_CODE],'~',A.[STORE_NAME],'~',A.[ORDER_ID]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				rank() OVER (PARTITION BY CONCAT(A.[DATE_WID],'~',A.[STORE_CODE],'~',A.[STORE_NAME],'~',A.[ORDER_ID]) ORDER BY [w_file_name] DESC) AS ROW_NUM
			FROM
			(
			SELECT
			FORMAT(TRY_CAST([POSTED_DATE] AS DATETIME),'yyyyMMdd') [DATE_WID],
			TRIM([STORE CODE]) [STORE_CODE],
			TRIM([STORE NAME]) [STORE_NAME],
			TRY_CAST([POSTED_DATE] AS DATETIME) [POSTED_DATE],
			TRIM([PERIOD]) [PERIOD],
			TRIM([ORDER_ID]) [ORDER_ID],
			TRIM([SKU_AMZ]) [SKU_AMZ],
			trim([SKU_MDK]) [SKU_MDK],
			ISNULL(TRY_CAST([AMT] AS FLOAT),0) [AMT],
			ISNULL(CAST(TRY_CAST([QTY] AS FLOAT) AS INT),0) [QTY],
			trim([POS HRV]) [POS_HRV],
			ISNULL(CAST(TRY_CAST([REFUND QTY] AS FLOAT) AS INT),0) [REFUND_QTY],
			ISNULL(TRY_CAST([REFUND AMT] AS FLOAT),0) [REFUND_AMT],
			ISNULL(CAST(TRY_CAST([ACT QTY] AS FLOAT) AS INT),0) [ACT_QTY],
			ISNULL(TRY_CAST([ACT AMOUNT] AS FLOAT),0) [ACT_AMOUNT],
			[w_file_name],
			[w_batch_id],
			[w_insert_date]
			FROM [STG].[W_MDK_AMAZON_SALE_FS]
			) A 
			LEFT JOIN (SELECT MIN([ROW_WID]) [ROW_WID],[CHANNEL_NAME] FROM [DWH].[W_HAR_CHANNEL_D] GROUP BY [CHANNEL_NAME]) CN ON
						 A.[STORE_NAME] = CN.[CHANNEL_NAME]
			LEFT JOIN [DWH].[W_HAR_VARIANTS_D] VR ON
						 A.[SKU_MDK] = VR.[SKU]
	
				
		)
		insert into #W_MDK_AMAZON_SALE_F_TMP
		select
			[DATE_WID],
			[CHANNEL_WID],
			[VARIANT_WID],
			[STORE_CODE],
			[STORE_NAME],
			[POSTED_DATE],
			[PERIOD],
			[ORDER_ID],
			[SKU_AMZ],
			[SKU_MDK],
			[AMT],
			[QTY],
			[POS_HRV],
			[REFUND_QTY],
			[REFUND_AMT],
			[ACT_QTY],
			[ACT_AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		
		SET @v_script = 'delete tar from '+@v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT W_INTEGRATION_ID FROM ' + @v_tmp_dwh_table +') src on tar.W_INTEGRATION_ID = src.W_INTEGRATION_ID'
		EXEC sp_executesql @v_script;
		
		
		/*
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;
		*/
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table
				EXEC sp_executesql @v_script;


		 update a
		 set
		 a.[CHANNEL_WID]=ISNULL(CN.ROW_WID,0) ,
		 a.[VARIANT_WID]=ISNULL(VR.ROW_WID,0)
 
		 from [DWH].[W_MDK_AMAZON_SALE_F] A 
					LEFT JOIN (SELECT MIN([ROW_WID]) [ROW_WID],[CHANNEL_NAME] FROM [DWH].[W_HAR_CHANNEL_D] GROUP BY [CHANNEL_NAME]) CN ON
						 A.[STORE_NAME] = CN.[CHANNEL_NAME]
					LEFT JOIN [DWH].[W_HAR_VARIANTS_D] VR ON
								 A.[SKU_MDK] = VR.[SKU]


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MDK_AOP_SALE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MDK_AOP_SALE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MDK_AOP_SALE_F',
	@V_src_table nvarchar(100) = 'W_MDK_AOP_SALE_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MDE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				A.[DATE_WID],
				COALESCE(CN.ROW_WID,SC.ROW_WID,0) CHANNEL_WID,
				A.[STORE_CODE],
				A.[STORE_NAME],
				A.[UOM],
				A.[QUANTITY],
				A.[CURRENCY],
				A.[AMOUNT],
			    'N' W_DELETE_FLG,
				CONCAT(A.[DATE_WID],'~',UPPER(ISNULL(CAST(A.[STORE_CODE] AS NVARCHAR(MAX)),A.[STORE_NAME]))) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(A.[DATE_WID],'~',UPPER(ISNULL(CAST(A.[STORE_CODE] AS NVARCHAR(MAX)),A.[STORE_NAME]))) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM (
			SELECT
				COALESCE(A.[DATE_WID],B.[DATE_WID]) [DATE_WID]
				,COALESCE(A.[Store Code],B.[Store Code]) [STORE_CODE]
				,COALESCE(A.[Store Name],B.[Store Name]) [STORE_NAME]
				,A.[UOM]
				,ISNULL(A.[Quantity],0) [QUANTITY]
				,B.[Currency] [CURRENCY]
				,ISNULL(B.[Amount],0) [AMOUNT]
				,COALESCE(A.[w_batch_id],B.[w_batch_id]) [W_BATCH_ID]
				FROM(
				SELECT 
					   format(cast(concat(trim([Year]),'-',[Month],'-01') as datetime),'yyyyMMdd') [DATE_WID]
					  ,cast(try_cast([Store Code] as float) as bigint)  [Store Code]
					  ,trim([Store Name]) [Store Name]
				      ,trim([UOM]) [UOM]
					  ,trim([Quantity]) [Quantity]
				      ,[w_file_name]
				      ,[w_batch_id]
				      ,[w_insert_date]
					  ,row_number() over (partition by trim([Store Code]),trim([Year]),[Month] order by left(right([w_file_name],13),8) desc) rn
				  FROM [STG].[W_MDK_AOP_SALE_QUANTITY_FS]
				
				  UNPIVOT ([Quantity] FOR [Month] IN ([Jan]
				      ,[Feb]
				      ,[Mar]
				      ,[Apr]
				      ,[May]
				      ,[Jun]
				      ,[Jul]
				      ,[Aug]
				      ,[Sep]
				      ,[Oct]
				      ,[Nov]
				      ,[Dec])) AS UnPVT 
				) A FULL OUTER JOIN 
				(
				SELECT
				format(cast(concat(trim([Year]),'-',[Month],'-01') as datetime),'yyyyMMdd') [DATE_WID]
				,cast(try_cast([Store Code] as float) as bigint)  [Store Code]
				,trim([Store Name]) [Store Name]
				,trim([Currency]) [Currency]
				,[Amount]
				,[w_file_name]
				,[w_batch_id]
				,[w_insert_date]
				,row_number() over (partition by trim([Store Code]),trim([Year]),[Month] order by left(right([w_file_name],13),8) desc) rn
				FROM [STG].[W_MDK_AOP_SALE_AMOUNT_FS]
				UNPIVOT (Amount FOR [Month] IN ([Jan]
				      ,[Feb]
				      ,[Mar]
				      ,[Apr]
				      ,[May]
				      ,[Jun]
				      ,[Jul]
				      ,[Aug]
				      ,[Sep]
				      ,[Oct]
				      ,[Nov]
				      ,[Dec])) AS UnPVT 
				) B ON
				A.[DATE_WID] = B.[DATE_WID]
				AND A.[Store Code] = B.[Store Code]
				AND A.RN = 1
				AND B.RN = 1
			)
			A 
			LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON
			A.[STORE_CODE] = isnull(CN.[LOCATION_ID],0)
			and A.[STORE_CODE] IS not NULL
			
			LEFT JOIN (SELECT MIN(B.ROW_WID) ROW_WID,[STORENAME] FROM [DWH].[W_MDK_SUBCHANNEL_MAPPING_D] A JOIN [DWH].[W_HAR_CHANNEL_D] B ON A.[HARAVAN_STORENAME] = B.CHANNEL_CODE GROUP BY [STORENAME]) SC ON
			A.[STORE_NAME] = SC.[STORENAME]
			AND  A.[STORE_CODE] IS NULL
			/*
			LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON
			((case when A.[STORE_CODE] IS NULL THEN isnull(CN.[LOCATION_ID],0)  ELSE A.[STORE_CODE] END)  = isnull(CN.[LOCATION_ID],0))
			AND ((CASE WHEN A.[STORE_CODE] IS NULL  THEN   A.[STORE_NAME] ELSE CN.[CHANNEL_CODE] END) = CN.[CHANNEL_CODE])
			*/
	
				
		)
		insert into #W_MDK_AOP_SALE_F_TMP
		select
			[DATE_WID],
			[CHANNEL_WID],
			[STORE_CODE],
			[STORE_NAME],
			[UOM],
			[QUANTITY],
			[CURRENCY],
			[AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+@v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT[DATE_WID] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID'
		EXEC sp_executesql @v_script;
		

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		update a 
		set
		a.CHANNEL_WID = COALESCE(CN.ROW_WID,SC.ROW_WID,0)
		from [DWH].[W_MDK_AOP_SALE_F] A 
					LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON
					A.[STORE_CODE] = isnull(CN.[LOCATION_ID],0)
					and A.[STORE_CODE] IS not NULL
			
					LEFT JOIN (SELECT MIN(B.ROW_WID) ROW_WID,[STORENAME] FROM [DWH].[W_MDK_SUBCHANNEL_MAPPING_D] A JOIN [DWH].[W_HAR_CHANNEL_D] B ON A.[HARAVAN_STORENAME] = B.CHANNEL_CODE GROUP BY [STORENAME]) SC ON
					A.[STORE_NAME] = SC.[STORENAME]
					AND  A.[STORE_CODE] IS NULL

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MDK_COOP_SALE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MDK_COOP_SALE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MDK_COOP_SALE_F',
	@V_src_table nvarchar(100) = 'W_MDK_COOP_SALE_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MDE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				A.[DATE_WID],
				ISNULL(CN.ROW_WID,0) CHANNEL_WID,
				A.[STORE_CODE],
				A.[STORE_NAME],
				A.[QUANTITY],
				A.[AMOUNT],
			    'N' W_DELETE_FLG,
				CONCAT(A.[DATE_WID],'~',UPPER(ISNULL(CAST(A.[STORE_CODE] AS VARCHAR(MAX)),A.[STORE_NAME]))) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(A.[DATE_WID],'~',UPPER(ISNULL(CAST(A.[STORE_CODE] AS VARCHAR(MAX)),A.[STORE_NAME]))) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM (
			SELECT
				COALESCE(A.[DATE_WID],B.[DATE_WID]) [DATE_WID]
				,COALESCE(A.[Store Code],B.[Store Code]) [STORE_CODE]
				,COALESCE(A.[Store Name],B.[Store Name]) [STORE_NAME]
				,ISNULL(A.[Quantity],0) [QUANTITY]
				,ISNULL(B.[Amount],0) [AMOUNT]
				,COALESCE(A.[w_batch_id],B.[w_batch_id]) [W_BATCH_ID]
				FROM(
				SELECT 
					   format(cast(concat(trim([Year]),'-',[Month],'-01') as datetime),'yyyyMMdd') [DATE_WID]
					  ,cast(try_cast([Store Code] as float) as bigint)  [Store Code]
					  ,trim([Store Name]) [Store Name]
					  ,TRY_CAST(TRY_CAST(trim([Quantity]) AS FLOAT) AS INT) [Quantity]
				      ,[w_file_name]
				      ,[w_batch_id]
				      ,[w_insert_date]
					  ,row_number() over (partition by trim([Store Code]),trim([Year]),[Month] order by [w_file_name] desc) rn
				  FROM [STG].[W_MDK_COOP_SALE_QUANTITY_FS]
				
				  UNPIVOT ([Quantity] FOR [Month] IN ([Jan]
				      ,[Feb]
				      ,[Mar]
				      ,[Apr]
				      ,[May]
				      ,[Jun]
				      ,[Jul]
				      ,[Aug]
				      ,[Sep]
				      ,[Oct]
				      ,[Nov]
				      ,[Dec])) AS UnPVT 
				) A FULL OUTER JOIN 
				(
				SELECT
				format(cast(concat(trim([Year]),'-',[Month],'-01') as datetime),'yyyyMMdd') [DATE_WID]
				,cast(try_cast([Store Code] as float) as bigint)  [Store Code]
				,trim([Store Name]) [Store Name]
				,[Amount]
				,[w_file_name]
				,[w_batch_id]
				,[w_insert_date]
				,row_number() over (partition by trim([Store Code]),trim([Year]),[Month] order by [w_file_name] desc) rn
				FROM [STG].[W_MDK_COOP_SALE_AMOUNT_FS]
				UNPIVOT (Amount FOR [Month] IN ([Jan]
				      ,[Feb]
				      ,[Mar]
				      ,[Apr]
				      ,[May]
				      ,[Jun]
				      ,[Jul]
				      ,[Aug]
				      ,[Sep]
				      ,[Oct]
				      ,[Nov]
				      ,[Dec])) AS UnPVT 
				) B ON
				A.[DATE_WID] = B.[DATE_WID]
				AND A.[Store Code] = B.[Store Code]
				AND A.RN = 1
				AND B.RN = 1
			)
			A 
			LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON
			((case when A.[STORE_CODE] IS NULL THEN isnull(CN.[LOCATION_ID],0)  ELSE A.[STORE_CODE] END)  = isnull(CN.[LOCATION_ID],0))
			AND ((CASE WHEN A.[STORE_CODE] IS NULL  THEN   A.[STORE_NAME] ELSE CN.[CHANNEL_CODE] END) = CN.[CHANNEL_CODE])
	
				
		)
		insert into #W_MDK_COOP_SALE_F_TMP
		select
			[DATE_WID],
			[CHANNEL_WID],
			[STORE_CODE],
			[STORE_NAME],
			[QUANTITY],
			[AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+@v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT[DATE_WID] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID'
		EXEC sp_executesql @v_script;
		

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		update a 
		set
		a.[CHANNEL_WID] = ISNULL(CN.ROW_WID,0)
		from
		[DWH].[W_MDK_COOP_SALE_F] A 
					LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON
					((case when A.[STORE_CODE] IS NULL THEN isnull(CN.[LOCATION_ID],0)  ELSE A.[STORE_CODE] END)  = isnull(CN.[LOCATION_ID],0))
					AND ((CASE WHEN A.[STORE_CODE] IS NULL  THEN   A.[STORE_NAME] ELSE CN.[CHANNEL_CODE] END) = CN.[CHANNEL_CODE])

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MDK_PAYMENT_METHOD_MAPPING_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MDK_PAYMENT_METHOD_MAPPING_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MDK_PAYMENT_METHOD_MAPPING_D',
	@V_src_table nvarchar(100) = 'W_MDK_PAYMENT_METHOD_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MDE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				trim([Payment Group]) [PAYMENT_GROUP],
				trim([Payment Method]) [PAYMENT_METHOD],
				trim([Payment Name]) [PAYMENT_NAME],
			    'N' as W_DELETE_FLG,
			    trim([Payment Name]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by trim([Payment Name]) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_MDK_PAYMENT_METHOD_DS]
		)
		insert into #W_MDK_PAYMENT_METHOD_MAPPING_D_TMP
		select
			[PAYMENT_GROUP],
			[PAYMENT_METHOD],
			[PAYMENT_NAME],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MDK_PRODUCT_MAPPING_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MDK_PRODUCT_MAPPING_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MDK_PRODUCT_MAPPING_D',
	@V_src_table nvarchar(100) = 'W_MDK_PRODUCT_MAPPING_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MDE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRIM([Version_Code]) [VERSION_CODE],
				TRIM([Barcode]) [BARCODE],
				TRIM([Parent_Skus]) [PARENT_SKUS],
				TRIM([Season]) [SEASON],
				TRY_CAST([Year] AS INT) [YEAR],
				TRIM([Line]) [LINE],
				TRIM([Dòng hàng_2021]) [STYLE],
				TRIM([Gender]) [GENDER],
				TRIM([Chủng loại upload HRV]) [TYPE],
				TRIM([Category_New]) [CATEGORY],
				TRIM([Subcate_2021]) [SUBCATE],
				TRIM([Material]) [MATERIAL],
				TRIM([Size]) [SIZE],
				TRIM([Color name]) [COLOR_NAME],
				TRIM([Color code]) [COLOR_CODE],
				TRIM([Colorgroup]) [COLORGROUP],
				TRIM([Sihouette]) [SIHOUETTE],
				TRY_CAST([Nguyên giá] AS FLOAT) [ORG_PRICE],
				TRY_CAST([Selling_Price] AS FLOAT) [SELLING_PRICE],
				TRY_CAST([Selling_Price_FromDate] AS DATETIME) [SELLING_PRICE_FROMDATE],
				TRIM([Brand]) [BRAND],
				TRIM([Ghi chú]) [NOTE],
			    'N' as W_DELETE_FLG,
			    TRIM([Barcode]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by TRIM([Barcode]) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_MDK_PRODUCT_MAPPING_DS]
		)
		insert into #W_MDK_PRODUCT_MAPPING_D_TMP
		select
			[VERSION_CODE],
			[BARCODE],
			[PARENT_SKUS],
			[SEASON],
			[YEAR],
			[LINE],
			[STYLE],
			[GENDER],
			[TYPE],
			[CATEGORY],
			[SUBCATE],
			[MATERIAL],
			[SIZE],
			[COLOR_NAME],
			[COLOR_CODE],
			[COLORGROUP],
			[SIHOUETTE],
			[ORG_PRICE],
			[SELLING_PRICE],
			[SELLING_PRICE_FROMDATE],
			[BRAND],
			[NOTE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MDK_SALE_TARGET_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MDK_SALE_TARGET_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MDK_SALE_TARGET_F',
	@V_src_table nvarchar(100) = 'W_MDK_SALE_TARGET_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MDE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				A.[DATE_WID],
				COALESCE(CN.ROW_WID,SC.ROW_WID,0) CHANNEL_WID,
				A.[STORE_CODE],
				A.[STORE_NAME],
				A.[UOM],
				A.[QUANTITY],
				A.[CURRENCY],
				A.[AMOUNT],
			    'N' W_DELETE_FLG,
				CONCAT(A.[DATE_WID],'~',UPPER(ISNULL(CAST(A.[STORE_CODE] AS NVARCHAR(MAX)),A.[STORE_NAME]))) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(A.[DATE_WID],'~',UPPER(ISNULL(CAST(A.[STORE_CODE] AS NVARCHAR(MAX)),A.[STORE_NAME]))) ORDER BY (SELECT NULL) DESC) AS ROW_NUM
			FROM (
			SELECT
				COALESCE(A.[DATE_WID],B.[DATE_WID]) [DATE_WID]
				,COALESCE(A.[Store Code],B.[Store Code]) [STORE_CODE]
				,COALESCE(A.[Store Name],B.[Store Name]) [STORE_NAME]
				,A.[UOM]
				,ISNULL(A.[Quantity],0) [QUANTITY]
				,B.[Currency] [CURRENCY]
				,ISNULL(B.[Amount],0) [AMOUNT]
				,COALESCE(A.[w_batch_id],B.[w_batch_id]) [W_BATCH_ID]
				FROM(
				SELECT 
					   format(cast(concat(trim([Year]),'-',[Month],'-01') as datetime),'yyyyMMdd') [DATE_WID]
					  ,cast(try_cast([Store Code] as float) as bigint)  [Store Code]
					  ,trim([Store Name]) [Store Name]
				      ,trim([UOM]) [UOM]
					  ,trim([Quantity]) [Quantity]
				      ,[w_file_name]
				      ,[w_batch_id]
				      ,[w_insert_date]
					  ,row_number() over (partition by trim([Store Code]),trim([Year]),[Month] order by left(right([w_file_name],13),8) desc) rn
				  FROM [STG].[W_MDK_SALE_TARGET_QUANTITY_FS]
				
				  UNPIVOT ([Quantity] FOR [Month] IN ([Jan]
				      ,[Feb]
				      ,[Mar]
				      ,[Apr]
				      ,[May]
				      ,[Jun]
				      ,[Jul]
				      ,[Aug]
				      ,[Sep]
				      ,[Oct]
				      ,[Nov]
				      ,[Dec])) AS UnPVT 
				) A FULL OUTER JOIN 
				(
				SELECT
				format(cast(concat(trim([Year]),'-',[Month],'-01') as datetime),'yyyyMMdd') [DATE_WID]
				,cast(try_cast([Store Code] as float) as bigint)  [Store Code]
				,trim([Store Name]) [Store Name]
				,trim([Currency]) [Currency]
				,[Amount]
				,[w_file_name]
				,[w_batch_id]
				,[w_insert_date]
				,row_number() over (partition by trim([Store Code]),trim([Year]),[Month] order by left(right([w_file_name],13),8) desc) rn
				FROM [STG].[W_MDK_SALE_TARGET_AMOUNT_FS]
				UNPIVOT (Amount FOR [Month] IN ([Jan]
				      ,[Feb]
				      ,[Mar]
				      ,[Apr]
				      ,[May]
				      ,[Jun]
				      ,[Jul]
				      ,[Aug]
				      ,[Sep]
				      ,[Oct]
				      ,[Nov]
				      ,[Dec])) AS UnPVT 
				) B ON
				A.[DATE_WID] = B.[DATE_WID]
				AND A.[Store Code] = B.[Store Code]
				AND A.RN = 1
				AND B.RN = 1
			)
			A 
			LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON
			A.[STORE_CODE] = isnull(CN.[LOCATION_ID],0)
			and A.[STORE_CODE] IS not NULL
			
			LEFT JOIN (SELECT MIN(B.ROW_WID) ROW_WID,[STORENAME] FROM [DWH].[W_MDK_SUBCHANNEL_MAPPING_D] A JOIN [DWH].[W_HAR_CHANNEL_D] B ON A.[HARAVAN_STORENAME] = B.CHANNEL_CODE GROUP BY [STORENAME]) SC ON
			A.[STORE_NAME] = SC.[STORENAME]
			AND  A.[STORE_CODE] IS NULL
			/*
			LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON
			((case when A.[STORE_CODE] IS NULL THEN isnull(CN.[LOCATION_ID],0)  ELSE A.[STORE_CODE] END)  = isnull(CN.[LOCATION_ID],0))
			AND ((CASE WHEN A.[STORE_CODE] IS NULL  THEN   A.[STORE_NAME] ELSE CN.[CHANNEL_CODE] END) = CN.[CHANNEL_CODE])
			*/
				
		)
		insert into #W_MDK_SALE_TARGET_F_TMP
		select
			[DATE_WID],
			[CHANNEL_WID],
			[STORE_CODE],
			[STORE_NAME],
			[UOM],
			[QUANTITY],
			[CURRENCY],
			[AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+@v_tgt_table_schema+'.'+ @V_tgt_table +' tar inner join (SELECT DISTINCT[DATE_WID] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID'
		EXEC sp_executesql @v_script;

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		
		 update A set 
		 a.CHANNEL_WID = COALESCE(CN.ROW_WID,SC.ROW_WID,0) 
		 from
		 [DWH].[W_MDK_SALE_TARGET_F] A 
					LEFT JOIN [DWH].[W_HAR_CHANNEL_D] CN ON
					A.[STORE_CODE] = isnull(CN.[LOCATION_ID],0)
					and A.[STORE_CODE] IS not NULL
			
					LEFT JOIN (SELECT MIN(B.ROW_WID) ROW_WID,[STORENAME] FROM [DWH].[W_MDK_SUBCHANNEL_MAPPING_D] A JOIN [DWH].[W_HAR_CHANNEL_D] B ON A.[HARAVAN_STORENAME] = B.CHANNEL_CODE GROUP BY [STORENAME]) SC ON
					A.[STORE_NAME] = SC.[STORENAME]
					AND  A.[STORE_CODE] IS NULL
		

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MDK_STORE_GFA_STAFF_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MDK_STORE_GFA_STAFF_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MDK_STORE_GFA_STAFF_D',
	@V_src_table nvarchar(100) = 'W_MDK_STORE_GFA_STAFF_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MDE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(B.ROW_WID,0) [CHANNEL_WID],
				trim(A.[Store Code]) [STORE_CODE],
				trim(A.[Store Name]) [STORE_NAME],
				try_cast(A.[GFA m2] as float) [GFA_M2],
				cast(try_cast(A.[Num of Staff] as float) as int) [NUM_OF_STAFF],
			    'N' as W_DELETE_FLG,
			    trim(A.[Store Name]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by trim(A.[Store Name]) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_MDK_STORE_GFA_STAFF_DS] A
			LEFT JOIN [DWH].[W_HAR_CHANNEL_D] B ON trim(A.[Store Name]) = B.[CHANNEL_NAME]
		)
		insert into #W_MDK_STORE_GFA_STAFF_D_TMP
		select
			[CHANNEL_WID],
			[STORE_CODE],
			[STORE_NAME],
			[GFA_M2],
			[NUM_OF_STAFF],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MDK_SUBCHANNEL_MAPPING_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MDK_SUBCHANNEL_MAPPING_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MDK_SUBCHANNEL_MAPPING_D',
	@V_src_table nvarchar(100) = 'W_MDK_SUBCHANNEL_MAPPING_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MDE',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				trim([Haravan_StoreName])[Haravan_StoreName],
				trim([StoreName]) [StoreName],
				trim([SubChannel]) [SubChannel],
				trim([Channel]) [Channel],
			    'N' as W_DELETE_FLG,
			    trim([Haravan_StoreName]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by trim([Haravan_StoreName]) order by (SELECT NULL) desc) as ROW_NUM
			FROM [STG].[W_MDK_SUBCHANNEL_MAPPING_DS]
		)
		insert into #W_MDK_SUBCHANNEL_MAPPING_D_TMP
		select
			[Haravan_StoreName],
			[StoreName],
			[SubChannel],
			[Channel],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_CONTRACT_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_CONTRACT_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_CONTRACT_F',
	@V_src_table nvarchar(100) = 'W_MRP_MD_CONTRACT_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='HAR',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(CAST(A.[Signed Date] AS DATETIME),'yyyyMMdd') DATE_WID,
				ISNULL(KH.ROW_WID,0) [CUSTOMER_WID],
				ISNULL(PM.ROW_WID,0) [PAYMENT_TERM_WID],
				cast(try_cast(A.[Contract Id] as float) as bigint) [CONTRACT_ID],
				trim(A.[Contract Number]) [CONTRACT_NUMBER],
				trim(A.[Customer  Code]) [CUSTOMER_CODE],
				try_cast(A.[Signed Date] as datetime) [SIGNED_DATE],
				trim(A.[Payment Term Code]) [PAYMENT_TERM_CODE],
				trim(A.[Salesman Code]) [SALESMAN_CODE],
				trim(A.[Delivery Type]) [DELIVERY_TYPE],
				trim(A.[Delivery Register]) [DELIVERY_REGISTER],
				try_cast(A.[Start Contract Date] as datetime) [START_CONTRACT_DATE],
				try_cast(A.[Complete  Contract Date] as datetime) [COMPLETE_CONTRACT_DATE],
				trim(A.[Contact Person]) [CONTACT_PERSON],
				trim(A.[Contract Type Code]) [CONTRACT_TYPE_CODE],
				trim(A.[Contract Type Name]) [CONTRACT_TYPE_NAME],
				trim(A.[Contract Type Group]) [CONTRACT_TYPE_GROUP],
				trim(A.[Contract Parent Type Group]) [CONTRACT_PARENT_TYPE_GROUP],
				trim(A.[Production Type]) [PRODUCTION_TYPE],
				trim(A.[Curency]) [CURENCY],
				try_cast(A.[Exchange Rate] as float) [EXCHANGE_RATE],
				cast(try_cast(A.[Quantity] as float) as int) [QUANTITY],
				try_cast(A.[Document Amount] as float) [DOCUMENT_AMOUNT],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
				A.[Source] [SOURCE],
				OD.[PO_ID] [PO_ID],
			    A.[Delete Flag] W_DELETE_FLG,
				CONCAT(trim(A.[Contract Id]),'~',OD.[PO_ID]) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(trim(A.[Contract Id]),'~',OD.[PO_ID]) ORDER BY a.[w_file_name] DESC,try_cast(A.[Created Date] as datetime) DESC) AS ROW_NUM
			FROM [STG].[W_MRP_MD_CONTRACT_FS] A 
			LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] KH ON trim(A.[Customer  Code]) = KH.[CUSTOMER_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_PAYMENT_TERM_D] PM ON trim(A.[Payment Term Code]) = PM.[PAYMENT_TERM_CODE]
			LEFT JOIN (SELECT DISTINCT TRIM([PO ID]) [PO_ID],TRIM([Contract ID]) [CONTRACT_ID],TRIM([Item ID])[ITEM_ID] FROM [STG].[W_MRP_TRX_SALES_ORDER_FS]) OD ON trim(A.[Contract Id]) = OD.[CONTRACT_ID]
		)
		insert into #W_MRP_MD_CONTRACT_F_TMP
		select
			DATE_WID,
			[CUSTOMER_WID],
			[PAYMENT_TERM_WID],
			[CONTRACT_ID],
			[CONTRACT_NUMBER],
			[CUSTOMER_CODE],
			[SIGNED_DATE],
			[PAYMENT_TERM_CODE],
			[SALESMAN_CODE],
			[DELIVERY_TYPE],
			[DELIVERY_REGISTER],
			[START_CONTRACT_DATE],
			[COMPLETE_CONTRACT_DATE],
			[CONTACT_PERSON],
			[CONTRACT_TYPE_CODE],
			[CONTRACT_TYPE_NAME],
			[CONTRACT_TYPE_GROUP],
			[CONTRACT_PARENT_TYPE_GROUP],
			[PRODUCTION_TYPE],
			[CURENCY],
			[EXCHANGE_RATE],
			[QUANTITY],
			[DOCUMENT_AMOUNT],
			[CREATED_DATE],
			[SOURCE],
			[PO_ID],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_CUSTOMER_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_CUSTOMER_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_CUSTOMER_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_CUSTOMER_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				trim([Customer Code]) [CUSTOMER_CODE],
				trim([Customer Name]) [CUSTOMER_NAME],
				trim([Group]) [GROUP],
				trim([Phone]) [PHONE],
				trim([Fax]) [FAX],
				trim([Email]) [EMAIL],
				trim([Brand]) [BRAND],
				trim([Representative]) [REPRESENTATIVE],
				trim([Person Contact]) [PERSON_CONTACT],
				trim([Customer Type]) [CUSTOMER_TYPE],
				trim([Address1]) [ADDRESS1],
				trim([Address2]) [ADDRESS2],
				trim([Country]) [COUNTRY],
				try_cast([Customer Created Date] as datetime) [CUSTOMER_CREATED_DATE],
				trim([Status]) [STATUS],
				try_cast([Created Date] as datetime) [CREATED_DATE],
				trim([Source]) [SOURCE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    trim([Customer Code]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by trim([Customer Code]) order by [w_file_name]desc,try_cast([Created Date] as datetime) desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_CUSTOMER_DS]
		)
		insert into #W_MRP_MD_CUSTOMER_D_TMP
		select
			[CUSTOMER_CODE],
			[CUSTOMER_NAME],
			[GROUP],
			[PHONE],
			[FAX],
			[EMAIL],
			[BRAND],
			[REPRESENTATIVE],
			[PERSON_CONTACT],
			[CUSTOMER_TYPE],
			[ADDRESS1],
			[ADDRESS2],
			[COUNTRY],
			[CUSTOMER_CREATED_DATE],
			[STATUS],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_DEPARTMENT_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_DEPARTMENT_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_DEPARTMENT_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_DEPARTMENT_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(FA.ROW_WID,0) [FACTORY_WID],
				trim(A.[Department Code]) [DEPARTMENT_CODE],
				trim(A.[Department Name]) [DEPARTMENT_NAME],
				trim(A.[LacViet Code]) [LACVIET_CODE],
				trim(A.[Description]) [DESCRIPTION],
				trim(A.[Factory Code]) [FACTORY_CODE],
				isnull(try_cast(A.[Is Line] as bit),0) [IS_LINE],
				isnull(try_cast(A.[Is Plan] as bit),0) [IS_PLAN],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
				trim(A.[Source]) [SOURCE],
			    isnull(try_cast(A.[Delete Flag] as bit),0)  as W_DELETE_FLG,
			    CONCAT(trim(A.[Department Code]),'~',trim(A.[Factory Code])) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CONCAT(trim(A.[Department Code]),'~',trim(A.[Factory Code])) order by a.[w_file_name]desc,try_cast(A.[Created Date] as datetime) desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_DEPARTMENT_DS] A
			LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] FA ON trim(A.[Factory Code]) = FA.[FACTORY_CODE]
			
			UNION ALL
			SELECT
				ISNULL(FA.ROW_WID,0) [FACTORY_WID],
				A.[DEPARTMENT_CODE]	[DEPARTMENT_CODE],
				NULL [DEPARTMENT_NAME],
				NULL [LACVIET_CODE],
				NULL [DESCRIPTION],
				'' [FACTORY_CODE],
				NULL	[IS_LINE],
				NULL	[IS_PLAN],
				NULL	[CREATED_DATE],
				NULL [SOURCE],
			    '0' as W_DELETE_FLG,
			    CONCAT(A.[DEPARTMENT_CODE],'~') W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    @p_batch_id W_BATCH_ID,
			    1 ROW_NUM
			FROM (SELECT DISTINCT trim([Department Code]) [DEPARTMENT_CODE] FROM [STG].[W_MRP_MD_DEPARTMENT_DS] ) A
			LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] FA ON ' ' = FA.[FACTORY_CODE]

			UNION ALL
			SELECT
				ISNULL(ROW_WID,0) [FACTORY_WID],
				''	[DEPARTMENT_CODE],
				NULL [DEPARTMENT_NAME],
				NULL [LACVIET_CODE],
				NULL [DESCRIPTION],
				[FACTORY_CODE],
				NULL	[IS_LINE],
				NULL	[IS_PLAN],
				NULL	[CREATED_DATE],
				NULL [SOURCE],
			    '0' as W_DELETE_FLG,
			    CONCAT('~',[FACTORY_CODE]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    @p_batch_id W_BATCH_ID,
			    1 ROW_NUM
			FROM  [DWH].[W_MRP_MD_FACTORY_D] 



		)
		insert into #W_MRP_MD_DEPARTMENT_D_TMP
		select
			[FACTORY_WID],
			[DEPARTMENT_CODE],
			[DEPARTMENT_NAME],
			[LACVIET_CODE],
			[DESCRIPTION],
			[FACTORY_CODE],
			[IS_LINE],
			[IS_PLAN],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_EXCHANGE_RATE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_EXCHANGE_RATE_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_EXCHANGE_RATE_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_EXCHANGE_RATE_D',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				try_cast([FromDate] as datetime) [FROMDATE],
				TRIM([Currency]) [CURRENCY],
				try_cast([Exchange Rate] as float) [EXCHANGE_RATE],
				try_cast([Created Date] as datetime) [CREATED_DATE],
				trim([Source]) [SOURCE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    CONCAT(case when try_cast([FromDate] as datetime) is null then '19000101' else format(try_cast([FromDate] as datetime),'yyyyMMdd') end,'~',TRIM([Currency])) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CONCAT(case when try_cast([FromDate] as datetime) is null then '19000101' else format(try_cast([FromDate] as datetime),'yyyyMMdd') end,'~',TRIM([Currency])) order by [w_file_name] desc,try_cast([Created Date] as datetime) desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_EXCHANGE_RATE_DS]
		)
		insert into #W_MRP_MD_EXCHANGE_RATE_D_TMP
		select
			[FROMDATE],
			[CURRENCY],
			[EXCHANGE_RATE],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_FACTORY_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_FACTORY_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_FACTORY_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_FACTORY_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		
		DELETE [DWH].[W_MRP_MD_FACTORY_D] WHERE [FACTORY_TYPE] = 'GC';

		WITH CTE as (
			SELECT
				trim([Factory Code]) [FACTORY_CODE],
				'SX' [FACTORY_TYPE],
				trim([Factory Short Name]) [FACTORY_SHORT_NAME],
				trim([Factory Name]) [FACTORY_NAME],
				trim([Factory Address]) [FACTORY_ADDRESS1],
				NULL			  [FACTORY_ADDRESS2],
				trim([Factory Phone]) [FACTORY_PHONE],
				trim([Company Code]) [COMPANY_CODE],
				trim([Company Name]) [COMPANY_NAME],
				trim([Company Address]) [COMPANY_ADDRESS],
				trim([Company Email]) [COMPANY_EMAIL],
				trim([Company Fax]) [COMPANY_FAX],
				NULL [GROUP],
				NULL [COUNTRY],
				try_cast([Created Date] as datetime) [CREATED_DATE],
				trim([Source]) [SOURCE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    trim([Factory Code]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by trim([Factory Code]) order by [w_file_name]desc,try_cast([Created Date] as datetime) desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_FACTORY_DS]

			UNION ALL
			SELECT
				'' [FACTORY_CODE],
				'SX' [FACTORY_TYPE],
				NULL [FACTORY_SHORT_NAME],
				NULL [FACTORY_NAME],
				NULL [FACTORY_ADDRESS1],
				NULL [FACTORY_ADDRESS2],
				NULL [FACTORY_PHONE],
				NULL	[COMPANY_CODE],
				NULL	[COMPANY_NAME],
				NULL	[COMPANY_ADDRESS],
				NULL	[COMPANY_EMAIL],
				NULL		[COMPANY_FAX],
				NULL [GROUP],
				NULL [COUNTRY],
				NULL	[CREATED_DATE],
				NULL	[SOURCE],
			    '0' as W_DELETE_FLG,
			    ''	W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    @v_batch_id W_BATCH_ID,
			    row_number() over (partition by '' order by (SELECT NULL) desc) as ROW_NUM

				UNION ALL

				SELECT distinct 
					  [CUSTOMER_CODE] [FACTORY_CODE]
					  ,'GC' [FACTORY_TYPE]
					  ,[CUSTOMER_NAME] [FACTORY_SHORT_NAME]
					  ,[CUSTOMER_NAME] [FACTORY_NAME]
					  ,[ADDRESS1] [FACTORY_ADDRESS1]
					  ,[ADDRESS2] [FACTORY_ADDRESS2]
					  ,[PHONE] [FACTORY_PHONE]
					  ,null [COMPANY_CODE]
					  ,null [COMPANY_NAME]
					  ,null [COMPANY_ADDRESS]
					  ,[EMAIL] [COMPANY_EMAIL]
					  ,[FAX] [COMPANY_FAX]
					  ,[GROUP]
					  ,[COUNTRY]
					  ,[CREATED_DATE]
					  ,[SOURCE]
					  ,[W_DELETE_FLG]
					  ,[W_INTEGRATION_ID]
					  ,[W_VERSION_PERIOD]
					  ,[W_EFFECTIVE_FROM_DT]
					  ,[W_EFFECTIVE_TO_DT]
					  ,[W_CURRENT_FLG]
					  ,[W_INSERT_DT]
					  ,[W_UPDATE_DT]
					  ,[W_DATASOURCE_NUM_ID]
					  ,[W_BATCH_ID]
					  ,1 ROW_NUM
				  FROM [DWH].[W_MRP_MD_CUSTOMER_D] WHERE [CUSTOMER_CODE] NOT IN (SELECT DISTINCT [FACTORY_CODE] FROM  (SELECT DISTINCT trim([Factory Code]) [FACTORY_CODE] FROM [STG].[W_MRP_MD_FACTORY_DS] UNION ALL SELECT DISTINCT  [FACTORY_CODE] FROM [DWH].[W_MRP_MD_FACTORY_D]) A)

		)
		insert into #W_MRP_MD_FACTORY_D_TMP
		select
			[FACTORY_CODE],
			[FACTORY_TYPE],
			[FACTORY_SHORT_NAME],
			[FACTORY_NAME],
			[FACTORY_ADDRESS1],
			[FACTORY_ADDRESS2],
			[FACTORY_PHONE],
			[COMPANY_CODE],
			[COMPANY_NAME],
			[COMPANY_ADDRESS],
			[COMPANY_EMAIL],
			[COMPANY_FAX],
			[GROUP],
			[COUNTRY],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_FORMULA_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_FORMULA_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_FORMULA_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_FORMULA_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				trim([Formula Code]) [FORMULA_CODE],
				trim([Warehouse Code]) [WAREHOUSE_CODE],
				trim([Production Stage Code]) [PRODUCTION_STAGE_CODE],
				trim([Purpose ImEx Code]) [PURPOSE_IMEX_CODE],
				trim([ImEx Type]) [IMEX_TYPE],
				trim([Sign]) [SIGN],
				trim([Source]) [SOURCE],
				try_cast([Created Date] as datetime) [CREATED_DATE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    concat(TRIM([Warehouse Code]),'~',trim([Purpose ImEx Code]),'~',trim([ImEx Type])) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by concat(TRIM([Warehouse Code]),'~',trim([Purpose ImEx Code]),'~',trim([ImEx Type])) order by [w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_FORMULA_DS]
		)
		insert into #W_MRP_MD_FORMULA_D_TMP
		select
			[FORMULA_CODE],
			[WAREHOUSE_CODE],
			[PRODUCTION_STAGE_CODE],
			[PURPOSE_IMEX_CODE],
			[IMEX_TYPE],
			[SIGN],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_PAYMENT_TERM_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_PAYMENT_TERM_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_PAYMENT_TERM_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_PAYMENT_TERM_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				trim([Payment Term Code]) [PAYMENT_TERM_CODE],
				trim([Payment Term Name]) [PAYMENT_TERM_NAME],
				trim([Description]) [DESCRIPTION],
				cast(try_cast([Number of Payment] as float) as int) [NUMBER_OF_PAYMENT],
				cast(try_cast([Payment Schedule 1st] as float) as int) [PAYMENT_SCHEDULE_1ST],
				cast(try_cast([Payment Schedule 2nd] as float) as int) [PAYMENT_SCHEDULE_2ND],
				cast(try_cast([Payment Schedule 3rd] as float) as int) [PAYMENT_SCHEDULE_3RD],
				cast(try_cast([Payment Schedule 4th] as float) as int) [PAYMENT_SCHEDULE_4TH],
				cast(try_cast([Payment Schedule 5th] as float) as int) [PAYMENT_SCHEDULE_5TH],
				try_cast([Percentage of PS 1st] as float) [PERCENTAGE_OF_PS_1ST],
				try_cast([Percentage of PS 2nd] as float) [PERCENTAGE_OF_PS_2ND],
				try_cast([Percentage of PS 3rd] as float) [PERCENTAGE_OF_PS_3RD],
				try_cast([Percentage of PS 4th] as float) [PERCENTAGE_OF_PS_4TH],
				try_cast([Percentage of PS 5th] as float) [PERCENTAGE_OF_PS_5TH],
				try_cast([Created Date] as datetime) [CREATED_DATE],
				trim([Source]) [SOURCE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    trim([Payment Term Code]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by trim([Payment Term Code]) order by [w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_PAYMENT_TERM_DS]
		)
		insert into #W_MRP_MD_PAYMENT_TERM_D_TMP
		select
			[PAYMENT_TERM_CODE],
			[PAYMENT_TERM_NAME],
			[DESCRIPTION],
			[NUMBER_OF_PAYMENT],
			[PAYMENT_SCHEDULE_1ST],
			[PAYMENT_SCHEDULE_2ND],
			[PAYMENT_SCHEDULE_3RD],
			[PAYMENT_SCHEDULE_4TH],
			[PAYMENT_SCHEDULE_5TH],
			[PERCENTAGE_OF_PS_1ST],
			[PERCENTAGE_OF_PS_2ND],
			[PERCENTAGE_OF_PS_3RD],
			[PERCENTAGE_OF_PS_4TH],
			[PERCENTAGE_OF_PS_5TH],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_PAYMENT_TYPE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_PAYMENT_TYPE_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_PAYMENT_TYPE_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_PAYMENT_TYPE_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRY_CAST([Created Date] AS DATETIME) [CREATED_DATE],
				TRIM([Payment Type]) [PAYMENT_TYPE],
				TRIM([Custumer Code]) [CUSTUMER_CODE],
				TRIM([Payment Code]) [PAYMENT_CODE],
				TRIM([Source]) [SOURCE],
				TRIM([Bank Code]) [BANK_CODE],
				TRY_CAST([Effective Date] AS DATETIME) [EFFECTIVE_DATE],
				FORMAT(ISNULL(TRY_CAST([Effective Date] AS DATETIME),CAST('1900' AS DATE)),'yyyyMMdd') [FROM],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    CONCAT(trim([Payment Type]),'~',trim([Custumer Code]),'~',CASE WHEN TRY_CAST([Effective Date] AS DATETIME) IS NULL THEN '19000101' ELSE FORMAT(TRY_CAST([Effective Date] AS DATETIME),'yyyyMMdd') END ) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CONCAT(trim([Payment Type]),'~',trim([Custumer Code]),'~',CASE WHEN TRY_CAST([Effective Date] AS DATETIME) IS NULL THEN '19000101' ELSE FORMAT(TRY_CAST([Effective Date] AS DATETIME),'yyyyMMdd') END ) order by [w_file_name]desc,try_cast([Created Date] as datetime) desc) as ROW_NUM
				
			FROM [STG].[W_MRP_MD_PAYMENT_TYPE_DS]		
		)
		,CTE1 AS
		(
		SELECT *,row_number() over (partition by CONCAT(TRIM([PAYMENT_TYPE]),'~',TRIM([CUSTUMER_CODE])) order by FORMAT([EFFECTIVE_DATE],'yyyyMMdd') ASC) as ROW_NUM2 FROM CTE WHERE ROW_NUM = 1
		
		),
		CTE2 AS
		(
		SELECT
		A.[CREATED_DATE],
		A.[PAYMENT_TYPE],
		A.[CUSTUMER_CODE],
		A.[PAYMENT_CODE],
		A.[SOURCE],
		A.[BANK_CODE],
		A.[EFFECTIVE_DATE],
		A.[FROM],
		ISNULL(B.[FROM],'24001231') [TO],
		A.[W_DELETE_FLG],
		A.[W_INTEGRATION_ID],
		A.[W_VERSION_PERIOD],
		A.[W_EFFECTIVE_FROM_DT],
		A.[W_EFFECTIVE_TO_DT],
		A.[W_CURRENT_FLG],
		A.[W_INSERT_DT],
		A.[W_UPDATE_DT],
		A.[W_DATASOURCE_NUM_ID],
		A.[W_BATCH_ID],
		A.ROW_NUM
		FROM CTE1 A
		LEFT JOIN CTE1 B ON A.[PAYMENT_TYPE] = B.[PAYMENT_TYPE] AND A.[CUSTUMER_CODE]= B.[CUSTUMER_CODE] AND A.ROW_NUM2 =(B.ROW_NUM2 - 1)


		)
		insert into #W_MRP_MD_PAYMENT_TYPE_D_TMP
		select
			[CREATED_DATE],
			[PAYMENT_TYPE],
			[CUSTUMER_CODE],
			[PAYMENT_CODE],
			[SOURCE],
			[BANK_CODE],
			[EFFECTIVE_DATE],
			[FROM],
			[TO],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE2
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_PROCESSING_PRICE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_PROCESSING_PRICE_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_PROCESSING_PRICE_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_PROCESSING_PRICE_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL([ROW_WID],0) PRODUCT_WID,
				try_cast(try_cast(A.[Item ID] as float) as bigint) [ITEM_ID],
				trim(A.[Color]) [COLOR],
				trim(A.[Size]) [SIZE],
				try_cast(A.[Price CM 2] as float) [PRICE_CM_2],
				try_cast(A.[Price P 2] as float) [PRICE_P_2],
				try_cast(A.[Price T 2] as float) [PRICE_T_2],
				try_cast(A.[Price W 2] as float) [PRICE_W_2],
				try_cast(A.[Price E 2] as float) [PRICE_E_2],
				try_cast(A.[Price In 2] as float) [PRICE_IN_2],
				try_cast(A.[Price Other 2] as float) [PRICE_OTHER_2],
				try_cast(A.[Price Total 2] as float) [PRICE_TOTAL_2],
				try_cast(A.[Price CM 3] as float) [PRICE_CM_3],
				try_cast(A.[Price P 3] as float) [PRICE_P_3],
				try_cast(A.[Price T 3] as float) [PRICE_T_3],
				try_cast(A.[Price W3] as float) [PRICE_W3],
				try_cast(A.[Price E 3] as float) [PRICE_E_3],
				try_cast(A.[Price In 3] as float) [PRICE_IN_3],
				try_cast(A.[Price Other 3] as float) [PRICE_OTHER_3],
				try_cast(A.[Price Total 3] as float) [PRICE_TOTAL_3],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
				trim(A.[Source]) [SOURCE],
			    isnull(try_cast(A.[Delete Flag] as bit),0) as W_DELETE_FLG,
			    CONCAT(try_cast(try_cast(A.[Item ID] as float) as bigint),'~',TRIM(A.[Color]),'~',TRIM(A.[Size])) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CONCAT(try_cast(try_cast(A.[Item ID] as float) as bigint),'~',TRIM(A.[Color]),'~',TRIM(A.[Size])) order by [w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_PROCESSING_PRICE_DS] A
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] B ON 
			try_cast(trim(A.[Item ID]) as bigint) = B.[ITEM_ID]
			AND TRIM(A.[Color]) = ISNULL(B.COLOR_CODE,'')
			AND TRIM(A.[Size]) = ISNULL(B.SIZE,'')
			AND B.FACTORY_CODE = 'TP'
			 
		)
		insert into #W_MRP_MD_PROCESSING_PRICE_D_TMP
		select
			PRODUCT_WID,
			[ITEM_ID],
			[COLOR],
			[SIZE],
			[PRICE_CM_2],
			[PRICE_P_2],
			[PRICE_T_2],
			[PRICE_W_2],
			[PRICE_E_2],
			[PRICE_IN_2],
			[PRICE_OTHER_2],
			[PRICE_TOTAL_2],
			[PRICE_CM_3],
			[PRICE_P_3],
			[PRICE_T_3],
			[PRICE_W3],
			[PRICE_E_3],
			[PRICE_IN_3],
			[PRICE_OTHER_3],
			[PRICE_TOTAL_3],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_PRODUCT_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_PRODUCT_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_PRODUCT_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_PRODUCT_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(CU.ROW_WID,0) [CUSTOMER_WID],
				trim(A.[Item ID]) [ITEM_ID],
				A.[Item Code] [ITEM_CODE],
				ISNULL(TRIM(B.[Color Code]),'')  [COLOR_CODE],
				ISNULL(TRIM(B.[Size]),'')  [SIZE],
				A.[Item Name VN] [ITEM_NAME_VN],
				A.[Item Name EN] [ITEM_NAME_EN],
				A.[Item Name EX] [ITEM_NAME_EX],
				A.[Description] [DESCRIPTION],
				A.[Item Model] [ITEM_MODEL],
				A.[SubCategory Code] [SUBCATEGORY_CODE],
				A.[SubCategory Name] [SUBCATEGORY_NAME],
				A.[SubCategory Name EN] [SUBCATEGORY_NAME_EN],
				A.[Category Code] [CATEGORY_CODE],
				A.[Category Name] [CATEGORY_NAME],
				A.[Category Group] [CATEGORY_GROUP],
				A.[Class] [CLASS],
				'TP' [FACTORY_CODE],
				A.[Gender] [GENDER],
				TRIM(A.[Customer Code]) [CUSTOMER_CODE],
				A.[Receive Customer Code] [RECEIVE_CUSTOMER_CODE],
				A.[Payment Customer Code] [PAYMENT_CUSTOMER_CODE],
				A.[Contract ID] [CONTRACT_ID],
				A.[UOM] [UOM],
				TRY_CAST(A.[Item ID Ref] AS BIGINT) [ITEM_ID_REF],
				A.[Status] [STATUS],
				A.[Image URL] [IMAGE_URL],
				try_cast(A.[Price FOB] as float) [PRICE_FOB],
				A.[Created Date] [CREATED_DATE],
				A.[Source] [SOURCE],
			    A.[Delete Flag] as W_DELETE_FLG,
			    CONCAT(trim(A.[Item ID]),'~',TRIM(B.[Color Code]),'~',TRIM(B.[Size]),'~','TP') W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CONCAT(trim(A.[Item ID]),'~',TRIM(B.[Color Code]),'~',TRIM(B.[Size]),'~','TP') order by A.[w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_PRODUCT_DS] A 
			LEFT JOIN (SELECT DISTINCT [Item ID],[Color Code],[Size] 
			from (
			SELECT DISTINCT TRIM([Item ID]) [Item ID],TRIM([Color Code]) [Color Code],TRIM([Size]) [Size] FROM [STG].[W_MRP_TRX_SALES_ORDER_FS]
			union
			SELECT DISTINCT TRIM([Item ID]) [Item ID],TRIM([Color Code]) [Color Code],TRIM([Size]) [Size] FROM [STG].[W_MRP_TRX_SALES_INVOICE_FS]
			union
			SELECT DISTINCT TRIM([Item ID]) [Item ID],TRIM([Color Code]) [Color Code],TRIM([Size]) [Size] FROM [STG].[W_MRP_TRX_PRODUCTION_ACTUAL_FS]
			union
			SELECT DISTINCT [ITEM_ID],[COLOR_CODE],[SIZE] FROM [DWH].[W_MRP_TRX_SALES_ORDER_F]
			union
			SELECT DISTINCT [ITEM_ID],[COLOR_CODE],[SIZE] from [DWH].[W_MRP_TRX_SALES_INVOICE_F]
			union
			SELECT DISTINCT [ITEM_ID],[COLOR_CODE],[SIZE] from [DWH].[W_MRP_TRX_PRODUCTION_ACTUAL_F]

			)A) B ON trim(A.[Item ID]) = B.[Item ID]
			  LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU ON TRIM(A.[Customer Code]) = CU.[CUSTOMER_CODE]

			union all
			SELECT
				ISNULL(CU.ROW_WID,0) [CUSTOMER_WID],
				trim(A.[Item ID]) [ITEM_ID],
				A.[Item Code] [ITEM_CODE],
				''  [COLOR_CODE],
				''  [SIZE],
				A.[Item Name VN] [ITEM_NAME_VN],
				A.[Item Name EN] [ITEM_NAME_EN],
				A.[Item Name EX] [ITEM_NAME_EX],
				A.[Description] [DESCRIPTION],
				A.[Item Model] [ITEM_MODEL],
				A.[SubCategory Code] [SUBCATEGORY_CODE],
				A.[SubCategory Name] [SUBCATEGORY_NAME],
				A.[SubCategory Name EN] [SUBCATEGORY_NAME_EN],
				A.[Category Code] [CATEGORY_CODE],
				A.[Category Name] [CATEGORY_NAME],
				A.[Category Group] [CATEGORY_GROUP],
				A.[Class] [CLASS],
				trim(a.[Factory Code]) [FACTORY_CODE],
				A.[Gender] [GENDER],
				TRIM(A.[Customer Code]) [CUSTOMER_CODE],
				A.[Receive Customer Code] [RECEIVE_CUSTOMER_CODE],
				A.[Payment Customer Code] [PAYMENT_CUSTOMER_CODE],
				A.[Contract ID] [CONTRACT_ID],
				A.[UOM] [UOM],
				TRY_CAST(A.[Item ID Ref] AS BIGINT) [ITEM_ID_REF],
				A.[Status] [STATUS],
				A.[Image URL] [IMAGE_URL],
				try_cast(A.[Price FOB] as float) [PRICE_FOB],
				A.[Created Date] [CREATED_DATE],
				A.[Source] [SOURCE],
			    A.[Delete Flag] as W_DELETE_FLG,
			    CONCAT(trim(A.[Item ID]),'~','','~','','~',trim(a.[Factory Code])) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CONCAT(trim(A.[Item ID]),'~','','~','','~',trim(a.[Factory Code])) order by A.[w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_PRODUCT_FACTORRY_DS] A 
			  LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU ON TRIM(A.[Customer Code]) = CU.[CUSTOMER_CODE]
		)
		insert into #W_MRP_MD_PRODUCT_D_TMP
		select
			[CUSTOMER_WID],
			[ITEM_ID],
			[ITEM_CODE],
			[COLOR_CODE],
			[SIZE],
			[ITEM_NAME_VN],
			[ITEM_NAME_EN],
			[ITEM_NAME_EX],
			[DESCRIPTION],
			[ITEM_MODEL],
			[SUBCATEGORY_CODE],
			[SUBCATEGORY_NAME],
			[SUBCATEGORY_NAME_EN],
			[CATEGORY_CODE],
			[CATEGORY_NAME],
			[CATEGORY_GROUP],
			[CLASS],
			[FACTORY_CODE],
			[GENDER],
			[CUSTOMER_CODE],
			[RECEIVE_CUSTOMER_CODE],
			[PAYMENT_CUSTOMER_CODE],
			[CONTRACT_ID],
			[UOM],
			[ITEM_ID_REF],
			[STATUS],
			[IMAGE_URL],
			[PRICE_FOB],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		UPDATE A
		SET 
		A.[CUSTOMER_WID] = ISNULL(CU.ROW_WID,0)
		FROM 
		[DWH].[W_MRP_MD_PRODUCT_D] A 
		LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU 
		ON A.[CUSTOMER_CODE] = CU.[CUSTOMER_CODE]

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_PRODUCTION_STAGE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_PRODUCTION_STAGE_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_PRODUCTION_STAGE_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_PRODUCTION_STAGE_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				trim([Production Stage Code]) [PRODUCTION_STAGE_CODE],
				[Production Stage Name] [PRODUCTION_STAGE_NAME],
				[Description] [DESCRIPTION],
				[Source] [SOURCE],
				[Created Date] [CREATED_DATE],
			    [Delete Flag] as W_DELETE_FLG,
			    trim([Production Stage Code]) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by trim([Production Stage Code]) order by [w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_PRODUCTION_STAGE_DS]
		)
		insert into #W_MRP_MD_PRODUCTION_STAGE_D_TMP
		select
			[PRODUCTION_STAGE_CODE],
			[PRODUCTION_STAGE_NAME],
			[DESCRIPTION],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_PURPOSE_IMEX_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_PURPOSE_IMEX_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_PURPOSE_IMEX_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_PURPOSE_IMEX_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				TRIM([Purpose ImEx Code]) [PURPOSE_IMEX_CODE],
				[Purpose ImEx Name] [PURPOSE_IMEX_NAME],
				trim([Type]) [TYPE],
				[Is Tranfer Item] [IS_TRANFER_ITEM],
				[Is Tranfer Store] [IS_TRANFER_STORE],
				try_cast([Created Date] as datetime) [CREATED_DATE],
				[Source] [SOURCE],
			    [Delete Flag] as W_DELETE_FLG,
			    concat(TRIM([Purpose ImEx Code]),'~',trim([Type])) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by concat(TRIM([Purpose ImEx Code]),'~',trim([Type])) order by [w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_PURPOSE_IMEX_DS]
		)
		insert into #W_MRP_MD_PURPOSE_IMEX_D_TMP
		select
			[PURPOSE_IMEX_CODE],
			[PURPOSE_IMEX_NAME],
			[TYPE],
			[IS_TRANFER_ITEM],
			[IS_TRANFER_STORE],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_SALE_JOURNAL_DATE_REPORT_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_SALE_JOURNAL_DATE_REPORT_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_SALE_JOURNAL_DATE_REPORT_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_SALE_JOURNAL_DATE_REPORT_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(TRY_CAST([Date] AS DATETIME),'yyyyMMdd') [DATE_WID],
				TRY_CAST([Date] AS DATETIME) [DATE],
				trim([Source]) [SOURCE],
				TRY_CAST([Created Date] AS DATETIME) [CREATED_DATE],
			    isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    FORMAT(TRY_CAST([Date] AS DATETIME),'yyyyMMdd') W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by FORMAT(TRY_CAST([Date] AS DATETIME),'yyyyMMdd') order by [w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_SALE_JOURNAL_DATE_REPORT_DS]
		)
		insert into #W_MRP_MD_SALE_JOURNAL_DATE_REPORT_D_TMP
		select
			[DATE_WID],
			[DATE],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_MD_WAREHOUSE_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_MD_WAREHOUSE_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_MD_WAREHOUSE_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_WAREHOUSE_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(FA.ROW_WID,0) [FACTORY_WID],
				TRIM(A.[Warehouse Code]) [WAREHOUSE_CODE],
				A.[Warehouse Name] [WAREHOUSE_NAME],
				A.[Address] [ADDRESS],
				TRIM(A.[Factory Code]) [FACTORY_CODE],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
				A.[Source] [SOURCE],
			    [Delete Flag] as W_DELETE_FLG,
			    CONCAT(TRIM(A.[Warehouse Code]),'~',TRIM(A.[Factory Code])) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    A.W_BATCH_ID,
			    row_number() over (partition by CONCAT(TRIM(A.[Warehouse Code]),'~',TRIM(A.[Factory Code])) order by a.[w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_WAREHOUSE_DS] A
			LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] FA ON TRIM(A.[Factory Code]) = FA.[FACTORY_CODE]
		)
		insert into #W_MRP_MD_WAREHOUSE_D_TMP
		select
			[FACTORY_WID],
			[WAREHOUSE_CODE],
			[WAREHOUSE_NAME],
			[ADDRESS],
			[FACTORY_CODE],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_PRODUCTION_CALENDAR_D]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_PRODUCTION_CALENDAR_D] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_PRODUCTION_CALENDAR_D',
	@V_src_table nvarchar(100) = 'W_MRP_MD_CALENDAR_DS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(CAST([Day] AS DATETIME),'yyyyMMdd') [DATE_ID],
				[Day] [DAY],
				[Calendar Type] [CALENDAR_TYPE],
				[Working Hour] [WORKING_HOUR],
				[Holiday Name] [HOLIDAY_NAME],
				trim([Department]) [DEPARTMENT],
				trim([Company]) [COMPANY],
				[Created Date] [CREATED_DATE],
				[Source] [SOURCE],
				isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
			    CONCAT(FORMAT(CAST([Day] AS DATETIME),'yyyyMMdd'),'~',trim([Department]),'~',trim([Company]),'~2') W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by CONCAT(FORMAT(CAST([Day] AS DATETIME),'yyyyMMdd'),'~',trim([Department]),'~',trim([Company]),'~2') order by [w_file_name] desc) as ROW_NUM
			FROM [STG].[W_MRP_MD_CALENDAR_DS]

		)
		insert into #W_MRP_PRODUCTION_CALENDAR_D_TMP
		select
			[DATE_ID],
			[DAY],
			[CALENDAR_TYPE],
			[WORKING_HOUR],
			[HOLIDAY_NAME],
			[DEPARTMENT],
			[COMPANY],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TGT_FACTORY_TAGRET_MONTH_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TGT_FACTORY_TAGRET_MONTH_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TGT_FACTORY_TAGRET_MONTH_F',
	@V_src_table nvarchar(100) = 'W_MRP_TGT_FACTORY_TAGRET_MONTH_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') [DATE_WID],
				ISNULL(PC.ROW_WID,0) [PRODUCTION_DATE_WID],
				ISNULL(IT.ROW_WID,0) [ITEM_WID],
				ISNULL(DP.ROW_WID,0) [DEPARTMENT_WID],
				ISNULL(PS.ROW_WID,0) [PRODUCTION_STAGE_WID],
				trim(a.[Factory Code]) [FACTORY_CODE],
				a.[Date] [DATE],
				trim(a.[Item ID]) [ITEM_ID],
				trim(a.[Production Stage Code]) [PRODUCTION_STAGE_CODE],
				trim(a.[Department Code]) [DEPARTMENT_CODE],
				cast(a.[Plan Quantity] as int) [PLAN_QUANTITY],
				cast(a.[Price CM] as float) [PRICE_CM],
				cast(a.[Price P] as float) [PRICE_P],
				cast(a.[Price T] as float) [PRICE_T],
				cast(a.[Price W] as float) [PRICE_W],
				cast(a.[Price E] as float) [PRICE_E],
				cast(a.[Price Print] as float) [PRICE_PRINT],
				cast(a.[Price Other] as float) [PRICE_OTHER],
				trim(a.[Type]) [TYPE],
				trim(a.[Source]) [SOURCE],
				TRY_CAST(A.[Created Date] AS DATETIME) [CREATED_DATE],
			    a.[Delete Flag] W_DELETE_FLG,
				CONCAT(format(TRY_CAST(A.[Date] AS DATETIME),'yyyyMMdd'),'~',trim(a.[Factory Code]),'~',trim(a.[Item ID]),'~',trim(a.[Production Stage Code]),'~',trim(a.[Department Code]),'~',trim(a.[Type])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(format(TRY_CAST(A.[Date] AS DATETIME),'yyyyMMdd'),'~',trim(a.[Factory Code]),'~',trim(a.[Item ID]),'~',trim(a.[Production Stage Code]),'~',trim(a.[Department Code]),'~',trim(a.[Type]))  ORDER BY a.[w_file_name] DESC,TRY_CAST(A.[Date] AS DATETIME) DESC,PC.[DEPARTMENT] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TGT_FACTORY_TAGRET_MONTH_FS] A
			LEFT JOIN (select min(ROW_WID) ROW_WID,[ITEM_ID] from [DWH].[W_MRP_MD_PRODUCT_D] WHERE FACTORY_CODE = 'TP' group by [ITEM_ID]) IT ON trim(A.[Item ID]) = IT.[ITEM_ID]
			LEFT JOIN [DWH].[W_MRP_MD_DEPARTMENT_D] DP ON TRIM(A.[Department Code]) = DP.[DEPARTMENT_CODE] AND TRIM(A.[Factory Code]) = DP.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_PRODUCTION_CALENDAR_D] PC ON (TRIM(A.[Department Code]) = PC.[DEPARTMENT] OR PC.[DEPARTMENT] IS NULL) AND TRIM(A.[Factory Code]) = PC.[COMPANY] AND FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') = PC.[DATE_ID]
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCTION_STAGE_D] PS ON TRIM(A.[Production Stage Code]) = PS.[PRODUCTION_STAGE_CODE] 

	
		)
		insert into #W_MRP_TGT_FACTORY_TAGRET_MONTH_F_TMP
		select
			[DATE_WID],
			[PRODUCTION_DATE_WID],
			[ITEM_WID],
			[DEPARTMENT_WID],
			[PRODUCTION_STAGE_WID],
			[FACTORY_CODE],
			[DATE],
			[ITEM_ID],
			[PRODUCTION_STAGE_CODE],
			[DEPARTMENT_CODE],
			[PLAN_QUANTITY],
			[PRICE_CM],
			[PRICE_P],
			[PRICE_T],
			[PRICE_W],
			[PRICE_E],
			[PRICE_PRINT],
			[PRICE_OTHER],
			[TYPE],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TGT_PRODUCTION_TARGET_DAY_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TGT_PRODUCTION_TARGET_DAY_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TGT_PRODUCTION_TARGET_DAY_F',
	@V_src_table nvarchar(100) = 'W_MRP_TGT_PRODUCTION_TARGET_DAY_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') [DATE_WID],
				ISNULL(PC.ROW_WID,0) [PRODUCTION_DATE_WID],
				ISNULL(DP.ROW_WID,0) [DEPARTMENT_WID],
				TRIM(A.[Employee Type]) [EMPLOYEE_TYPE],
				TRIM(A.[Department Code]) [DEPARTMENT_CODE],
				trim(A.[Date]) [DATE],
				cast(try_cast(A.[Making Employee Count] as float) as int) [MAKING_EMPLOYEE_COUNT],
				cast(try_cast(A.[Assistant Employee Count] as float) as int) [ASSISTANT_EMPLOYEE_COUNT],
				cast(try_cast(A.[Line Leader Count] as float) as int) [LINE_LEADER_COUNT],
				cast(try_cast(A.[Orther Employee Count] as float) as int) [ORTHER_EMPLOYEE_COUNT],
				cast(try_cast(A.[Absent Count] as float) as int) [ABSENT_COUNT],
				cast(try_cast(A.[Present Count] as float) as int) [PRESENT_COUNT],
				A.[Work Day] [WORK_DAY],
				A.[OT] [OT],
				cast(try_cast(A.[Making Employee Present] as float) as int) [MAKING_EMPLOYEE_PRESENT],
				cast(try_cast(A.[Assistant Employee Present] as float) as int) [ASSISTANT_EMPLOYEE_PRESENT],
				A.[Word Day Of Making] [WORD_DAY_OF_MAKING],
				A.[Word Day Of Assistant] [WORD_DAY_OF_ASSISTANT],
				A.[OT Of Making] [OT_OF_MAKING],
				A.[OT Of Assistant] [OT_OF_ASSISTANT],
				TRIM(A.[Factory Code]) [FACTORY_CODE],
				A.[Created Date] [CREATED_DATE],
				A.[Source] [SOURCE],
			    isnull(try_cast(A.[Delete Flag] as bit),0) W_DELETE_FLG,
				CONCAT(TRIM(A.[Employee Type]),'~',TRIM(A.[Department Code]),'~',TRIM(A.[Factory Code]),'~',FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd')) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(TRIM(A.[Employee Type]),'~',TRIM(A.[Department Code]),'~',TRIM(A.[Factory Code]),'~',FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd')) ORDER BY a.[w_file_name] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TGT_PRODUCTION_TARGET_DAY_FS] A
			LEFT JOIN [DWH].[W_MRP_MD_DEPARTMENT_D] DP ON TRIM(A.[Department Code]) = DP.[DEPARTMENT_CODE] AND TRIM(A.[Factory Code]) = DP.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_PRODUCTION_CALENDAR_D] PC ON (TRIM(A.[Department Code]) = PC.[DEPARTMENT] OR PC.[DEPARTMENT] IS NULL) AND TRIM(A.[Factory Code]) = PC.[COMPANY] AND FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') = PC.[DATE_ID]

	
		)
		insert into #W_MRP_TGT_PRODUCTION_TARGET_DAY_F_TMP
		select
			[DATE_WID],
			[PRODUCTION_DATE_WID],
			[DEPARTMENT_WID],
			[EMPLOYEE_TYPE],
			[DEPARTMENT_CODE],
			[DATE],
			[MAKING_EMPLOYEE_COUNT],
			[ASSISTANT_EMPLOYEE_COUNT],
			[LINE_LEADER_COUNT],
			[ORTHER_EMPLOYEE_COUNT],
			[ABSENT_COUNT],
			[PRESENT_COUNT],
			[WORK_DAY],
			[OT],
			[MAKING_EMPLOYEE_PRESENT],
			[ASSISTANT_EMPLOYEE_PRESENT],
			[WORD_DAY_OF_MAKING],
			[WORD_DAY_OF_ASSISTANT],
			[OT_OF_MAKING],
			[OT_OF_ASSISTANT],
			[FACTORY_CODE],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TGT_PRODUCTION_TARGET_MONTH_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TGT_PRODUCTION_TARGET_MONTH_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TGT_PRODUCTION_TARGET_MONTH_F',
	@V_src_table nvarchar(100) = 'W_MRP_TGT_PRODUCTION_TARGET_MONTH_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') [DATE_WID],
				ISNULL(PC.ROW_WID,0) [PRODUCTION_DATE_WID],
				ISNULL(DP.ROW_WID,0) [DEPARTMENT_WID],
				A.[Date] [DATE],
				TRIM(A.[Department Code]) [DEPARTMENT_CODE],
				TRIM(A.[Factory Code]) [FACTORY_CODE],
				A.[BEP Amount] [BEP_AMOUNT],
				A.[Total Salary ] [TOTAL_SALARY_],
				A.[Extra Time] [EXTRA_TIME],
				A.[Working time 8h] [WORKING_TIME_8H],
				A.[Salary allowance] [SALARY_ALLOWANCE],
				A.[Costing Working Day] [COSTING_WORKING_DAY],
				A.[Extra Amount X] [EXTRA_AMOUNT_X],
				A.[Extra Amount] [EXTRA_AMOUNT],
				A.[Amount 8h] [AMOUNT_8H],
				A.[Amount 9h] [AMOUNT_9H],
				A.[Amount 9h X] [AMOUNT_9H_X],
				A.[Amount per Department] [AMOUNT_PER_DEPARTMENT],
				A.[Amount per Day] [AMOUNT_PER_DAY],
				A.[Amount per Month] [AMOUNT_PER_MONTH],
				A.[Number of Day] [NUMBER_OF_DAY],
				A.[Number of Worker] [NUMBER_OF_WORKER],
				A.[Created Date] [CREATED_DATE],
				A.[Source] [SOURCE],
			    isnull(try_cast(A.[Delete Flag] as bit),0) W_DELETE_FLG,
				CONCAT(TRIM(A.[Department Code]),'~',TRIM(A.[Factory Code]),'~',FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd')) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(TRIM(A.[Department Code]),'~',TRIM(A.[Factory Code]),'~',FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd')) ORDER BY a.[w_file_name] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TGT_PRODUCTION_TARGET_MONTH_FS] A
			LEFT JOIN [DWH].[W_MRP_MD_DEPARTMENT_D] DP ON TRIM(A.[Department Code]) = DP.[DEPARTMENT_CODE] AND TRIM(A.[Factory Code]) = DP.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_PRODUCTION_CALENDAR_D] PC ON (TRIM(A.[Department Code]) = PC.[DEPARTMENT] OR PC.[DEPARTMENT] IS NULL) AND TRIM(A.[Factory Code]) = PC.[COMPANY] AND FORMAT(ISNULL(TRY_CAST(A.[Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') = PC.[DATE_ID]


	
		)
		insert into #W_MRP_TGT_PRODUCTION_TARGET_MONTH_F_TMP
		select
			[DATE_WID],
			[PRODUCTION_DATE_WID],
			[DEPARTMENT_WID],
			[DATE],
			[DEPARTMENT_CODE],
			[FACTORY_CODE],
			[BEP_AMOUNT],
			[TOTAL_SALARY_],
			[EXTRA_TIME],
			[WORKING_TIME_8H],
			[SALARY_ALLOWANCE],
			[COSTING_WORKING_DAY],
			[EXTRA_AMOUNT_X],
			[EXTRA_AMOUNT],
			[AMOUNT_8H],
			[AMOUNT_9H],
			[AMOUNT_9H_X],
			[AMOUNT_PER_DEPARTMENT],
			[AMOUNT_PER_DAY],
			[AMOUNT_PER_MONTH],
			[NUMBER_OF_DAY],
			[NUMBER_OF_WORKER],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TGT_SALES_YEAR_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TGT_SALES_YEAR_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TGT_SALES_YEAR_F',
	@V_src_table nvarchar(100) = 'W_MRP_TGT_SALES_YEAR_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(CAST(CONCAT(A.[Year],'-',[MONTH],'-01') AS DATETIME),'yyyyMMdd') [DATE_WID],
				ISNULL(CU.ROW_WID,0) [CUSTOMER_WID],
				ISNULL(DP.ROW_WID,0) [DEPARTMENT_WID],
				TRIM(A.[Factory Code]) [FACTORY_CODE],
				TRIM(A.[Target Code]) [TARGET_CODE],
				TRIM(A.[Type]) [TYPE],
				A.[Year] [YEAR],
				TRIM(A.[Customer Code]) [CUSTOMER_CODE],
				TRIM(A.[Department Code]) [DEPARTMENT_CODE],
				A.[Currency] [CURRENCY],
				A.[Contract Type] [CONTRACT_TYPE],
				TRIM(A.[Row Code]) [ROW_CODE],
				A.[Description] [DESCRIPTION],
				A.[Month] [MONTH],
				A.[Quantity] [QUANTITY],
				A.[Amount] [AMOUNT],
				A.[Sum of Quantity] [SUM_OF_QUANTITY],
				A.[Sum of Amount] [SUM_OF_AMOUNT],
				A.[Created Date] [CREATED_DATE],
				A.[Source] [SOURCE],
			    A.[Delete Flag] W_DELETE_FLG,
				CONCAT(TRIM(A.[Target Code]),'~',TRIM(A.[Department Code]),'~',TRIM(A.[Factory Code]),'~',TRIM(A.[Customer Code]),'~',TRIM(A.[Type]),'~',TRIM(A.[Row Code]),'~',FORMAT(CAST(CONCAT(A.[Year],'-',[MONTH],'-01') AS DATETIME),'yyyyMMdd')) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(TRIM(A.[Target Code]),'~',TRIM(A.[Department Code]),'~',TRIM(A.[Factory Code]),'~',TRIM(A.[Customer Code]),'~',TRIM(A.[Type]),'~',TRIM(A.[Row Code]),'~',FORMAT(CAST(CONCAT(A.[Year],'-',[MONTH],'-01') AS DATETIME),'yyyyMMdd'))  ORDER BY a.[w_file_name] DESC) AS ROW_NUM
			FROM 
			(SELECT 
			   [Factory Code]
		      ,[Target Code]
		      ,[Type]
		      ,[Year]
		      ,[Customer Code]
		      ,[Department Code]
		      ,[Currency]
		      ,[Contract Type]
		      ,[Row Code]
		      ,[Description]
			  ,[Month]
			  ,[Quantity]
			  ,[Amount]
		      ,[Sum of Quantity]
		      ,[Sum of Amount]
		      ,[Created Date]
		      ,[Delete Flag]
		      ,[Source]
			  ,[w_batch_id]
			  ,[w_file_name]
		FROM (
		SELECT [Factory Code]
		      ,[Target Code]
		      ,[Type]
		      ,[Year]
		      ,[Customer Code]
		      ,[Department Code]
		      ,[Currency]
		      ,[Contract Type]
		      ,[Row Code]
		      ,[Description]
			  ,[Amount 1]	 [1]
		      ,[Amount 2]	 [2]
		      ,[Amount 3]	 [3]
		      ,[Amount 4]	 [4]
		      ,[Amount 5]	 [5]
		      ,[Amount 6]	 [6]
		      ,[Amount 7]	 [7]
		      ,[Amount 8]	 [8]
		      ,[Amount 9]	 [9]
		      ,[Amount 10]	 [10]
		      ,[Amount 11]	 [11]
		      ,[Amount 12]	 [12]
			  ,[Month]
			  ,Quantity
		      ,[Sum of Quantity]
		      ,[Sum of Amount]
		      ,[Created Date]
		      ,[Delete Flag]
		      ,[Source]
			  ,[w_batch_id]
			  ,[w_file_name]
		FROM (
		SELECT [Factory Code]
		      ,[Target Code]
		      ,[Type]
		      ,[Year]
		      ,[Customer Code]
		      ,[Department Code]
		      ,[Currency]
		      ,[Contract Type]
		      ,[Row Code]
		      ,[Description]
		      ,[Quantity 1]		 [1]
		      ,[Quantity 2]		 [2]
		      ,[Quantity 3]		 [3]
		      ,[Quantity 4]		 [4]
		      ,[Quantity 5]		 [5]
		      ,[Quantity 6]		 [6]
		      ,[Quantity 7]		 [7]
		      ,[Quantity 8]		 [8]
		      ,[Quantity 9]		 [9]
		      ,[Quantity 10]	 [10]
		      ,[Quantity 11]	 [11]
		      ,[Quantity 12]	 [12]
		      ,[Amount 1]
		      ,[Amount 2]
		      ,[Amount 3]
		      ,[Amount 4]
		      ,[Amount 5]
		      ,[Amount 6]
		      ,[Amount 7]
		      ,[Amount 8]
		      ,[Amount 9]
		      ,[Amount 10]
		      ,[Amount 11]
		      ,[Amount 12]
		      ,[Sum of Quantity]
		      ,[Sum of Amount]
		      ,[Created Date]
		      ,[Delete Flag]
		      ,[Source]
		      ,[w_batch_id]
			  ,[w_file_name]
		  FROM [STG].[W_MRP_TGT_SALES_YEAR_FS] ) A UNPIVOT (Quantity FOR [Month] IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12])) AS UnPVT)  A UNPIVOT (Amount FOR [Month2] IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12])) AS UnPVT WHERE [Month2] = [Month]) A
			LEFT JOIN [DWH].[W_MRP_MD_DEPARTMENT_D] DP ON '' = DP.[DEPARTMENT_CODE] AND isnull(TRIM(A.[Factory Code]),'') = DP.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU ON isnull(TRIM(A.[Customer Code]),'') = CU.[CUSTOMER_CODE]
			

	
		)
		insert into #W_MRP_TGT_SALES_YEAR_F_TMP
		select
			[DATE_WID],
			[CUSTOMER_WID],
			[DEPARTMENT_WID],
			[FACTORY_CODE],
			[TARGET_CODE],
			[TYPE],
			[YEAR],
			[CUSTOMER_CODE],
			[DEPARTMENT_CODE],
			[CURRENCY],
			[CONTRACT_TYPE],
			[ROW_CODE],
			[DESCRIPTION],
			[MONTH],
			[QUANTITY],
			[AMOUNT],
			[SUM_OF_QUANTITY],
			[SUM_OF_AMOUNT],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_FACTORY_QUANTITY_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_FACTORY_QUANTITY_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_FACTORY_QUANTITY_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_FACTORY_QUANTITY_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				ISNULL(B.ROW_WID,0) [FACTORY_WID],
				ISNULL(C.ROW_WID,0) [PRODUCTION_STAGE_WID],
				trim(A.[Factory Code]) [FACTORY_CODE],
				cast(try_cast(A.[PO ID] as float) as bigint) [PO_ID],
				try_cast(A.[Plan Quantity] as float)  [PLAN_QUANTITY],
				try_cast(A.[PO Packing Quantity Pcs] as float) [PO_PACKING_QUANTITY_PCS],
				trim(A.[Production Stage Code]) [PRODUCTION_STAGE_CODE],
				try_cast(A.[Created Date] as datetime) [CREATED_DATE],
				trim(A.[Source]) [SOURCE],
			    isnull(try_cast(A.[Delete Flag] as bit),0) W_DELETE_FLG,
				CONCAT(trim(A.[Factory Code]),'~',cast(try_cast(A.[PO ID] as float) as bigint),'~',trim(A.[Production Stage Code])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(trim(A.[Factory Code]),'~',cast(try_cast(A.[PO ID] as float) as bigint),'~',trim(A.[Production Stage Code])) ORDER BY A.[w_file_name] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TRX_FACTORY_QUANTITY_FS] A
			LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] B  ON trim(A.[Factory Code]) = B.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCTION_STAGE_D] C ON trim(A.[Production Stage Code]) = C.[PRODUCTION_STAGE_CODE]
	
		)
		insert into #W_MRP_TRX_FACTORY_QUANTITY_F_TMP
		select
			[FACTORY_WID],
			[PRODUCTION_STAGE_WID],
			[FACTORY_CODE],
			[PO_ID],
			[PLAN_QUANTITY],
			[PO_PACKING_QUANTITY_PCS],
			[PRODUCTION_STAGE_CODE],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		UPDATE A
		SET
		A.[FACTORY_WID] = ISNULL(B.ROW_WID,0),
		A.[PRODUCTION_STAGE_WID]= ISNULL(C.ROW_WID,0) 
		FROM [DWH].[W_MRP_TRX_FACTORY_QUANTITY_F] A
			LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] B  ON A.[FACTORY_CODE] = B.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCTION_STAGE_D] C ON A.[PRODUCTION_STAGE_CODE] = C.[PRODUCTION_STAGE_CODE]
		
		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_INVENTORY_PRODUCT_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_INVENTORY_PRODUCT_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_INVENTORY_PRODUCT_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_INVENTORY_PRODUCT_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(CAST(A.[Voucher Date] AS DATETIME),'yyyyMMdd') [DATE_WID],
				ISNULL(IT.ROW_WID,0) [ITEM_WID],
				ISNULL(DP.ROW_WID,0) [DEPARTMENT_WID],
				ISNULL(WH.ROW_WID,0) [FACTORY_WID],
				ISNULL(PU.ROW_WID,0) [PURPOSE_IMEX_WID],
				TRIM(A.[Factory Code]) [FACTORY_CODE],
				TRIM(A.[Voucher No]) [VOUCHER_NO],
				A.[Voucher Date] [VOUCHER_DATE],
				TRIM(A.[Warehouse Code]) [WAREHOUSE_CODE],
				TRIM(A.[Purpose ImEx Code]) [PURPOSE_IMEX_CODE],
				TRIM(A.[ImEx Type]) [IMEX_TYPE],
				trim(A.[Object Code]) [OBJECT_CODE],
				trim(A.[Item ID]) [ITEM_ID],
				trim(A.[PO ID]) [PO_ID],
				TRIM(A.[Color Code]) [COLOR_CODE],
				TRIM(A.[Size]) [SIZE],
				A.[Quantity] [QUANTITY],
				FM.[FORMULA_CODE],
				FM.[SIGN],
				A.[Created Date] [CREATED_DATE],
				A.[Source] [SOURCE],
			    A.[Delete Flag] W_DELETE_FLG,
				CONCAT(TRIM(A.[Factory Code]),'~',TRIM(A.[Voucher No]),'~',TRIM(A.[Warehouse Code]),'~',TRIM(A.[Item ID]),'~',TRIM(A.[Color Code]),'~',TRIM(A.[Size])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(TRIM(A.[Factory Code]),'~',TRIM(A.[Voucher No]),'~',TRIM(A.[Warehouse Code]),'~',TRIM(A.[Item ID]),'~',TRIM(A.[Color Code]),'~',TRIM(A.[Size])) ORDER BY a.[w_file_name] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TRX_INVENTORY_PRODUCT_FS] A
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] IT ON trim(A.[Item ID]) = IT.[ITEM_ID] AND trim(A.[Color Code]) = ISNULL(IT.[COLOR_CODE],'') AND trim(A.[Size]) = ISNULL(IT.SIZE,'') AND IT.FACTORY_CODE = 'TP'
			LEFT JOIN [DWH].[W_MRP_MD_DEPARTMENT_D] DP ON '' = DP.[DEPARTMENT_CODE] AND ISNULL(TRIM(A.[Factory Code]),'') = DP.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_WAREHOUSE_D] WH ON  ISNULL(TRIM(A.[Warehouse Code]),'') = WH.[WAREHOUSE_CODE] AND  ISNULL(TRIM(A.[Factory Code]),'') = WH.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_PURPOSE_IMEX_D] PU ON  ISNULL(TRIM(A.[Purpose ImEx Code]),'') = PU.[PURPOSE_IMEX_CODE] AND  ISNULL(TRIM(A.[ImEx Type]),'') = PU.[TYPE]
			LEFT JOIN [DWH].[W_MRP_MD_FORMULA_D] FM ON ISNULL(TRIM(A.[Warehouse Code]),'') = FM.[WAREHOUSE_CODE] AND ISNULL(TRIM(A.[Purpose ImEx Code]),'') = FM.[PURPOSE_IMEX_CODE] AND  ISNULL(TRIM(A.[ImEx Type]),'') = FM.[IMEX_TYPE]


	
		)
		insert into #W_MRP_TRX_INVENTORY_PRODUCT_F_TMP
		select
			[DATE_WID],
			[ITEM_WID],
			[DEPARTMENT_WID],
			[FACTORY_WID],
			[PURPOSE_IMEX_WID],
			[FACTORY_CODE],
			[VOUCHER_NO],
			[VOUCHER_DATE],
			[WAREHOUSE_CODE],
			[PURPOSE_IMEX_CODE],
			[IMEX_TYPE],
			[OBJECT_CODE],
			[ITEM_ID],
			[PO_ID],
			[COLOR_CODE],
			[SIZE],
			[QUANTITY],
			[FORMULA_CODE],
			[SIGN],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_PRODUCTION_ACTUAL_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_PRODUCTION_ACTUAL_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_PRODUCTION_ACTUAL_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_PRODUCTION_ACTUAL_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(ISNULL(TRY_CAST(A.[Production Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') [DATE_WID],
				ISNULL(PC.ROW_WID,0) [PRODUCTION_DATE_WID],
				ISNULL(IT.ROW_WID,0) [ITEM_WID],
				ISNULL(PP.ROW_WID,0) [PROCESSING_PRICE_WID],
				ISNULL(DP.ROW_WID,0) [DEPARTMENT_WID],
				ISNULL(PS.ROW_WID,0) [PRODUCTION_STAGE_WID],
				ISNULL(CT.ROW_WID,0) [CONTRACT_WID],
				A.[Production Date] [PRODUCTION_DATE],
				trim(A.[Batch No]) [BATCH_NO],
				trim(A.[Created Date]) [CREATED_DATE],
				trim(A.[Item ID]) [ITEM_ID],
				trim(A.[Color Code]) [COLOR_CODE],
				trim(A.[Size]) [SIZE],
				trim(A.[PO ID]) [PO_ID],
				A.[PO Source] [PO_SOURCE],
				trim(A.[Department Code]) [DEPARTMENT_CODE],
				trim(A.[Production Stage Code]) [PRODUCTION_STAGE_CODE],
				trim(A.[Factory Code]) [FACTORY_CODE],
				A.[Quantity] [QUANTITY],
				ISNULL(OD.[FOB_PRICE],0) [FOB_PRICE],
				trim(A.[Table No]) [TABLE_NO],
				trim(A.[Lot No]) [LOT_NO],
				trim(A.[Layers Quantity]) [LAYERS_QUANTITY],
				trim(A.[Item No]) [ITEM_NO],
				A.[Carton Quantity] [CARTON_QUANTITY],
				ISNULL(TRY_CAST(A.[PO FACTORY] AS BIT),0) [PO_FACTORY],
				A.[Source] [SOURCE],
			    isnull(try_cast(A.[Delete Flag] as bit),0) W_DELETE_FLG,
				CONCAT(format(TRY_CAST(A.[Created Date] AS DATETIME),'yyyyMMdd'),'~',TRIM(A.[Batch No]),'~',TRIM(A.[PO ID]),'~',TRIM(A.[Color Code]),'~',TRIM(A.[Size]),'~',TRIM(A.[Department Code]),'~',TRIM(A.[Production Stage Code]),'~',TRIM(A.[Factory Code]),'~',TRIM(A.[Table No]),'~',TRIM(A.[Lot No]),'~',TRIM(A.[Layers Quantity]),'~',TRIM(A.[Item No])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(format(TRY_CAST(A.[Created Date] AS DATETIME),'yyyyMMdd'),'~',TRIM(A.[Batch No]),'~',TRIM(A.[PO ID]),'~',TRIM(A.[Color Code]),'~',TRIM(A.[Size]),'~',TRIM(A.[Department Code]),'~',TRIM(A.[Production Stage Code]),'~',TRIM(A.[Factory Code]),'~',TRIM(A.[Table No]),'~',TRIM(A.[Lot No]),'~',TRIM(A.[Layers Quantity]),'~',TRIM(A.[Item No]))  ORDER BY a.[w_file_name] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TRX_PRODUCTION_ACTUAL_FS] A
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] IT ON trim(A.[Item ID]) = IT.[ITEM_ID] AND trim(A.[Color Code]) = ISNULL(IT.[COLOR_CODE],'') AND trim(A.[Size]) = ISNULL(IT.SIZE,'') AND IT.FACTORY_CODE = 'TP'
			LEFT JOIN [DWH].[W_MRP_MD_PROCESSING_PRICE_D] PP ON trim(A.[Item ID]) = PP.[ITEM_ID] AND trim(A.[Color Code]) = ISNULL(PP.[COLOR],'') AND trim(A.[Size]) = ISNULL(PP.SIZE,'')
			LEFT JOIN [DWH].[W_MRP_MD_DEPARTMENT_D] DP ON TRIM(A.[Department Code]) = DP.[DEPARTMENT_CODE] AND TRIM(A.[Factory Code]) = DP.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_PRODUCTION_CALENDAR_D] PC ON (TRIM(A.[Department Code]) = PC.[DEPARTMENT] OR PC.[DEPARTMENT] IS NULL) AND TRIM(A.[Factory Code]) = PC.[COMPANY] AND FORMAT(ISNULL(TRY_CAST(A.[Production Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') = PC.[DATE_ID]
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCTION_STAGE_D] PS ON TRIM(A.[Production Stage Code]) = PS.[PRODUCTION_STAGE_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_CONTRACT_F] CT ON TRIM(A.[PO ID]) = CT.[PO_ID]
			LEFT JOIN [DWH].[W_MRP_TRX_SALES_ORDER_F] OD ON TRIM(A.[PO ID])=OD.[PO_ID] AND TRIM(A.[Color Code]) = OD.[COLOR_CODE] AND TRIM(A.[Size]) = OD.[SIZE] AND OD.VENDOR_CODE IS NULL

	
		)
		insert into #W_MRP_TRX_PRODUCTION_ACTUAL_F_TMP
		select
			[DATE_WID],
			[PRODUCTION_DATE_WID],
			[ITEM_WID],
			[PROCESSING_PRICE_WID],
			[DEPARTMENT_WID],
			[PRODUCTION_STAGE_WID],
			[CONTRACT_WID],
			[PRODUCTION_DATE],
			[BATCH_NO],
			[CREATED_DATE],
			[ITEM_ID],
			[COLOR_CODE],
			[SIZE],
			[PO_ID],
			[PO_SOURCE],
			[DEPARTMENT_CODE],
			[PRODUCTION_STAGE_CODE],
			[FACTORY_CODE],
			[QUANTITY],
			[FOB_PRICE],
			[TABLE_NO],
			[LOT_NO],
			[LAYERS_QUANTITY],
			[ITEM_NO],
			[CARTON_QUANTITY],
			[PO_FACTORY],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;


		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

	
		update a
		set
		a.[PRODUCTION_DATE_WID]=                ISNULL(PC.ROW_WID,0) ,
		a.[ITEM_WID]=				ISNULL(IT.ROW_WID,0) ,
		a.[PROCESSING_PRICE_WID]=				ISNULL(PP.ROW_WID,0) ,
		a.[DEPARTMENT_WID]=				ISNULL(DP.ROW_WID,0) ,
		a.[PRODUCTION_STAGE_WID]=				ISNULL(PS.ROW_WID,0) ,
		a.[CONTRACT_WID]=				ISNULL(CT.ROW_WID,0) 

		from
		 [DWH].[W_MRP_TRX_PRODUCTION_ACTUAL_F] A
					LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] IT ON a.[ITEM_ID] = IT.[ITEM_ID] AND a.[COLOR_CODE] = ISNULL(IT.[COLOR_CODE],'') AND a.[Size] = ISNULL(IT.SIZE,'') AND IT.FACTORY_CODE = 'TP'
					LEFT JOIN [DWH].[W_MRP_MD_PROCESSING_PRICE_D] PP ON a.[ITEM_ID] = PP.[ITEM_ID] AND a.[COLOR_CODE] = ISNULL(PP.[COLOR],'') AND a.[Size] = ISNULL(PP.SIZE,'')
					LEFT JOIN [DWH].[W_MRP_MD_DEPARTMENT_D] DP ON a.[DEPARTMENT_CODE] = DP.[DEPARTMENT_CODE] AND a.[FACTORY_CODE] = DP.[FACTORY_CODE]
					LEFT JOIN [DWH].[W_MRP_PRODUCTION_CALENDAR_D] PC ON (a.[DEPARTMENT_CODE] = PC.[DEPARTMENT] OR PC.[DEPARTMENT] IS NULL) AND a.[FACTORY_CODE] = PC.[COMPANY] AND FORMAT(ISNULL(A.[Production_Date],CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') = PC.[DATE_ID]
					LEFT JOIN [DWH].[W_MRP_MD_PRODUCTION_STAGE_D] PS ON A.[Production_Stage_Code] = PS.[PRODUCTION_STAGE_CODE]
					LEFT JOIN [DWH].[W_MRP_MD_CONTRACT_F] CT ON a.[PO_ID] = CT.[PO_ID]
					LEFT JOIN [DWH].[W_MRP_TRX_SALES_ORDER_F] OD ON a.[PO_ID]=OD.[PO_ID] AND a.[COLOR_CODE] = OD.[COLOR_CODE] AND a.[SIZE] = OD.[SIZE] AND OD.VENDOR_CODE IS NULL



		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_PRODUCTION_PLAN_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_PRODUCTION_PLAN_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_PRODUCTION_PLAN_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_PRODUCTION_PLAN_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(ISNULL(TRY_CAST(A.[Day] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') [DATE_WID],
				ISNULL(PC.ROW_WID,0) [PRODUCTION_DATE_WID],
				ISNULL(IT.ROW_WID,0) [ITEM_WID],
				ISNULL(DP.ROW_WID,0) [DEPARTMENT_WID],
				trim(A.[Item ID]) [ITEM_ID],
				TRIM(A.[Factory Code]) [FACTORY_CODE],
				TRIM(A.[Line]) [LINE],
				A.[Day] [DAY],
				A.[Plan Quantity] [PLAN_QUANTITY],
				A.[Actual Quantity] [ACTUAL_QUANTITY],
				TRIM(A.[Category Group]) [CATEGORY_GROUP],
				ISNULL(TRY_CAST(A.[Item Factory] AS BIT),0) [ITEM_FACTORY],
				A.[Source]		 [SOURCE],
				A.[Created Date] [CREATED_DATE],
			    isnull(try_cast(A.[Delete Flag] as bit),0) W_DELETE_FLG,
				CONCAT(trim(A.[Item ID]),'~',TRIM(A.[Factory Code]),'~',TRIM(A.[Line]),'~',FORMAT(ISNULL(TRY_CAST(A.[Day] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd'),'~',ISNULL(TRY_CAST(A.[Item Factory] AS BIT),0)) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(trim(A.[Item ID]),'~',TRIM(A.[Factory Code]),'~',TRIM(A.[Line]),'~',FORMAT(ISNULL(TRY_CAST(A.[Day] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd'),'~',ISNULL(TRY_CAST(A.[Item Factory] AS BIT),0)) ORDER BY a.[w_file_name] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TRX_PRODUCTION_PLAN_FS] A
			LEFT JOIN (SELECT  MIN(ROW_WID) ROW_WID,[ITEM_ID],[FACTORY_CODE] FROM [DWH].[W_MRP_MD_PRODUCT_D] GROUP BY [ITEM_ID],[FACTORY_CODE]) IT ON 
			trim(A.[Item ID]) = IT.[ITEM_ID]
			AND (CASE WHEN ISNULL(TRY_CAST(A.[Item Factory] AS BIT),0) = 0 THEN 'TP' ELSE TRIM(A.[Factory Code]) END) = IT.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_DEPARTMENT_D] DP ON TRIM(A.[Line]) = DP.[DEPARTMENT_CODE] AND TRIM(A.[Factory Code]) = DP.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_PRODUCTION_CALENDAR_D] PC ON (TRIM(A.[Line]) = PC.[DEPARTMENT] OR PC.[DEPARTMENT] IS NULL) AND TRIM(A.[Factory Code]) = PC.[COMPANY] AND FORMAT(ISNULL(TRY_CAST(A.[Day] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') = PC.[DATE_ID]

	
		)
		insert into #W_MRP_TRX_PRODUCTION_PLAN_F_TMP
		select
			[DATE_WID],
			[PRODUCTION_DATE_WID],
			[ITEM_WID],
			[DEPARTMENT_WID],
			[ITEM_ID],
			[FACTORY_CODE],
			[LINE],
			[DAY],
			[PLAN_QUANTITY],
			[ACTUAL_QUANTITY],
			[CATEGORY_GROUP],
			[ITEM_FACTORY],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_PURCHASE_ORDER_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_PURCHASE_ORDER_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_PURCHASE_ORDER_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_PURCHASE_ORDER_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				CASE WHEN TRY_CAST(A.[Voucher Date] AS DATE) IS NULL THEN '19000101' ELSE FORMAT(TRY_CAST(A.[Voucher Date] AS DATE),'yyyyMMdd') end [DATE_WID],
				ISNULL(CU.ROW_WID,0) [CUSTOMER_WID],
				TRY_CAST(A.[Created Date] AS DATETIME) [CREATED_DATE],
				TRY_CAST(A.[Closed] AS BIT) [CLOSED],
				TRIM(A.[Item Name]) [ITEM_NAME],
				TRIM(A.[Terms of Purchase]) [TERMS_OF_PURCHASE],
				TRIM(A.[Payment Term]) [PAYMENT_TERM],
				TRY_CAST(A.[Price] AS FLOAT) [PRICE],
				TRIM(A.[PurchaseUnit]) [PURCHASEUNIT],
				TRIM(A.[Unit]) [UNIT],
				TRY_CAST(A.[Payment Time] AS FLOAT) [PAYMENT_TIME],
				TRY_CAST(A.[Conversion Factor] AS FLOAT) [CONVERSION_FACTOR],
				TRIM(A.[Payment Method]) [PAYMENT_METHOD],
				CAST(TRY_CAST(A.[Line ID] AS FLOAT) AS BIGINT) [LINE_ID],
				TRY_CAST(A.[In Stock] AS BIT) [IN_STOCK],
				TRIM(A.[Payment Type]) [PAYMENT_TYPE],
				TRIM(A.[Voucher Type]) [VOUCHER_TYPE],
				TRIM(A.[Place of purchase]) [PLACE_OF_PURCHASE],
				TRIM(A.[Currency]) [CURRENCY],
				TRIM(A.[Supplier Code]) [SUPPLIER_CODE],
				TRIM(A.[Item code]) [ITEM_CODE],
				CAST(TRY_CAST(A.[Item ID] AS FLOAT) AS BIGINT) [ITEM_ID],
				TRIM(A.[Color Code]) [COLOR_CODE],
				TRIM(A.[Source]) [SOURCE],
				TRY_CAST(A.[Prepayme Date] AS DATETIME) [PREPAYME_DATE],
				TRY_CAST(A.[Due Date] AS DATETIME) [DUE_DATE],
				TRY_CAST(A.[Voucher Date] AS DATETIME) [VOUCHER_DATE],
				TRY_CAST(A.[Purchase Quantity] AS FLOAT) [PURCHASE_QUANTITY],
				TRY_CAST(A.[Warehouse Quantity] AS FLOAT) [WAREHOUSE_QUANTITY],
				TRIM(A.[Voucher No]) [VOUCHER_NO],
				TRY_CAST(A.[Prepayment Amount] AS FLOAT) [PREPAYMENT_AMOUNT],
				TRY_CAST(A.[Amount] AS FLOAT) [AMOUNT],
			    isnull(try_cast(A.[Delete Flag] as bit),0) W_DELETE_FLG,
				CONCAT(TRIM(A.[Voucher No]),'~',CAST(TRY_CAST(A.[Line ID] AS FLOAT) AS BIGINT)) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(TRIM(A.[Voucher No]),'~',CAST(TRY_CAST(A.[Line ID] AS FLOAT) AS BIGINT)) ORDER BY a.[w_file_name] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TRX_PURCHASE_ORDER_FS] A
			LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU ON TRIM(A.[Supplier Code]) = CU.[CUSTOMER_CODE]
		)
		insert into #W_MRP_TRX_PURCHASE_ORDER_F_TMP
		select
			DATE_WID,
			[CUSTOMER_WID],
			[CREATED_DATE],
			[CLOSED],
			[ITEM_NAME],
			[TERMS_OF_PURCHASE],
			[PAYMENT_TERM],
			[PRICE],
			[PURCHASEUNIT],
			[UNIT],
			[PAYMENT_TIME],
			[CONVERSION_FACTOR],
			[PAYMENT_METHOD],
			[LINE_ID],
			[IN_STOCK],
			[PAYMENT_TYPE],
			[VOUCHER_TYPE],
			[PLACE_OF_PURCHASE],
			[CURRENCY],
			[SUPPLIER_CODE],
			[ITEM_CODE],
			[ITEM_ID],
			[COLOR_CODE],
			[SOURCE],
			[PREPAYME_DATE],
			[DUE_DATE],
			[VOUCHER_DATE],
			[PURCHASE_QUANTITY],
			[WAREHOUSE_QUANTITY],
			[VOUCHER_NO],
			[PREPAYMENT_AMOUNT],
			[AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		 

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_SALES_INVOICE_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_SALES_INVOICE_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_SALES_INVOICE_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_SALES_INVOICE_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(COALESCE(TRY_CAST(A.[Invoice Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') DATE_WID,
				ISNULL(IT.ROW_WID,0) [ITEM_WID],
				ISNULL(CT.ROW_WID,0) [CONTRACT_WID],
				ISNULL(IT.[CUSTOMER_WID],0) [CUSTOMER_WID],
				ISNULL(FC.ROW_WID,0) [FACTORY_WID],
				ISNULL(PM.ROW_WID,0) [PAYMENT_TERM_WID],
				TRIM(A.[Invoice Number]) [INVOICE_NUMBER],
				TRIM(A.[Invoice Line]) [INVOICE_LINE],
				TRY_CAST(A.[Voucher Date] AS DATETIME) [VOUCHER_DATE],
				TRY_CAST(A.[Invoice Date] AS DATETIME) [INVOICE_DATE],
				TRY_CAST(A.[Ship Run Date] AS DATETIME) [SHIP_RUN_DATE],
				TRY_CAST(A.[Bill Date] AS DATETIME) [BILL_DATE],
				trim(A.[Country Destination]) [COUNTRY_DESTINATION],
				trim(A.[Port Destination]) [PORT_DESTINATION],
				trim(A.[Transport Type]) [TRANSPORT_TYPE],
				trim(A.[PO ID]) [PO_ID],
				trim(A.[Item ID]) [ITEM_ID],
				trim(A.[Customer Code]) [CUSTOMER_CODE],
				trim(A.[Receive Customer Code]) [RECEIVE_CUSTOMER_CODE],
				trim(A.[Payment Customer Code]) [PAYMENT_CUSTOMER_CODE],
				trim(A.[Price Type]) [PRICE_TYPE],
				trim(A.[Payment Term]) [PAYMENT_TERM],
				trim(A.[Payment Method]) [PAYMENT_METHOD],
				trim(A.[Factory Code]) [FACTORY_CODE],
				trim(A.[Invoice Status]) [INVOICE_STATUS],
				trim(A.[Color Code]) [COLOR_CODE],
				trim(A.[SIZE]) [SIZE],
				A.[UOM] [UOM],
				A.[Currency] [CURRENCY],
				A.[Price Contract] [PRICE_CONTRACT],
				A.[Discount Percent] [DISCOUNT_PERCENT],
				A.[Price FOB] [PRICE_FOB],
				A.[Price Processing] [PRICE_PROCESSING],
				A.[Price CM] [PRICE_CM],
				A.[Price P] [PRICE_P],
				A.[Price T] [PRICE_T],
				A.[Price W] [PRICE_W],
				A.[Price E] [PRICE_E],
				A.[Price Print] [PRICE_PRINT],
				A.[Price Other] [PRICE_OTHER],
				A.[Clearance Declaration Style] [CLEARANCE_DECLARATION_STYLE],
				A.[Quantity] [QUANTITY],
				A.[Document Amount] [DOCUMENT_AMOUNT],
				trim(A.[Invoice Number Ref]) [INVOICE_NUMBER_REF],
				TRY_CAST(A.[Invoice Date Ref] AS DATETIME) [INVOICE_DATE_REF],
				A.[LC No] [LC_NO],
				A.[Bill No] [BILL_NO],
				A.[Inspection] [INSPECTION],
				A.[Gate] [GATE],
				A.[Exchange Rate] [EXCHANGE_RATE],
				A.[Quota] [QUOTA],
				A.[Terms of Delivery] [TERMS_OF_DELIVERY],
				A.[Carton] [CARTON_QUANTITY],
				A.[Net Weight] [NET_WEIGHT],
				A.[Gross Weight] [GROSS_WEIGHT],
				A.[Meas] [MEAS],
				A.[Bag Quantity] [BAG_QUANTITY],
				trim(A.[Bank Discount]) [BANK_DISCOUNT],
				try_cast(A.[Estimated Date of Discount] as datetime) [ESTIMATED_DATE_OF_DISCOUNT],
				try_cast(A.[ETD] as datetime) [ETD],
				try_cast(A.[Estimated Discount Fee] as float) [ESTIMATED_DISCOUNT_FEE],
				try_cast(A.[Banking Fee] as float) [BANKING_FEE],
				try_cast(A.[Estimated Discount Amount] as float) [ESTIMATED_DISCOUNT_AMOUNT],
				try_cast(A.[Amount Due] as float) [AMOUNT_DUE],
				try_cast(A.[Estimated Amount Due] as float) [ESTIMATED_AMOUNT_DUE],
				try_cast(A.[Estimated Discount Percent] as float) [ESTIMATED_DISCOUNT_PERCENT],
				trim(A.[Discount Status]) [DISCOUNT_STATUS],
				try_cast(A.[Due Date] as datetime) [DUE_DATE],
				try_cast(a.[Discount Date] as datetime) [DISCOUNT_DATE],
				try_cast(a.[Discount Amount] as float) [DISCOUNT_AMOUNT],
				try_cast(a.[Discount Rate] as float) [DISCOUNT_RATE],
				try_cast(a.[Receipt Date] as datetime) [RECEIPT_DATE],
				trim(a.[Receipt Bank]) [RECEIPT_BANK],
				trim(a.[Receipt No]) [RECEIPT_NO],
				A.[Source]		 [SOURCE],
				A.[Created Date] [CREATED_DATE],
			    isnull(try_cast(A.[Delete Flag] as bit),0) W_DELETE_FLG,
				CONCAT(TRIM(A.[Invoice Number]),'~',TRIM(A.[Invoice Line]),'~',trim(A.[Color Code]),'~',trim(A.[SIZE])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(TRIM(A.[Invoice Number]),'~',TRIM(A.[Invoice Line]),'~',trim(A.[Color Code]),'~',trim(A.[SIZE])) ORDER BY a.[w_file_name]DESC,A.[Voucher Date] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TRX_SALES_INVOICE_FS] A
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] IT ON trim(A.[Item ID]) = IT.[ITEM_ID] AND trim(A.[Color Code]) = ISNULL(IT.[COLOR_CODE],'') AND trim(A.[Size]) = ISNULL(IT.SIZE,'') AND IT.FACTORY_CODE = 'TP'
			LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU ON trim(A.[Customer Code]) = CU.[CUSTOMER_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] FC ON trim(A.[Factory Code]) = FC.[FACTORY_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_PAYMENT_TERM_D] PM ON trim(A.[Payment Term]) = PM.[PAYMENT_TERM_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_CONTRACT_F] CT ON trim(A.[PO ID]) = CT.[PO_ID]  
	
		)
		insert into #W_MRP_TRX_SALES_INVOICE_F_TMP
		select
			DATE_WID,
			[ITEM_WID],
			[CONTRACT_WID],
			[CUSTOMER_WID],
			[FACTORY_WID],
			[PAYMENT_TERM_WID],
			[INVOICE_NUMBER],
			[INVOICE_LINE],
			[VOUCHER_DATE],
			[INVOICE_DATE],
			[SHIP_RUN_DATE],
			[BILL_DATE],
			[COUNTRY_DESTINATION],
			[PORT_DESTINATION],
			[TRANSPORT_TYPE],
			[PO_ID],
			[ITEM_ID],
			[CUSTOMER_CODE],
			[RECEIVE_CUSTOMER_CODE],
			[PAYMENT_CUSTOMER_CODE],
			[PRICE_TYPE],
			[PAYMENT_TERM],
			[PAYMENT_METHOD],
			[FACTORY_CODE],
			[INVOICE_STATUS],
			[COLOR_CODE],
			[SIZE],
			[UOM],
			[CURRENCY],
			[PRICE_CONTRACT],
			[DISCOUNT_PERCENT],
			[PRICE_FOB],
			[PRICE_PROCESSING],
			[PRICE_CM],
			[PRICE_P],
			[PRICE_T],
			[PRICE_W],
			[PRICE_E],
			[PRICE_PRINT],
			[PRICE_OTHER],
			[CLEARANCE_DECLARATION_STYLE],
			[QUANTITY],
			[DOCUMENT_AMOUNT],
			[INVOICE_NUMBER_REF],
			[INVOICE_DATE_REF],
			[LC_NO],
			[BILL_NO],
			[INSPECTION],
			[GATE],
			[EXCHANGE_RATE],
			[QUOTA],
			[TERMS_OF_DELIVERY],
			[CARTON_QUANTITY],
			[NET_WEIGHT],
			[GROSS_WEIGHT],
			[MEAS],
			[BAG_QUANTITY],
			[BANK_DISCOUNT],
			[ESTIMATED_DATE_OF_DISCOUNT],
			[ETD],
			[ESTIMATED_DISCOUNT_FEE],
			[BANKING_FEE],
			[ESTIMATED_DISCOUNT_AMOUNT],
			[AMOUNT_DUE],
			[ESTIMATED_AMOUNT_DUE],
			[ESTIMATED_DISCOUNT_PERCENT],
			[DISCOUNT_STATUS],
			[DUE_DATE],
			[DISCOUNT_DATE],
			[DISCOUNT_AMOUNT],
			[DISCOUNT_RATE],
			[RECEIPT_DATE],
			[RECEIPT_BANK],
			[RECEIPT_NO],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		update a
		set
		a.[ITEM_WID]=                ISNULL(IT.ROW_WID,0),
		a.[CUSTOMER_WID]=				ISNULL(IT.[CUSTOMER_WID],0),
		a.[FACTORY_WID]=				ISNULL(FC.ROW_WID,0),
		a.[PAYMENT_TERM_WID]=				ISNULL(PM.ROW_WID,0),
		a.[CONTRACT_WID] = ISNULL(CT.ROW_WID,0)
		from
		[DWH].[W_MRP_TRX_SALES_INVOICE_F] A
					LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] IT ON a.[ITEM_ID] = IT.[ITEM_ID] AND a.[COLOR_CODE] = ISNULL(IT.[COLOR_CODE],'') AND a.[Size] = ISNULL(IT.SIZE,'') AND IT.FACTORY_CODE = 'TP'
					LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU ON a.[CUSTOMER_CODE] = CU.[CUSTOMER_CODE]
					LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] FC ON a.[FACTORY_CODE] = FC.[FACTORY_CODE]
					LEFT JOIN [DWH].[W_MRP_MD_PAYMENT_TERM_D] PM ON A.[Payment_Term] = PM.[PAYMENT_TERM_CODE]
					LEFT JOIN [DWH].[W_MRP_MD_CONTRACT_F] CT ON A.[PO_ID] = CT.[PO_ID]  

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_SALES_ORDER_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_SALES_ORDER_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_SALES_ORDER_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_SALES_ORDER_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(COALESCE(TRY_CAST(A.[TPG Delivery Plan Date] AS DATETIME),TRY_CAST(A.[Customer Delivery Plan Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') DATE_WID,
				ISNULL(CT.ROW_WID,0) [CONTRACT_WID],
				ISNULL(IT.ROW_WID,0) [ITEM_WID],
				ISNULL(CU.ROW_WID,0) [CUSTOMER_WID],
				ISNULL(FC.ROW_WID,0) [FACTORY_WID],
				trim(A.[PO ID]) [PO_ID],
				trim(A.[PO Number]) [PO_NUMBER],
				trim(A.[PO Batch]) [PO_BATCH],
				A.[PO Created Date] [PO_CREATED_DATE],
				TRY_CAST(A.[Customer Delivery Plan Date] AS DATETIME) [CUSTOMER_DELIVERY_PLAN_DATE],
				TRY_CAST(A.[TPG Delivery Plan Date] AS DATETIME) [TPG_DELIVERY_PLAN_DATE],
				A.[PO Source] [PO_SOURCE],
				trim(A.[Item ID]) [ITEM_ID],
				trim(A.[Customer Code]) [CUSTOMER_CODE],
				trim(A.[Receive Customer Code]) [RECEIVE_CUSTOMER_CODE],
				trim(A.[Payment Customer Code]) [PAYMENT_CUSTOMER_CODE],
				trim(A.[Contract ID]) [CONTRACT_ID],
				trim(A.[PO Status]) [PO_STATUS],
				trim(A.[PO number Ref]) [PO_NUMBER_REF],
				trim(A.[Color Code]) [COLOR_CODE],
				trim(A.[Color ]) [COLOR],
				trim(A.[Style]) [STYLE],
				trim(A.[Sub Style]) [SUB_STYLE],
				trim(A.[Size]) [SIZE],
				A.[Country] [COUNTRY],
				A.[Division] [DIVISION],
				A.[Label] [LABEL],
				A.[Hanger] [HANGER],
				A.[Season] [SEASON],
				A.[SeasonCode] [SEASONCODE],
				A.[Plan Quantity] [PLAN_QUANTITY],
				A.[Mode Price] [MODE_PRICE],
				A.[Quantity DZ] [QUANTITY_DZ],
				A.[Price DZ] [PRICE_DZ],
				A.[UC] [UC],
				A.[Discount Percent] [DISCOUNT_PERCENT],
				A.[Quantity Pcs] [QUANTITY_PCS],
				A.[FOB Price] [FOB_PRICE],
				try_cast(a.[FOB Price PO] as float) [FOB_PRICE_PO],
				try_cast(a.[Price Total] as float) [PRICE_TOTAL],
				try_cast(a.[Price Total PO] as float) [PRICE_TOTAL_PO],
				TRIM(A.[Vendor Code]) [VENDOR_CODE],
				A.[Style Export] [STYLE_EXPORT],
				A.[Delete Flag] [DELETE_FLAG],
				A.[Fix Shortship] [FIX_SHORTSHIP],
				A.[Over Ship Quantity] [OVER_SHIP_QUANTITY],
				A.[Amount] [AMOUNT],
				A.[PO Packing Quantity Pcs] [PO_PACKING_QUANTITY_PCS],
				A.[Source] [SOURCE],
				A.[Created Date] [CREATED_DATE],
			    ISNULL(TRY_CAST(A.[Delete Flag] AS BIT),0) W_DELETE_FLG,
				CONCAT(trim(A.[PO ID]),'~',trim(A.[Color Code]),'~',trim(A.[Size]),'~',TRIM(A.[Vendor Code])) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(trim(A.[PO ID]),'~',trim(A.[Color Code]),'~',trim(A.[Size]),'~',TRIM(A.[Vendor Code])) ORDER BY a.[w_file_name] DESC,A.[PO Created Date] DESC) AS ROW_NUM
			FROM [STG].[W_MRP_TRX_SALES_ORDER_FS] A
			LEFT JOIN [DWH].[W_MRP_MD_CONTRACT_F] CT ON trim(A.[Contract ID]) = CT.[CONTRACT_ID] AND trim(A.[PO ID]) = CT.[PO_ID]  
			LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] IT ON trim(A.[Item ID]) = IT.[ITEM_ID] AND trim(A.[Color Code]) = ISNULL(IT.[COLOR_CODE],'') AND trim(A.[Size]) = ISNULL(IT.SIZE,'') AND IT.FACTORY_CODE = 'TP'
			LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU ON trim(A.[Customer Code]) = CU.[CUSTOMER_CODE]
			LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] FC ON ISNULL(TRIM(A.[Vendor Code]),'') = FC.[FACTORY_CODE]

	
		)
		insert into #W_MRP_TRX_SALES_ORDER_F_TMP
		select
			DATE_WID,
			[CONTRACT_WID],
			[ITEM_WID],
			[CUSTOMER_WID],
			[FACTORY_WID],
			[PO_ID],
			[PO_NUMBER],
			[PO_BATCH],
			[PO_CREATED_DATE],
			[CUSTOMER_DELIVERY_PLAN_DATE],
			[TPG_DELIVERY_PLAN_DATE],
			[PO_SOURCE],
			[ITEM_ID],
			[CUSTOMER_CODE],
			[RECEIVE_CUSTOMER_CODE],
			[PAYMENT_CUSTOMER_CODE],
			[CONTRACT_ID],
			[PO_STATUS],
			[PO_NUMBER_REF],
			[COLOR_CODE],
			[COLOR],
			[STYLE],
			[SUB_STYLE],
			[SIZE],
			[COUNTRY],
			[DIVISION],
			[LABEL],
			[HANGER],
			[SEASON],
			[SEASONCODE],
			[PLAN_QUANTITY],
			[MODE_PRICE],
			[QUANTITY_DZ],
			[PRICE_DZ],
			[UC],
			[DISCOUNT_PERCENT],
			[QUANTITY_PCS],
			[FOB_PRICE],
			[FOB_PRICE_PO],
			[PRICE_TOTAL],
			[PRICE_TOTAL_PO],
			[VENDOR_CODE],
			[STYLE_EXPORT],
			[DELETE_FLAG],
			[FIX_SHORTSHIP],
			[OVER_SHIP_QUANTITY],
			[AMOUNT],
			[PO_PACKING_QUANTITY_PCS],
			[SOURCE],
			[CREATED_DATE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/


		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		 update a
		 set
			a.[CONTRACT_WID] =				ISNULL(CT.ROW_WID,0) ,
			a.[ITEM_WID] =				ISNULL(IT.ROW_WID,0) ,
			a.[CUSTOMER_WID] =				ISNULL(CU.ROW_WID,0) ,
			a.[FACTORY_WID] =				ISNULL(FC.ROW_WID,0) 
		 from
		 [DWH].[W_MRP_TRX_SALES_ORDER_F] A
					LEFT JOIN [DWH].[W_MRP_MD_CONTRACT_F] CT ON a.[CONTRACT_ID] = CT.[CONTRACT_ID] AND a.[PO_ID] = CT.[PO_ID]  
					LEFT JOIN [DWH].[W_MRP_MD_PRODUCT_D] IT ON a.[ITEM_ID] = IT.[ITEM_ID] AND a.[COLOR_CODE] = ISNULL(IT.[COLOR_CODE],'') AND A.[Size] = ISNULL(IT.SIZE,'') AND IT.FACTORY_CODE = 'TP'
					LEFT JOIN [DWH].[W_MRP_MD_CUSTOMER_D] CU ON a.[CUSTOMER_CODE] = CU.[CUSTOMER_CODE]
					LEFT JOIN [DWH].[W_MRP_MD_FACTORY_D] FC ON a.[VENDOR_CODE] = FC.[FACTORY_CODE]

		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_SALES_ORDER_JOURNA_AGG_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_SALES_ORDER_JOURNA_AGG_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_SALES_ORDER_JOURNA_AGG_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_SALES_ORDER_JOURNA_F',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				A.[CUSTOMER_WID],
				A.[CUSTOMER_CODE],
				A.[SNAPSHOT_DATE_WID],
				A.[DELIVERY_DATE_WID],
				A.[CONTRACT_WID],
				A.[ITEM_WID],
				A.[PO_ID],
				A.[ITEM_ID],
				A.PLAN_QUANTITY,
				A.PLAN_AMOUNT,
				A.ACTUAL_QUANTITY,
				A.ACTUAL_AMOUNT,
				A.PLAN_QUANTITY-A.ACTUAL_QUANTITY REMAINING_QUANTITY,
				A.PLAN_AMOUNT-A.ACTUAL_AMOUNT   REMAINING_AMOUNT,
			    '0' W_DELETE_FLG,
				NULL W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				@v_batch_id W_BATCH_ID,
				1 AS ROW_NUM
			FROM (
				SELECT
				A.[CUSTOMER_WID],
				B.[CUSTOMER_CODE],
				A.[SNAPSHOT_DATE_WID],
				ISNULL(C.[DATE_WID],A.[DELIVERY_DATE_WID]) [DELIVERY_DATE_WID],
				A.[CONTRACT_WID],
				A.[ITEM_WID],
				A.[PO_ID],
				A.[ITEM_ID],
				A.[QUANTITY_PCS]	PLAN_QUANTITY,
				A.[TOTAL]			PLAN_AMOUNT,
				0 ACTUAL_QUANTITY,
				0 ACTUAL_AMOUNT
				FROM 
				(
				SELECT 
					  [CUSTOMER_WID]
					  ,[CL_DATE_WID] [SNAPSHOT_DATE_WID]
					  ,[DATE_WID] [DELIVERY_DATE_WID]
					  ,[CONTRACT_WID]
					  ,[ITEM_WID]
					  ,[PO_ID]
					  ,[ITEM_ID]
					  ,[QUANTITY_PCS]
					  ,[TOTAL]
				FROM (
				SELECT 
					   A.[DATE_WID]
					  ,A.[SNAPSHOT_DATE]
					  ,B.[DATE_WID] [CL_DATE_WID]
					  ,A.[ITEM_WID]
					  ,A.[CONTRACT_WID]
					  ,A.[CUSTOMER_WID]
					  ,A.[CREATED_DATE]
					  ,A.[ITEM_ID]
					  ,A.[PO_ID]
					  ,A.[CUSTOMER_DELIVERY_PLAN_DATE]
					  ,A.[QUANTITY_PCS]
					  ,A.[TOTAL]
					  ,'0' W_DELETE_FLG
					  ,ROW_NUMBER() OVER(PARTITION BY A.[ITEM_ID],A.[PO_ID],B.[DATE_WID],A.[CONTRACT_WID] ORDER BY A.[CREATED_DATE] DESC) RN
				  FROM [DWH].[W_MRP_TRX_SALES_ORDER_JOURNA_F] A JOIN [DWH].[W_MRP_MD_SALE_JOURNAL_DATE_REPORT_D] B ON A.[SNAPSHOT_DATE] <= B.[DATE_WID]
				  AND  b.W_DELETE_FLG ='0' WHERE a.W_DELETE_FLG = '0'

				  ) A WHERE RN = 1  

				  ) A JOIN [DWH].[W_MRP_MD_CUSTOMER_D] B ON A.[CUSTOMER_WID] = B.ROW_WID
				  
				  left join  (SELECT  [PO_ID],Min([DATE_WID]) [DATE_WID] FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] where [DATE_WID] <> '19000101' GROUP BY [PO_ID]) c
					on a.[PO_ID] = c.[PO_ID] and left(A.[SNAPSHOT_DATE_WID],4) =left(c.[DATE_WID],4) 
				  
				  left join [DWH].[W_MRP_MD_PRODUCT_D] e on a.[ITEM_WID] = e.row_wid
				  left join (SELECT  [PO_ID], MAX([PO_SOURCE])[PO_SOURCE] FROM [DWH].[W_MRP_TRX_SALES_ORDER_F] where W_DELETE_FLG = '0' AND ISNULL(VENDOR_CODE,'')='' GROUP BY [PO_ID]) D on a.[PO_ID] = D.[PO_ID]


				  where 
				  (isnull(e.[ITEM_ID_REF],0)=0 or e.[ITEM_MODEL] ='LE')
				  and D.[PO_SOURCE] ='SX'
				  and left(ISNULL(C.[DATE_WID],A.[DELIVERY_DATE_WID]),4) >= left(A.[SNAPSHOT_DATE_WID],4)
				  
				  UNION ALL
				  SELECT
				  A.[CUSTOMER_WID],
				  A.[CUSTOMER_CODE],
				  B.[DATE_WID] [SNAPSHOT_DATE_WID],
				  A.[DELIVERY_DATE_WID],
				  A.[CONTRACT_WID],
				  A.[ITEM_WID],
				  A.[PO_ID],
				  A.[ITEM_ID],
				  0 PLAN_QUANTITY,
				  0 PLAN_AMOUNT,
				  A.[QUANTITY] ACTUAL_QUANTITY,
				  A.[AMOUNT]   ACTUAL_AMOUNT
				  FROM
				  (
				  SELECT [CUSTOMER_WID],[CUSTOMER_CODE],[DATE_WID] [DELIVERY_DATE_WID],[CONTRACT_WID],[ITEM_WID],[PO_ID],[ITEM_ID],SUM([QUANTITY]) [QUANTITY],SUM([DOCUMENT_AMOUNT]) [AMOUNT] FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F] where [DATE_WID] <> '19000101' AND W_DELETE_FLG = '0' GROUP BY [CUSTOMER_WID],[CUSTOMER_CODE],[DATE_WID],[ITEM_WID],[PO_ID],[ITEM_ID],[CONTRACT_WID]) A 
				  JOIN [DWH].[W_MRP_MD_SALE_JOURNAL_DATE_REPORT_D] B ON LEFT(A.[DELIVERY_DATE_WID],4) = LEFT(B.[DATE_WID],4) AND LEFT(A.[DELIVERY_DATE_WID],6) < LEFT(B.[DATE_WID],6) AND  b.W_DELETE_FLG ='0' 
		

				)
				  A
		)
		insert into #W_MRP_TRX_SALES_ORDER_JOURNA_AGG_F_TMP
		select
			[CUSTOMER_WID],
			[CUSTOMER_CODE],
			[SNAPSHOT_DATE_WID],
			[DELIVERY_DATE_WID],
			[CONTRACT_WID],
			[ITEM_WID],
			[PO_ID],
			[ITEM_ID],
			[PLAN_QUANTITY],
			[PLAN_AMOUNT],
			[ACTUAL_QUANTITY],
			[ACTUAL_AMOUNT],
			[REMAINING_QUANTITY],
			[REMAINING_AMOUNT],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

		/*
		with cte2 as(
		select
			a.[CUSTOMER_WID],
			a.[CUSTOMER_CODE],
			a.[SNAPSHOT_DATE_WID],
			c.[DATE_WID] [DELIVERY_DATE_WID],
			a.[CONTRACT_WID],
			a.[ITEM_WID],
			a.[PO_ID],
			a.[ITEM_ID],
			a.[PLAN_QUANTITY],
			a.[PLAN_AMOUNT],
			CASE WHEN LEFT(C.[DATE_WID],6) >= LEFT(A.[SNAPSHOT_DATE_WID],6) THEN 0 ELSE  C.QUANTITY END [ACTUAL_QUANTITY],
			CASE WHEN LEFT(C.[DATE_WID],6) >= LEFT(A.[SNAPSHOT_DATE_WID],6) THEN 0 ELSE  C.AMOUNT END [ACTUAL_AMOUNT],
			a.[PLAN_QUANTITY]-(CASE WHEN LEFT(C.[DATE_WID],6) >= LEFT(A.[SNAPSHOT_DATE_WID],6) THEN 0 ELSE  C.QUANTITY END) [REMAINING_QUANTITY],
			a.[PLAN_AMOUNT]-  (CASE WHEN LEFT(C.[DATE_WID],6) >= LEFT(A.[SNAPSHOT_DATE_WID],6) THEN 0 ELSE  C.AMOUNT END) [REMAINING_AMOUNT],
			a.[W_DELETE_FLG],
			a.[W_INTEGRATION_ID],
			a.[W_INSERT_DT],
			a.[W_UPDATE_DT],
			a.[W_DATASOURCE_NUM_ID],
			a.[W_BATCH_ID]
		from #W_MRP_TRX_SALES_ORDER_JOURNA_AGG_F_TMP a
		join  (SELECT  [PO_ID],LEFT(Min([DATE_WID]),6)+'01' [DATE_WID],SUM([QUANTITY]) [QUANTITY],SUM([DOCUMENT_AMOUNT]) [AMOUNT] FROM [DWH].[W_MRP_TRX_SALES_INVOICE_F]where [DATE_WID] <> '19000101' GROUP BY [PO_ID]) c
			on a.[PO_ID] = c.[PO_ID] and left(A.[DELIVERY_DATE_WID],4) <> left(c.[DATE_WID],4)

		)insert into #W_MRP_TRX_SALES_ORDER_JOURNA_AGG_F_TMP select * from cte2
		*/

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		*/
		SET  @v_script = N'TRUNCATE TABLE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
		


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_SALES_ORDER_JOURNA_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_SALES_ORDER_JOURNA_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_SALES_ORDER_JOURNA_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_SALES_ORDER_JOURNA_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
					
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		EXEC sp_executesql @v_script;
		

		WITH CTE as (
			SELECT
				FORMAT(ISNULL(TRY_CAST(A.[Customer Delivery Plan Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') [DATE_WID],
				FORMAT(ISNULL(TRY_CAST(A.[Created Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd') [SNAPSHOT_DATE],
				ISNULL(IT.ROW_WID,0) [ITEM_WID],
				ISNULL(CT.ROW_WID,0) [CONTRACT_WID],
				ISNULL(IT.[CUSTOMER_WID],0) [CUSTOMER_WID],
				A.[Created Date] [CREATED_DATE],
				trim(A.[Item ID]) [ITEM_ID],
				trim(A.[PO ID]) [PO_ID],
				TRY_CAST(A.[Customer Delivery Plan Date] AS DATETIME) [CUSTOMER_DELIVERY_PLAN_DATE],
				A.[Quantity Pcs] [QUANTITY_PCS],
				A.[Total] [TOTAL],
				A.[Source] [SOURCE],
			    A.[Delete Flag] W_DELETE_FLG,
				CONCAT(trim(A.[PO ID]),'~',trim(A.[Item ID]),'~',FORMAT(ISNULL(TRY_CAST(A.[Customer Delivery Plan Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd'),'~',FORMAT(ISNULL(TRY_CAST(A.[Created Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd')) W_INTEGRATION_ID,
				DATEADD(HH, 7, GETDATE()) AS W_INSERT_DT,
				DATEADD(HH, 7, GETDATE()) AS W_UPDATE_DT,
				@v_datasource_num_id W_DATASOURCE_NUM_ID,
				A.W_BATCH_ID,
				row_number() OVER (PARTITION BY CONCAT(trim(A.[PO ID]),'~',trim(A.[Item ID]),'~',FORMAT(ISNULL(TRY_CAST(A.[Customer Delivery Plan Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd'),'~',FORMAT(ISNULL(TRY_CAST(A.[Created Date] AS DATETIME),CAST('1900-01-01' AS DATETIME)),'yyyyMMdd'))  ORDER BY a.[w_file_name]DESC,try_cast(A.[Created Date] as datetime) DESC) AS ROW_NUM
	
			FROM [STG].[W_MRP_TRX_SALES_ORDER_JOURNA_FS] A
			LEFT JOIN (SELECT  MIN(ROW_WID) ROW_WID,MIN(CUSTOMER_WID) CUSTOMER_WID,[ITEM_ID] FROM [DWH].[W_MRP_MD_PRODUCT_D] WHERE FACTORY_CODE = 'TP' GROUP BY [ITEM_ID]) IT ON trim(A.[Item ID]) = IT.[ITEM_ID]
			LEFT JOIN [DWH].[W_MRP_MD_CONTRACT_F] CT ON trim(A.[PO ID]) = CT.[PO_ID]


	
		)
		insert into #W_MRP_TRX_SALES_ORDER_JOURNA_F_TMP
		select
			[DATE_WID],
			[SNAPSHOT_DATE],
			[ITEM_WID],
			[CONTRACT_WID],
			[CUSTOMER_WID],
			[CREATED_DATE],
			[ITEM_ID],
			[PO_ID],
			[CUSTOMER_DELIVERY_PLAN_DATE],
			[QUANTITY_PCS],
			[TOTAL],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;

	

		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		
		*/
		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;

		update a 
		set 
			a.[ITEM_WID]=			ISNULL(IT.ROW_WID,0)			
			,a.[CONTRACT_WID]=			ISNULL(CT.ROW_WID,0)		
			,a.[CUSTOMER_WID]=			ISNULL(IT.[CUSTOMER_WID],0) 
		from
			
					[DWH].[W_MRP_TRX_SALES_ORDER_JOURNA_F] A
					LEFT JOIN (SELECT  MIN(ROW_WID) ROW_WID,MIN(CUSTOMER_WID) CUSTOMER_WID,[ITEM_ID] FROM [DWH].[W_MRP_MD_PRODUCT_D] WHERE FACTORY_CODE = 'TP' GROUP BY [ITEM_ID]) IT ON a.[ITEM_ID] = IT.[ITEM_ID]
					LEFT JOIN [DWH].[W_MRP_MD_CONTRACT_F] CT ON a.[PO_ID] = CT.[PO_ID]


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [DWH].[proc_W_MRP_TRX_TPG_REPORT_YEAR_F]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [DWH].[proc_W_MRP_TRX_TPG_REPORT_YEAR_F] @p_batch_id [bigint] AS
declare
	@v_batch_id bigint,
	@v_job_id int,
	@v_log_status varchar(20),
	@v_log_message varchar(2000),
	@v_error_code varchar(2000),
	@v_error_message varchar(2000),
	@v_error_serverity int,
	@v_batch_type varchar(20),
	@v_curr_date datetime = DATEADD(hour,7,getdate()),
	@v_total_batch int,
	@v_abort_job int,
	@v_datasource_num_id int,
	@v_tgt_table varchar(100) ='W_MRP_TRX_TPG_REPORT_YEAR_F',
	@V_src_table nvarchar(100) = 'W_MRP_TRX_TPG_REPORT_YEAR_FS',
	@v_tgt_table_schema varchar(100) ='DWH',
	@v_datasource_name varchar(100)='MRP',
	@v_tmp_dwh_table nvarchar(100),
	@v_string varchar(max),
	@p_return_code [bigint] ,
	@p_return_msg [varchar](4000),
	@v_scd1_update_script nvarchar(max),
	@v_script nvarchar(max);
begin



	begin try
		select @v_datasource_num_id=[DATASOURCE_NUM_ID] from [ADF].[ETL_DATASOURCE] where [DATASOURCE_VALUE]=@v_datasource_name;
		select @v_job_id=JOB_ID from ADF.ETL_JOB where TARGET_TABLE=@v_tgt_table;
		select @v_batch_id=@p_batch_id;

		-- Begin process
		set @v_log_status = 'START';
		set @v_log_message = 'Start process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


	
		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Create temporary table of process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
			
		SET @v_tmp_dwh_table = N'#' + @v_tgt_table + N'_TMP';
		IF OBJECT_ID('tempdb..'+@v_tmp_dwh_table) IS NOT NULL
		begin
			SET @v_script = 'DROP TABLE '+@v_tmp_dwh_table
			EXEC sp_executesql @v_script;
		end
				
			--1. Create temp table based on structure of DWH table - use function
		EXEC [ETL].[fnc_get_table_structure] 
			@p_src_tablename = @v_tgt_table,
			@p_src_tablechema = @v_tgt_table_schema,
			@p_get_datatype = 'Y', 
			@p_get_wid_col = 'N',
			@v_script = @v_script OUT, 
			@v_return_code = @p_return_code OUT, 
			@v_return_message = @p_return_msg OUT		
		SET @v_script = 'CREATE TABLE ' + @v_tmp_dwh_table + ' ( '+ @v_script
		SET @v_script = @v_script + ' )'
		PRINT 'Create temp dwh table ' + CHAR(13) + @v_script
		
		EXEC sp_executesql @v_script;
		
		
		
		WITH CTE as (
			SELECT
				trim([Type]) [TYPE],
				trim([Value]) [VALUE],
				trim(ISNULL([Factory Code],'')) [FACTORY_CODE],
				try_cast([Date] as DATE) [DATE],
			    ISNULL(try_cast([Total]AS FLOAT),0)  AS [TOTAL],
 				trim([Type Contract]) AS [TYPE_CONTRACT],
				try_cast([Created Date] as datetime) [CREATED_DATE],
			    trim([Source]) [SOURCE],
				isnull(try_cast([Delete Flag] as bit),0) as W_DELETE_FLG,
				concat(TRIM([Type]),'~',TRIM([Value]),'~',TRIM(ISNULL([Factory Code],'')),'~',format(TRY_CAST([Date] AS DATETIME),'yyyyMMdd')) W_INTEGRATION_ID,
			    190001 W_VERSION_PERIOD,
			    cast('19000101' as date) as W_EFFECTIVE_FROM_DT,
			    cast('24001231' as date) as W_EFFECTIVE_TO_DT,
			    'Y' W_CURRENT_FLG,
			    DATEADD(HH, 7, GETDATE()) as W_INSERT_DT,
			    DATEADD(HH, 7, GETDATE()) as W_UPDATE_DT,
			    @v_datasource_num_id W_DATASOURCE_NUM_ID,
			    W_BATCH_ID,
			    row_number() over (partition by concat(TRIM([Type]),'~',TRIM([Value]),'~',TRIM(ISNULL([Factory Code],'')),'~',format(TRY_CAST([Date] AS DATETIME),'yyyyMMdd'))
				order by [w_file_name] desc) as ROW_NUM
			FROM [STG].W_MRP_TRX_TPG_REPORT_YEAR_FS
		)
	

		insert into  #W_MRP_TRX_TPG_REPORT_YEAR_F_TMP
		select
			[TYPE],
			[VALUE],
			[FACTORY_CODE],
			[DATE],
			[TOTAL],
			[TYPE_CONTRACT],
			[CREATED_DATE],
			[SOURCE],
			[W_DELETE_FLG],
			[W_INTEGRATION_ID],
			[W_VERSION_PERIOD],
			[W_EFFECTIVE_FROM_DT],
			[W_EFFECTIVE_TO_DT],
			[W_CURRENT_FLG],
			[W_INSERT_DT],
			[W_UPDATE_DT],
			[W_DATASOURCE_NUM_ID],
			[W_BATCH_ID]
		from CTE
		where ROW_NUM=1;
	
	
		-- End process

		set @v_log_status = 'INFO';
		set @v_log_message = 'Update new attribute in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

		/*
		SET @v_script = 'update tar set tar.W_DELETE_FLG = ''Y'', W_UPDATE_DT = DATEADD(HH, 7, GETDATE()) from '+ @p_tgt_table+' tar inner join (SELECT DISTINCT[DATE_WID],[VERSION] FROM ' + @v_tmp_dwh_table +') src on tar.DATE_WID = src.DATE_WID and tar.VERSION = src.VERSION'
		EXEC sp_executesql @v_script;
		*/

		EXEC [ETL].[fnc_get_scd1_update_statement] 
					@p_tgt_tablename = @V_tgt_table,
					@p_tgt_tableschema = @v_tgt_table_schema,
					@v_scd1_update_script = @v_scd1_update_script OUT
		
		SET @v_script = N'UPDATE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + CHAR(13)
		SET @v_script = @v_script + N' SET ' + @v_scd1_update_script + CHAR(13)
		SET @v_script = @v_script + N' FROM ' + @v_tmp_dwh_table + ' SRC' + CHAR(13)
		SET @v_script = @v_script + N' WHERE ' +@v_tgt_table_schema+'.'+ @V_tgt_table + N'.W_INTEGRATION_ID = SRC.W_INTEGRATION_ID' + CHAR(13)
		EXEC sp_executesql @v_script;

		-- End process
		set @v_log_status = 'INFO';
		set @v_log_message = 'Insert new data in process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message


		SET @v_script =
				'INSERT INTO ' + @v_tgt_table_schema+'.'+ @V_tgt_table +
				' SELECT * FROM '+@v_tmp_dwh_table+' WHERE [W_INTEGRATION_ID] NOT IN (SELECT DISTINCT [W_INTEGRATION_ID] FROM '+@v_tgt_table_schema+'.'+ @V_tgt_table+')'
				EXEC sp_executesql @v_script;


		-- End process
		set @v_log_status = 'END';
		set @v_log_message = 'End process SIL '+@v_tgt_table;
		set @v_error_code = null;
		set @v_error_message = null;

		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message

	end try
	begin catch
		SELECT   
			@v_error_message = ERROR_MESSAGE(),  
			@v_error_serverity = ERROR_SEVERITY(),  
			@v_error_code = ERROR_STATE();  

		set @v_log_status = 'ERROR';
		set @v_log_message = 'Cannot End Batch ';
				
		-- Insert data to table LOG
		execute [ADF].[proc_etl_log_message] 
			@p_batch_id			= @v_batch_id,
			@p_job_id			= @v_job_id,
			@p_log_status		= @v_log_status,
			@p_log_message		= @v_log_message,
			@p_error_code		= @v_error_code,
			@p_error_message	= @v_error_message
  
		RAISERROR (@v_error_message, -- Message text.  
					@v_error_serverity, -- Severity.  
					@v_error_code -- State.  
					);  
	end catch

end;
GO
/****** Object:  StoredProcedure [ETL].[fnc_get_scd1_update_statement]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ETL].[fnc_get_scd1_update_statement] @p_tgt_tablename [varchar](100),@p_tgt_tableschema [varchar](100),@v_scd1_update_script [nvarchar](max) OUT AS
BEGIN
	DECLARE 
		@p_schema nvarchar(100),
		@p_tablename nvarchar(100),
		@v_tmp_script nvarchar(100),
		@v_script nvarchar(max),
		@v_max_rownum int,
		@v_rownum int,
		@v_column_name nvarchar(100)
	BEGIN
		SET @p_schema = @p_tgt_tableschema
		SET @p_tablename = @p_tgt_tablename
	
		SET @v_tmp_script = N'#' + @p_tablename + '_TMP_SCD1_UPDATE'
		SET @v_scd1_update_script = N''

		IF OBJECT_ID('tempdb..'+@v_tmp_script) IS NOT NULL
			BEGIN
				SET @v_script = N'drop table ' + @v_tmp_script;
				EXEC sp_executesql @v_script;
			END;

		SET @v_script ='CREATE TABLE ' + @v_tmp_script + ' WITH ( DISTRIBUTION = ROUND_ROBIN) AS '
		SET @v_script = @v_script + N'SELECT COLUMN_NAME, ROW_NUMBER() OVER (ORDER BY COLUMN_NAME) AS ROWNUM'
		SET @v_script = @v_script + N' FROM INFORMATION_SCHEMA.COLUMNS'
		SET @v_script = @v_script + N' WHERE TABLE_NAME = ''' + @p_tablename + ''' AND TABLE_SCHEMA = ''' + @p_schema + ''''
		SET @v_script = @v_script + N'  AND COLUMN_NAME NOT LIKE ''ROW_WID'''
		/*
		SET @v_script = @v_script + N' 	AND COLUMN_NAME NOT IN (SELECT COLUMN_NAME FROM ETL.ETL_SCD WHERE SCD_TYPE = 2 AND ACTIVE_FLG = ''Y'' AND TABLE_NAME = ''' + @p_tgt_tablename + ''')'
		*/
		SET @v_script = @v_script + N'	AND COLUMN_NAME NOT IN (''W_INTEGRATION_ID'',''W_INSERT_DT'',''W_EFFECTIVE_FROM_DT'',''W_EFFECTIVE_TO_DT'',''W_CURRENT_FLG'',''W_DATASOURCE_NUM_ID'')'
		EXEC sp_executesql @v_script

		--Get max rownum in tmp_script table
		SET @v_script = 'SELECT @v_max_rownum = MAX(ROWNUM) FROM ' + @v_tmp_script
		EXEC sp_executesql @v_script,  N'@v_max_rownum int OUTPUT', @v_max_rownum = @v_max_rownum OUTPUT;

		SET @v_rownum = 1
		SET @v_script = 'SELECT @v_column_name = COLUMN_NAME FROM ' + @v_tmp_script + ' WHERE ROWNUM = @p_rownum'
		WHILE @v_rownum <= @v_max_rownum
			BEGIN
				EXEC sp_executesql @v_script
					, N'@p_rownum int, @v_column_name nvarchar(100) OUTPUT'
					, @p_rownum = @v_rownum
					, @v_column_name = @v_column_name OUTPUT
				IF @v_rownum = @v_max_rownum
					SET @v_scd1_update_script = @v_scd1_update_script +'['+ @v_column_name + '] = ' + 'SRC.[' + @v_column_name +']'
				ELSE 
					SET @v_scd1_update_script = @v_scd1_update_script +'['+  @v_column_name + '] = ' + 'SRC.[' + @v_column_name + '], ' + CHAR(13)
				SET @v_rownum = @v_rownum + 1
			END
		PRINT @v_scd1_update_script
	END
END





GO
/****** Object:  StoredProcedure [ETL].[fnc_get_table_structure]    Script Date: 15/11/2021 14:39:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [ETL].[fnc_get_table_structure] @p_src_tablename [varchar](100),@p_src_tablechema [varchar](100),@p_get_datatype [char](1),@p_get_wid_col [char](1),@v_script [nvarchar](max) OUT,@v_return_code [bigint] OUT,@v_return_message [varchar](500) OUT AS
BEGIN
	DECLARE 
		@v_rownum int = 1,
		@v_min_rownum int,
		@v_max_rownum int,
		@sql_script nvarchar(max) = N'',
		@p_schema varchar(100),
		@p_tablename varchar(100)
		;
	BEGIN
		SET @p_get_datatype = COALESCE(@p_get_datatype, 'Y')
		SET @p_get_wid_col = COALESCE(@p_get_wid_col, 'Y')
		SET @v_return_code = 1
		SET @p_schema = @p_src_tablechema
		SET @p_tablename = @p_src_tablename

		IF OBJECT_ID (@p_schema+'.'+@p_tablename, 'U') IS NOT NULL
			BEGIN
				IF OBJECT_ID('tempdb..#temp_table_sql_script', 'U') IS NOT NULL
					BEGIN
						DROP TABLE #temp_table_sql_script
					END

				IF @p_get_wid_col = 'Y'
					BEGIN
						CREATE TABLE #temp_table_sql_script WITH ( DISTRIBUTION = ROUND_ROBIN) AS 
						SELECT 
							'[' + COLUMN_NAME + '] ' + DATA_TYPE + COALESCE('(' + CAST(CHARACTER_MAXIMUM_LENGTH AS NVARCHAR) + ')', '') AS SCRIPT, 
							COLUMN_NAME,
							ORDINAL_POSITION,
							ROW_NUMBER() OVER (ORDER BY ORDINAL_POSITION) AS ROWNUM
						FROM INFORMATION_SCHEMA.COLUMNS
						WHERE TABLE_NAME = @p_tablename	AND TABLE_SCHEMA = @p_schema;
					END
				ELSE
					BEGIN
						CREATE TABLE #temp_table_sql_script WITH ( DISTRIBUTION = ROUND_ROBIN) AS 
						SELECT 
							'[' + COLUMN_NAME + '] ' + DATA_TYPE + COALESCE('(' + CAST(CHARACTER_MAXIMUM_LENGTH AS NVARCHAR) + ')', '') AS SCRIPT, 
							COLUMN_NAME,
							ORDINAL_POSITION,
							ROW_NUMBER() OVER (ORDER BY ORDINAL_POSITION) AS ROWNUM
						FROM INFORMATION_SCHEMA.COLUMNS
						WHERE TABLE_NAME = @p_tablename	AND TABLE_SCHEMA = @p_schema
						AND COLUMN_NAME NOT LIKE 'ROW_WID'
					END

				SET @v_min_rownum = (SELECT min(rownum) FROM #temp_table_sql_script)
				SET @v_max_rownum = (SELECT max(rownum) FROM #temp_table_sql_script)

				--Generate create table statement
				SET @sql_script = ''
				IF @p_get_datatype = 'Y'
					WHILE @v_rownum <= @v_max_rownum
						BEGIN
							set @sql_script = @sql_script + (select script from #temp_table_sql_script where rownum = @v_rownum)
							if @v_rownum < @v_max_rownum
								set @sql_script = @sql_script + ', ' + CHAR(13)

							set @v_rownum = @v_rownum + 1
						END
				ELSE
					WHILE @v_rownum <= @v_max_rownum
						BEGIN
							set @sql_script = @sql_script + (select column_name from #temp_table_sql_script where rownum = @v_rownum)
							if @v_rownum < @v_max_rownum
								set @sql_script = @sql_script + ', ' + CHAR(13)

							set @v_rownum = @v_rownum + 1
						END					
				PRINT @sql_script
				SET @v_script = @sql_script
			END
		ELSE
			BEGIN
				SET @v_return_code = -1
				SET @v_return_message = 'Source Table is not existing.'
				PRINT @v_return_message
			END
	END
END 
GO
